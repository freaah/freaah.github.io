{"ast":null,"code":"import { Rect as $60423f92c7f9ad87$export$c79fc6492f3af13d } from \"./Rect.mjs\";\nimport { Virtualizer as $38b9490c1cca8fc4$export$89be5a243e59c4b2 } from \"./Virtualizer.mjs\";\nimport { useState as $3Fik3$useState, useRef as $3Fik3$useRef, useMemo as $3Fik3$useMemo, useCallback as $3Fik3$useCallback } from \"react\";\nimport { useLayoutEffect as $3Fik3$useLayoutEffect } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  let [visibleRect, setVisibleRect] = (0, $3Fik3$useState)(new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, 0, 0));\n  let [isScrolling, setScrolling] = (0, $3Fik3$useState)(false);\n  let [invalidationContext, setInvalidationContext] = (0, $3Fik3$useState)({});\n  let visibleRectChanged = (0, $3Fik3$useRef)(false);\n  let [virtualizer] = (0, $3Fik3$useState)(() => new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)({\n    collection: opts.collection,\n    layout: opts.layout,\n    delegate: {\n      setVisibleRect(rect) {\n        setVisibleRect(rect);\n        visibleRectChanged.current = true;\n      },\n      // TODO: should changing these invalidate the entire cache?\n      renderView: opts.renderView,\n      invalidate: setInvalidationContext\n    }\n  }));\n  // onVisibleRectChange must be called from an effect, not during render.\n  (0, $3Fik3$useLayoutEffect)(() => {\n    if (visibleRectChanged.current) {\n      visibleRectChanged.current = false;\n      opts.onVisibleRectChange(visibleRect);\n    }\n  });\n  let mergedInvalidationContext = (0, $3Fik3$useMemo)(() => {\n    if (opts.layoutOptions != null) return {\n      ...invalidationContext,\n      layoutOptions: opts.layoutOptions\n    };\n    return invalidationContext;\n  }, [invalidationContext, opts.layoutOptions]);\n  let visibleViews = virtualizer.render({\n    layout: opts.layout,\n    collection: opts.collection,\n    persistedKeys: opts.persistedKeys,\n    layoutOptions: opts.layoutOptions,\n    visibleRect: visibleRect,\n    invalidationContext: mergedInvalidationContext,\n    isScrolling: isScrolling\n  });\n  let contentSize = virtualizer.contentSize;\n  let startScrolling = (0, $3Fik3$useCallback)(() => {\n    setScrolling(true);\n  }, []);\n  let endScrolling = (0, $3Fik3$useCallback)(() => {\n    setScrolling(false);\n  }, []);\n  let state = (0, $3Fik3$useMemo)(() => ({\n    virtualizer: virtualizer,\n    visibleViews: visibleViews,\n    setVisibleRect: setVisibleRect,\n    contentSize: contentSize,\n    isScrolling: isScrolling,\n    startScrolling: startScrolling,\n    endScrolling: endScrolling\n  }), [virtualizer, visibleViews, setVisibleRect, contentSize, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\nexport { $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"names":["$fc0b13b484ac1194$export$1505db82fe357e65","opts","visibleRect","setVisibleRect","$3Fik3$useState","$60423f92c7f9ad87$export$c79fc6492f3af13d","isScrolling","setScrolling","invalidationContext","setInvalidationContext","visibleRectChanged","$3Fik3$useRef","virtualizer","$38b9490c1cca8fc4$export$89be5a243e59c4b2","collection","layout","delegate","rect","current","renderView","invalidate","$3Fik3$useLayoutEffect","onVisibleRectChange","mergedInvalidationContext","$3Fik3$useMemo","layoutOptions","visibleViews","render","persistedKeys","contentSize","startScrolling","$3Fik3$useCallback","endScrolling","state"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\useVirtualizerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Key} from '@react-types/shared';\nimport {InvalidationContext} from './types';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useCallback, useMemo, useRef, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, O> {\n  renderView(type: string, content: T | null): V,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  persistedKeys?: Set<Key> | null,\n  layoutOptions?: O\n}\n\nexport interface VirtualizerState<T extends object, V> {\n  visibleViews: ReusableView<T, V>[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  virtualizer: Virtualizer<T, V>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, O = any>(opts: VirtualizerProps<T, V, O>): VirtualizerState<T, V> {\n  let [visibleRect, setVisibleRect] = useState(new Rect(0, 0, 0, 0));\n  let [isScrolling, setScrolling] = useState(false);\n  let [invalidationContext, setInvalidationContext] = useState<InvalidationContext>({});\n  let visibleRectChanged = useRef(false);\n  let [virtualizer] = useState(() => new Virtualizer<T, V>({\n    collection: opts.collection,\n    layout: opts.layout,\n    delegate: {\n      setVisibleRect(rect) {\n        setVisibleRect(rect);\n        visibleRectChanged.current = true;\n      },\n      // TODO: should changing these invalidate the entire cache?\n      renderView: opts.renderView,\n      invalidate: setInvalidationContext\n    }\n  }));\n\n  // onVisibleRectChange must be called from an effect, not during render.\n  useLayoutEffect(() => {\n    if (visibleRectChanged.current) {\n      visibleRectChanged.current = false;\n      opts.onVisibleRectChange(visibleRect);\n    }\n  });\n\n  let mergedInvalidationContext = useMemo(() => {\n    if (opts.layoutOptions != null) {\n      return {...invalidationContext, layoutOptions: opts.layoutOptions};\n    }\n    return invalidationContext;\n  }, [invalidationContext, opts.layoutOptions]);\n\n  let visibleViews = virtualizer.render({\n    layout: opts.layout,\n    collection: opts.collection,\n    persistedKeys: opts.persistedKeys,\n    layoutOptions: opts.layoutOptions,\n    visibleRect,\n    invalidationContext: mergedInvalidationContext,\n    isScrolling\n  });\n\n  let contentSize = virtualizer.contentSize;\n\n  let startScrolling = useCallback(() => {\n    setScrolling(true);\n  }, []);\n  let endScrolling = useCallback(() => {\n    setScrolling(false);\n  }, []);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAyCO,SAASA,0CAAkDC,IAA+B;EAC/F,IAAI,CAACC,WAAA,EAAaC,cAAA,CAAe,GAAG,IAAAC,eAAO,EAAE,KAAI,GAAAC,yCAAG,EAAE,GAAG,GAAG,GAAG;EAC/D,IAAI,CAACC,WAAA,EAAaC,YAAA,CAAa,GAAG,IAAAH,eAAO,EAAE;EAC3C,IAAI,CAACI,mBAAA,EAAqBC,sBAAA,CAAuB,GAAG,IAAAL,eAAO,EAAuB,CAAC;EACnF,IAAIM,kBAAA,GAAqB,IAAAC,aAAK,EAAE;EAChC,IAAI,CAACC,WAAA,CAAY,GAAG,IAAAR,eAAO,EAAE,MAAM,KAAI,GAAAS,yCAAU,EAAQ;IACvDC,UAAA,EAAYb,IAAA,CAAKa,UAAU;IAC3BC,MAAA,EAAQd,IAAA,CAAKc,MAAM;IACnBC,QAAA,EAAU;MACRb,eAAec,IAAI;QACjBd,cAAA,CAAec,IAAA;QACfP,kBAAA,CAAmBQ,OAAO,GAAG;MAC/B;MACA;MACAC,UAAA,EAAYlB,IAAA,CAAKkB,UAAU;MAC3BC,UAAA,EAAYX;IACd;EACF;EAEA;EACA,IAAAY,sBAAc,EAAE;IACd,IAAIX,kBAAA,CAAmBQ,OAAO,EAAE;MAC9BR,kBAAA,CAAmBQ,OAAO,GAAG;MAC7BjB,IAAA,CAAKqB,mBAAmB,CAACpB,WAAA;IAC3B;EACF;EAEA,IAAIqB,yBAAA,GAA4B,IAAAC,cAAM,EAAE;IACtC,IAAIvB,IAAA,CAAKwB,aAAa,IAAI,MACxB,OAAO;MAAC,GAAGjB,mBAAmB;MAAEiB,aAAA,EAAexB,IAAA,CAAKwB;IAAa;IAEnE,OAAOjB,mBAAA;EACT,GAAG,CAACA,mBAAA,EAAqBP,IAAA,CAAKwB,aAAa,CAAC;EAE5C,IAAIC,YAAA,GAAed,WAAA,CAAYe,MAAM,CAAC;IACpCZ,MAAA,EAAQd,IAAA,CAAKc,MAAM;IACnBD,UAAA,EAAYb,IAAA,CAAKa,UAAU;IAC3Bc,aAAA,EAAe3B,IAAA,CAAK2B,aAAa;IACjCH,aAAA,EAAexB,IAAA,CAAKwB,aAAa;iBACjCvB,WAAA;IACAM,mBAAA,EAAqBe,yBAAA;iBACrBjB;EACF;EAEA,IAAIuB,WAAA,GAAcjB,WAAA,CAAYiB,WAAW;EAEzC,IAAIC,cAAA,GAAiB,IAAAC,kBAAU,EAAE;IAC/BxB,YAAA,CAAa;EACf,GAAG,EAAE;EACL,IAAIyB,YAAA,GAAe,IAAAD,kBAAU,EAAE;IAC7BxB,YAAA,CAAa;EACf,GAAG,EAAE;EAEL,IAAI0B,KAAA,GAAQ,IAAAT,cAAM,EAAE,OAAO;iBACzBZ,WAAA;kBACAc,YAAA;oBACAvB,cAAA;iBACA0B,WAAA;iBACAvB,WAAA;oBACAwB,cAAA;kBACAE;EACF,IAAI,CACFpB,WAAA,EACAc,YAAA,EACAvB,cAAA,EACA0B,WAAA,EACAvB,WAAA,EACAwB,cAAA,EACAE,YAAA,CACD;EAED,OAAOC,KAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}