{"ast":null,"code":"import { flushSync as $eLjnH$flushSync } from \"react-dom\";\nimport $eLjnH$react, { useState as $eLjnH$useState, useRef as $eLjnH$useRef, useImperativeHandle as $eLjnH$useImperativeHandle, useEffect as $eLjnH$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $ad0e3f3d9c50e4ba$export$905ab40ac2179daa = /*#__PURE__*/(0, $eLjnH$react).forwardRef(function DragPreview(props, ref) {\n  let render = props.children;\n  let [children, setChildren] = (0, $eLjnH$useState)(null);\n  let domRef = (0, $eLjnH$useRef)(null);\n  let raf = (0, $eLjnH$useRef)(undefined);\n  (0, $eLjnH$useImperativeHandle)(ref, () => (items, callback) => {\n    // This will be called during the onDragStart event by useDrag. We need to render the\n    // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.\n    (0, $eLjnH$flushSync)(() => {\n      setChildren(render(items));\n    });\n    // Yield back to useDrag to set the drag image.\n    callback(domRef.current);\n    // Remove the preview from the DOM after a frame so the browser has time to paint.\n    raf.current = requestAnimationFrame(() => {\n      setChildren(null);\n    });\n  }, [render]);\n  (0, $eLjnH$useEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, []);\n  if (!children) return null;\n  return /*#__PURE__*/(0, $eLjnH$react).createElement(\"div\", {\n    style: {\n      zIndex: -100,\n      position: 'absolute',\n      top: 0,\n      left: -100000\n    },\n    ref: domRef\n  }, children);\n});\nexport { $ad0e3f3d9c50e4ba$export$905ab40ac2179daa as DragPreview };","map":{"version":3,"names":["$ad0e3f3d9c50e4ba$export$905ab40ac2179daa","$eLjnH$react","forwardRef","DragPreview","props","ref","render","children","setChildren","$eLjnH$useState","domRef","$eLjnH$useRef","raf","undefined","$eLjnH$useImperativeHandle","items","callback","$eLjnH$flushSync","current","requestAnimationFrame","$eLjnH$useEffect","cancelAnimationFrame","createElement","style","zIndex","position","top","left"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\dnd\\dist\\packages\\@react-aria\\dnd\\src\\DragPreview.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DragItem, DragPreviewRenderer} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport React, {ForwardedRef, JSX, useEffect, useImperativeHandle, useRef, useState} from 'react';\n\nexport interface DragPreviewProps {\n  children: (items: DragItem[]) => JSX.Element | null\n}\n\nexport const DragPreview = React.forwardRef(function DragPreview(props: DragPreviewProps, ref: ForwardedRef<DragPreviewRenderer | null>) {\n  let render = props.children;\n  let [children, setChildren] = useState<JSX.Element | null>(null);\n  let domRef = useRef<HTMLDivElement | null>(null);\n  let raf = useRef<ReturnType<typeof requestAnimationFrame> | undefined>(undefined);\n\n  useImperativeHandle(ref, () => (items: DragItem[], callback: (node: HTMLElement | null) => void) => {\n    // This will be called during the onDragStart event by useDrag. We need to render the\n    // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.\n    flushSync(() => {\n      setChildren(render(items));\n    });\n\n    // Yield back to useDrag to set the drag image.\n    callback(domRef.current);\n\n    // Remove the preview from the DOM after a frame so the browser has time to paint.\n    raf.current = requestAnimationFrame(() => {\n      setChildren(null);\n    });\n  }, [render]);\n\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, []);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div style={{zIndex: -100, position: 'absolute', top: 0, left: -100000}} ref={domRef}>\n      {children}\n    </div>\n  );\n});\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAoBO,MAAMA,yCAAA,gBAAc,IAAAC,YAAI,EAAEC,UAAU,CAAC,SAASC,YAAYC,KAAuB,EAAEC,GAA6C;EACrI,IAAIC,MAAA,GAASF,KAAA,CAAMG,QAAQ;EAC3B,IAAI,CAACA,QAAA,EAAUC,WAAA,CAAY,GAAG,IAAAC,eAAO,EAAsB;EAC3D,IAAIC,MAAA,GAAS,IAAAC,aAAK,EAAyB;EAC3C,IAAIC,GAAA,GAAM,IAAAD,aAAK,EAAwDE,SAAA;EAEvE,IAAAC,0BAAkB,EAAET,GAAA,EAAK,MAAM,CAACU,KAAA,EAAmBC,QAAA;IACjD;IACA;IACA,IAAAC,gBAAQ,EAAE;MACRT,WAAA,CAAYF,MAAA,CAAOS,KAAA;IACrB;IAEA;IACAC,QAAA,CAASN,MAAA,CAAOQ,OAAO;IAEvB;IACAN,GAAA,CAAIM,OAAO,GAAGC,qBAAA,CAAsB;MAClCX,WAAA,CAAY;IACd;EACF,GAAG,CAACF,MAAA,CAAO;EAEX,IAAAc,gBAAQ,EAAE;IACR,OAAO;MACL,IAAIR,GAAA,CAAIM,OAAO,EACbG,oBAAA,CAAqBT,GAAA,CAAIM,OAAO;IAEpC;EACF,GAAG,EAAE;EAEL,IAAI,CAACX,QAAA,EACH,OAAO;EAGT,oBACE,IAAAN,YAAA,EAAAqB,aAAA,CAAC;IAAIC,KAAA,EAAO;MAACC,MAAA,EAAQ;MAAMC,QAAA,EAAU;MAAYC,GAAA,EAAK;MAAGC,IAAA,EAAM;IAAO;IAAGtB,GAAA,EAAKK;KAC3EH,QAAA;AAGP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}