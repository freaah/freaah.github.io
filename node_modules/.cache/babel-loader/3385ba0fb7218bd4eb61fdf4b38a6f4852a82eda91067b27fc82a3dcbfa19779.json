{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */let $ad1d98aa8f0c31b4$var$KEY = 0;\nclass $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  /**\n  * Prepares the view for reuse. Called just before the view is removed from the DOM.\n  */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n  getReusableView(reuseType) {\n    // Reusable view queue should be FIFO so that DOM order remains consistent during scrolling.\n    // For example, cells within a row should remain in the same order even if the row changes contents.\n    // The cells within a row are removed from their parent in order. If the row is reused, the cells\n    // should be reused in the new row in the same order they were before.\n    let reusable = this.reusableViews.get(reuseType);\n    let view = reusable && reusable.length > 0 ? reusable.shift() : new $ad1d98aa8f0c31b4$export$7a41b6f219e61634(this.virtualizer, this, reuseType);\n    return view;\n  }\n  reuseChild(child) {\n    child.prepareForReuse();\n    let reusable = this.reusableViews.get(child.viewType);\n    if (!reusable) {\n      reusable = [];\n      this.reusableViews.set(child.viewType, reusable);\n    }\n    reusable.push(child);\n  }\n  constructor(virtualizer, viewType) {\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n    this.viewType = viewType;\n    this.children = new Set();\n    this.reusableViews = new Map();\n    this.layoutInfo = null;\n    this.content = null;\n    this.rendered = null;\n  }\n}\nclass $ad1d98aa8f0c31b4$export$e21886a4eef6b29a extends $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  constructor(virtualizer) {\n    super(virtualizer, 'root');\n  }\n}\nclass $ad1d98aa8f0c31b4$export$7a41b6f219e61634 extends $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  constructor(virtualizer, parent, viewType) {\n    super(virtualizer, viewType);\n    this.parent = parent;\n  }\n}\nexport { $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $ad1d98aa8f0c31b4$export$7a41b6f219e61634 as ChildView, $ad1d98aa8f0c31b4$export$e21886a4eef6b29a as RootView };","map":{"version":3,"names":["$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","prepareForReuse","content","rendered","layoutInfo","getReusableView","reuseType","reusable","reusableViews","get","view","length","shift","$ad1d98aa8f0c31b4$export$7a41b6f219e61634","virtualizer","reuseChild","child","viewType","set","push","constructor","key","children","Set","Map","$ad1d98aa8f0c31b4$export$e21886a4eef6b29a","parent"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\ReusableView.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [Virtualizer]{@link Virtualizer} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed.\n */\nexport class ReusableView<T extends object, V> {\n  /** The Virtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the virtualizer. */\n  content: T | null;\n\n  rendered: V | null;\n\n  viewType: string;\n  key: Key;\n\n  children: Set<ChildView<T, V>>;\n  reusableViews: Map<string, ChildView<T, V>[]>;\n\n  constructor(virtualizer: Virtualizer<T, V>, viewType: string) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n    this.viewType = viewType;\n    this.children = new Set();\n    this.reusableViews = new Map();\n    this.layoutInfo = null;\n    this.content = null;\n    this.rendered = null;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n\n  getReusableView(reuseType: string) {\n    // Reusable view queue should be FIFO so that DOM order remains consistent during scrolling.\n    // For example, cells within a row should remain in the same order even if the row changes contents.\n    // The cells within a row are removed from their parent in order. If the row is reused, the cells\n    // should be reused in the new row in the same order they were before.\n    let reusable = this.reusableViews.get(reuseType);\n    let view = reusable && reusable.length > 0\n      ? reusable.shift()!\n      : new ChildView<T, V>(this.virtualizer, this, reuseType);\n\n    return view;\n  }\n\n  reuseChild(child: ChildView<T, V>) {\n    child.prepareForReuse();\n    let reusable = this.reusableViews.get(child.viewType);\n    if (!reusable) {\n      reusable = [];\n      this.reusableViews.set(child.viewType, reusable);\n    }\n    reusable.push(child);\n  }\n}\n\nexport class RootView<T extends object, V> extends ReusableView<T, V> {\n  constructor(virtualizer: Virtualizer<T, V>) {\n    super(virtualizer, 'root');\n  }\n}\n\nexport class ChildView<T extends object, V> extends ReusableView<T, V> {\n  parent: ReusableView<T, V>;\n\n  constructor(virtualizer: Virtualizer<T, V>, parent: ReusableView<T, V>, viewType: string) {\n    super(virtualizer, viewType);\n    this.parent = parent;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;GAgBA,IAAIA,yBAAA,GAAM;AAMH,MAAMC,yCAAA;EA6BX;;;EAGAC,gBAAA,EAAkB;IAChB,IAAI,CAACC,OAAO,GAAG;IACf,IAAI,CAACC,QAAQ,GAAG;IAChB,IAAI,CAACC,UAAU,GAAG;EACpB;EAEAC,gBAAgBC,SAAiB,EAAE;IACjC;IACA;IACA;IACA;IACA,IAAIC,QAAA,GAAW,IAAI,CAACC,aAAa,CAACC,GAAG,CAACH,SAAA;IACtC,IAAII,IAAA,GAAOH,QAAA,IAAYA,QAAA,CAASI,MAAM,GAAG,IACrCJ,QAAA,CAASK,KAAK,KACd,IAAIC,yCAAA,CAAgB,IAAI,CAACC,WAAW,EAAE,IAAI,EAAER,SAAA;IAEhD,OAAOI,IAAA;EACT;EAEAK,WAAWC,KAAsB,EAAE;IACjCA,KAAA,CAAMf,eAAe;IACrB,IAAIM,QAAA,GAAW,IAAI,CAACC,aAAa,CAACC,GAAG,CAACO,KAAA,CAAMC,QAAQ;IACpD,IAAI,CAACV,QAAA,EAAU;MACbA,QAAA,GAAW,EAAE;MACb,IAAI,CAACC,aAAa,CAACU,GAAG,CAACF,KAAA,CAAMC,QAAQ,EAAEV,QAAA;IACzC;IACAA,QAAA,CAASY,IAAI,CAACH,KAAA;EAChB;EAzCAI,YAAYN,WAA8B,EAAEG,QAAgB,EAAE;IAC5D,IAAI,CAACH,WAAW,GAAGA,WAAA;IACnB,IAAI,CAACO,GAAG,GAAG,EAAEtB,yBAAA;IACb,IAAI,CAACkB,QAAQ,GAAGA,QAAA;IAChB,IAAI,CAACK,QAAQ,GAAG,IAAIC,GAAA;IACpB,IAAI,CAACf,aAAa,GAAG,IAAIgB,GAAA;IACzB,IAAI,CAACpB,UAAU,GAAG;IAClB,IAAI,CAACF,OAAO,GAAG;IACf,IAAI,CAACC,QAAQ,GAAG;EAClB;AAiCF;AAEO,MAAMsB,yCAAA,SAAsCzB,yCAAA;EACjDoB,YAAYN,WAA8B,EAAE;IAC1C,KAAK,CAACA,WAAA,EAAa;EACrB;AACF;AAEO,MAAMD,yCAAA,SAAuCb,yCAAA;EAGlDoB,YAAYN,WAA8B,EAAEY,MAA0B,EAAET,QAAgB,EAAE;IACxF,KAAK,CAACH,WAAA,EAAaG,QAAA;IACnB,IAAI,CAACS,MAAM,GAAGA,MAAA;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}