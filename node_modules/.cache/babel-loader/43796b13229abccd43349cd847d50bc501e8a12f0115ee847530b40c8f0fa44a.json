{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"ref\"];\nimport { useObjectRef as $iETbY$useObjectRef, mergeRefs as $iETbY$mergeRefs, mergeProps as $iETbY$mergeProps, useLayoutEffect as $iETbY$useLayoutEffect } from \"@react-aria/utils\";\nimport $iETbY$react, { useMemo as $iETbY$useMemo, useContext as $iETbY$useContext, useState as $iETbY$useState, useRef as $iETbY$useRef, useCallback as $iETbY$useCallback } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $64fa3d84918910a7$export$c62b8e45d58ddad9 = Symbol('default');\nfunction $64fa3d84918910a7$export$2881499e37b75b9a(_ref) {\n  let {\n    values: values,\n    children: children\n  } = _ref;\n  for (let [Context, value] of values)\n  // @ts-ignore\n  children = /*#__PURE__*/(0, $iETbY$react).createElement(Context.Provider, {\n    value: value\n  }, children);\n  return children;\n}\nfunction $64fa3d84918910a7$export$4d86445c2cf5e3(props) {\n  let {\n    className: className,\n    style: style,\n    children: children,\n    defaultClassName: defaultClassName,\n    defaultChildren: defaultChildren,\n    defaultStyle: defaultStyle,\n    values: values\n  } = props;\n  return (0, $iETbY$useMemo)(() => {\n    let computedClassName;\n    let computedStyle;\n    let computedChildren;\n    if (typeof className === 'function') computedClassName = className(_objectSpread(_objectSpread({}, values), {}, {\n      defaultClassName: defaultClassName\n    }));else computedClassName = className;\n    if (typeof style === 'function') computedStyle = style(_objectSpread(_objectSpread({}, values), {}, {\n      defaultStyle: defaultStyle || {}\n    }));else computedStyle = style;\n    if (typeof children === 'function') computedChildren = children(_objectSpread(_objectSpread({}, values), {}, {\n      defaultChildren: defaultChildren\n    }));else if (children == null) computedChildren = defaultChildren;else computedChildren = children;\n    return {\n      className: computedClassName !== null && computedClassName !== void 0 ? computedClassName : defaultClassName,\n      style: computedStyle || defaultStyle ? _objectSpread(_objectSpread({}, defaultStyle), computedStyle) : undefined,\n      children: computedChildren !== null && computedChildren !== void 0 ? computedChildren : defaultChildren,\n      'data-rac': ''\n    };\n  }, [className, style, children, defaultClassName, defaultChildren, defaultStyle, values]);\n}\nfunction $64fa3d84918910a7$export$c245e6201fed2f75(\n// https://stackoverflow.com/questions/60898079/typescript-type-t-or-function-t-usage\nvalue, wrap) {\n  return renderProps => wrap(typeof value === 'function' ? value(renderProps) : value, renderProps);\n}\nfunction $64fa3d84918910a7$export$fabf2dc03a41866e(context, slot) {\n  let ctx = (0, $iETbY$useContext)(context);\n  if (slot === null)\n    // An explicit `null` slot means don't use context.\n    return null;\n  if (ctx && typeof ctx === 'object' && 'slots' in ctx && ctx.slots) {\n    let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map(p => \"\\\"\".concat(p, \"\\\"\")));\n    if (!slot && !ctx.slots[$64fa3d84918910a7$export$c62b8e45d58ddad9]) throw new Error(\"A slot prop is required. Valid slot names are \".concat(availableSlots, \".\"));\n    let slotKey = slot || $64fa3d84918910a7$export$c62b8e45d58ddad9;\n    if (!ctx.slots[slotKey])\n      // @ts-ignore\n      throw new Error(\"Invalid slot \\\"\".concat(slot, \"\\\". Valid slot names are \").concat(availableSlots, \".\"));\n    return ctx.slots[slotKey];\n  }\n  // @ts-ignore\n  return ctx;\n}\nfunction $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, context) {\n  let ctx = $64fa3d84918910a7$export$fabf2dc03a41866e(context, props.slot) || {};\n  // @ts-ignore - TS says \"Type 'unique symbol' cannot be used as an index type.\" but not sure why.\n  let {\n      ref: contextRef\n    } = ctx,\n    contextProps = _objectWithoutProperties(ctx, _excluded);\n  let mergedRef = (0, $iETbY$useObjectRef)((0, $iETbY$useMemo)(() => (0, $iETbY$mergeRefs)(ref, contextRef), [ref, contextRef]));\n  let mergedProps = (0, $iETbY$mergeProps)(contextProps, props);\n  // mergeProps does not merge `style`. Adding this there might be a breaking change.\n  if ('style' in contextProps && contextProps.style && 'style' in props && props.style) {\n    if (typeof contextProps.style === 'function' || typeof props.style === 'function')\n      // @ts-ignore\n      mergedProps.style = renderProps => {\n        let contextStyle = typeof contextProps.style === 'function' ? contextProps.style(renderProps) : contextProps.style;\n        let defaultStyle = _objectSpread(_objectSpread({}, renderProps.defaultStyle), contextStyle);\n        let style = typeof props.style === 'function' ? props.style(_objectSpread(_objectSpread({}, renderProps), {}, {\n          defaultStyle: defaultStyle\n        })) : props.style;\n        return _objectSpread(_objectSpread({}, defaultStyle), style);\n      };else\n      // @ts-ignore\n      mergedProps.style = _objectSpread(_objectSpread({}, contextProps.style), props.style);\n  }\n  return [mergedProps, mergedRef];\n}\nfunction $64fa3d84918910a7$export$9d4c57ee4c6ffdd8() {\n  // Assume we do have the slot in the initial render.\n  let [hasSlot, setHasSlot] = (0, $iETbY$useState)(true);\n  let hasRun = (0, $iETbY$useRef)(false);\n  // A callback ref which will run when the slotted element mounts.\n  // This should happen before the useLayoutEffect below.\n  let ref = (0, $iETbY$useCallback)(el => {\n    hasRun.current = true;\n    setHasSlot(!!el);\n  }, []);\n  // If the callback hasn't been called, then reset to false.\n  (0, $iETbY$useLayoutEffect)(() => {\n    if (!hasRun.current) setHasSlot(false);\n  }, []);\n  return [ref, hasSlot];\n}\nfunction $64fa3d84918910a7$export$ef03459518577ad4(props) {\n  const prefix = /^(data-.*)$/;\n  let filteredProps = {};\n  for (const prop in props) if (!prefix.test(prop)) filteredProps[prop] = props[prop];\n  return filteredProps;\n}\nexport { $64fa3d84918910a7$export$c62b8e45d58ddad9 as DEFAULT_SLOT, $64fa3d84918910a7$export$2881499e37b75b9a as Provider, $64fa3d84918910a7$export$4d86445c2cf5e3 as useRenderProps, $64fa3d84918910a7$export$c245e6201fed2f75 as composeRenderProps, $64fa3d84918910a7$export$fabf2dc03a41866e as useSlottedContext, $64fa3d84918910a7$export$29f1550f4b0d4415 as useContextProps, $64fa3d84918910a7$export$9d4c57ee4c6ffdd8 as useSlot, $64fa3d84918910a7$export$ef03459518577ad4 as removeDataAttributes };","map":{"version":3,"names":["$64fa3d84918910a7$export$c62b8e45d58ddad9","Symbol","$64fa3d84918910a7$export$2881499e37b75b9a","_ref","values","children","Context","value","$iETbY$react","createElement","Provider","$64fa3d84918910a7$export$4d86445c2cf5e3","props","className","style","defaultClassName","defaultChildren","defaultStyle","$iETbY$useMemo","computedClassName","computedStyle","computedChildren","_objectSpread","undefined","$64fa3d84918910a7$export$c245e6201fed2f75","wrap","renderProps","$64fa3d84918910a7$export$fabf2dc03a41866e","context","slot","ctx","$iETbY$useContext","slots","availableSlots","Intl","ListFormat","format","Object","keys","map","p","concat","Error","slotKey","$64fa3d84918910a7$export$29f1550f4b0d4415","ref","contextRef","contextProps","_objectWithoutProperties","_excluded","mergedRef","$iETbY$useObjectRef","$iETbY$mergeRefs","mergedProps","$iETbY$mergeProps","contextStyle","$64fa3d84918910a7$export$9d4c57ee4c6ffdd8","hasSlot","setHasSlot","$iETbY$useState","hasRun","$iETbY$useRef","$iETbY$useCallback","el","current","$iETbY$useLayoutEffect","$64fa3d84918910a7$export$ef03459518577ad4","prefix","filteredProps","prop","test"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\react-aria-components\\dist\\packages\\react-aria-components\\src\\utils.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, RefObject,  DOMProps as SharedDOMProps} from '@react-types/shared';\nimport {mergeProps, mergeRefs, useLayoutEffect, useObjectRef} from '@react-aria/utils';\nimport React, {Context, CSSProperties, ForwardedRef, JSX, ReactNode, RefCallback, UIEvent, useCallback, useContext, useMemo, useRef, useState} from 'react';\n\nexport const DEFAULT_SLOT = Symbol('default');\n\ninterface SlottedValue<T> {\n  slots?: Record<string | symbol, T>\n}\n\nexport type SlottedContextValue<T> = SlottedValue<T> | T | null | undefined;\nexport type ContextValue<T, E> = SlottedContextValue<WithRef<T, E>>;\n\ntype ProviderValue<T> = [Context<T>, T];\ntype ProviderValues<A, B, C, D, E, F, G, H, I, J, K> =\n  | [ProviderValue<A>]\n  | [ProviderValue<A>, ProviderValue<B>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>, ProviderValue<G>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>, ProviderValue<G>, ProviderValue<H>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>, ProviderValue<G>, ProviderValue<H>, ProviderValue<I>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>, ProviderValue<G>, ProviderValue<H>, ProviderValue<I>, ProviderValue<J>]\n  | [ProviderValue<A>, ProviderValue<B>, ProviderValue<C>, ProviderValue<D>, ProviderValue<E>, ProviderValue<F>, ProviderValue<G>, ProviderValue<H>, ProviderValue<I>, ProviderValue<J>, ProviderValue<K>];\n\ninterface ProviderProps<A, B, C, D, E, F, G, H, I, J, K> {\n  values: ProviderValues<A, B, C, D, E, F, G, H, I, J, K>,\n  children: ReactNode\n}\n\nexport function Provider<A, B, C, D, E, F, G, H, I, J, K>({values, children}: ProviderProps<A, B, C, D, E, F, G, H, I, J, K>): JSX.Element {\n  for (let [Context, value] of values) {\n    // @ts-ignore\n    children = <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  return children as JSX.Element;\n}\n\nexport interface StyleProps {\n  /** The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. */\n  className?: string,\n  /** The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. */\n  style?: CSSProperties\n}\n\nexport interface DOMProps extends StyleProps, SharedDOMProps {\n  /** The children of the component. */\n  children?: ReactNode\n}\n\nexport interface ScrollableProps<T extends Element> {\n  /** Handler that is called when a user scrolls. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event). */\n  onScroll?: (e: UIEvent<T>) => void\n}\n\nexport interface StyleRenderProps<T> {\n  /** The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state. */\n  className?: string | ((values: T & {defaultClassName: string | undefined}) => string),\n  /** The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state. */\n  style?: CSSProperties | ((values: T & {defaultStyle: CSSProperties}) => CSSProperties | undefined)\n}\n\nexport interface RenderProps<T> extends StyleRenderProps<T> {\n  /** The children of the component. A function may be provided to alter the children based on component state. */\n  children?: ReactNode | ((values: T & {defaultChildren: ReactNode | undefined}) => ReactNode)\n}\n\ninterface RenderPropsHookOptions<T> extends RenderProps<T>, SharedDOMProps, AriaLabelingProps {\n  values: T,\n  defaultChildren?: ReactNode,\n  defaultClassName?: string,\n  defaultStyle?: CSSProperties\n}\n\nexport function useRenderProps<T>(props: RenderPropsHookOptions<T>) {\n  let {\n    className,\n    style,\n    children,\n    defaultClassName = undefined,\n    defaultChildren = undefined,\n    defaultStyle,\n    values\n  } = props;\n\n  return useMemo(() => {\n    let computedClassName: string | undefined;\n    let computedStyle: React.CSSProperties | undefined;\n    let computedChildren: React.ReactNode | undefined;\n\n    if (typeof className === 'function') {\n      computedClassName = className({...values, defaultClassName});\n    } else {\n      computedClassName = className;\n    }\n\n    if (typeof style === 'function') {\n      computedStyle = style({...values, defaultStyle: defaultStyle || {}});\n    } else {\n      computedStyle = style;\n    }\n\n    if (typeof children === 'function') {\n      computedChildren = children({...values, defaultChildren});\n    } else if (children == null) {\n      computedChildren = defaultChildren;\n    } else {\n      computedChildren = children;\n    }\n\n    return {\n      className: computedClassName ?? defaultClassName,\n      style: (computedStyle || defaultStyle) ? {...defaultStyle, ...computedStyle} : undefined,\n      children: computedChildren ?? defaultChildren,\n      'data-rac': ''\n    };\n  }, [className, style, children, defaultClassName, defaultChildren, defaultStyle, values]);\n}\n\n/**\n * A helper function that accepts a user-provided render prop value (either a static value or a function),\n * and combines it with another value to create a final result.\n */\nexport function composeRenderProps<T, U, V extends T>(\n  // https://stackoverflow.com/questions/60898079/typescript-type-t-or-function-t-usage\n  value: T extends any ? (T | ((renderProps: U) => V)) : never,\n  wrap: (prevValue: T, renderProps: U) => V\n): (renderProps: U) => V {\n  return (renderProps) => wrap(typeof value === 'function' ? value(renderProps) : value, renderProps);\n}\n\nexport type WithRef<T, E> = T & {ref?: ForwardedRef<E>};\nexport interface SlotProps {\n  /**\n   * A slot name for the component. Slots allow the component to receive props from a parent component.\n   * An explicit `null` value indicates that the local props completely override all props received from a parent.\n   */\n  slot?: string | null\n}\n\nexport function useSlottedContext<T>(context: Context<SlottedContextValue<T>>, slot?: string | null): T | null | undefined {\n  let ctx = useContext(context);\n  if (slot === null) {\n    // An explicit `null` slot means don't use context.\n    return null;\n  }\n  if (ctx && typeof ctx === 'object' && 'slots' in ctx && ctx.slots) {\n    let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map(p => `\"${p}\"`));\n\n    if (!slot && !ctx.slots[DEFAULT_SLOT]) {\n      throw new Error(`A slot prop is required. Valid slot names are ${availableSlots}.`);\n    }\n    let slotKey = slot || DEFAULT_SLOT;\n    if (!ctx.slots[slotKey]) {\n      // @ts-ignore\n      throw new Error(`Invalid slot \"${slot}\". Valid slot names are ${availableSlots}.`);\n    }\n    return ctx.slots[slotKey];\n  }\n  // @ts-ignore\n  return ctx;\n}\n\nexport function useContextProps<T, U extends SlotProps, E extends Element>(props: T & SlotProps, ref: ForwardedRef<E>, context: Context<ContextValue<U, E>>): [T, RefObject<E | null>] {\n  let ctx = useSlottedContext(context, props.slot) || {};\n  // @ts-ignore - TS says \"Type 'unique symbol' cannot be used as an index type.\" but not sure why.\n  let {ref: contextRef, ...contextProps} = ctx as any;\n  let mergedRef = useObjectRef(useMemo(() => mergeRefs(ref, contextRef), [ref, contextRef]));\n  let mergedProps = mergeProps(contextProps, props) as unknown as T;\n\n  // mergeProps does not merge `style`. Adding this there might be a breaking change.\n  if (\n    'style' in contextProps &&\n    contextProps.style &&\n    'style' in props &&\n    props.style\n  ) {\n    if (typeof contextProps.style === 'function' || typeof props.style === 'function') {\n      // @ts-ignore\n      mergedProps.style = (renderProps) => {\n        let contextStyle = typeof contextProps.style === 'function' ? contextProps.style(renderProps) : contextProps.style;\n        let defaultStyle = {...renderProps.defaultStyle, ...contextStyle};\n        let style = typeof props.style === 'function'\n          ? props.style({...renderProps, defaultStyle})\n          : props.style;\n        return {...defaultStyle, ...style};\n      };\n    } else {\n      // @ts-ignore\n      mergedProps.style = {...contextProps.style, ...props.style};\n    }\n  }\n\n  return [mergedProps, mergedRef];\n}\n\nexport function useSlot(): [RefCallback<Element>, boolean] {\n  // Assume we do have the slot in the initial render.\n  let [hasSlot, setHasSlot] = useState(true);\n  let hasRun = useRef(false);\n\n  // A callback ref which will run when the slotted element mounts.\n  // This should happen before the useLayoutEffect below.\n  let ref = useCallback(el => {\n    hasRun.current = true;\n    setHasSlot(!!el);\n  }, []);\n\n  // If the callback hasn't been called, then reset to false.\n  useLayoutEffect(() => {\n    if (!hasRun.current) {\n      setHasSlot(false);\n    }\n  }, []);\n\n  return [ref, hasSlot];\n}\n\n/**\n * Filters out `data-*` attributes to keep them from being passed down and duplicated.\n * @param props\n */\nexport function removeDataAttributes<T>(props: T): T {\n  const prefix = /^(data-.*)$/;\n  let filteredProps = {} as T;\n\n  for (const prop in props) {\n    if (!prefix.test(prop)) {\n      filteredProps[prop] = props[prop];\n    }\n  }\n\n  return filteredProps;\n}\n\n// Override base type to change the default.\nexport interface RACValidation {\n  /**\n   * Whether to use native HTML form validation to prevent form submission\n   * when the value is missing or invalid, or mark the field as required\n   * or invalid via ARIA.\n   * @default 'native'\n   */\n  validationBehavior?: 'native' | 'aria'\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAgBO,MAAMA,yCAAA,GAAeC,MAAA,CAAO;AA4B5B,SAASC,0CAAAC,IAAA,EAA4G;EAAA,IAAlE;IAAAC,MAAA,EAACA,MAAM;IAAAC,QAAA,EAAEA;EAAQ,CAAiD,GAAAF,IAAA;EAC1H,KAAK,IAAI,CAACG,OAAA,EAASC,KAAA,CAAM,IAAIH,MAAA;EAC3B;EACAC,QAAA,gBAAW,IAAAG,YAAA,EAAAC,aAAA,CAACH,OAAA,CAAQI,QAAQ;IAACH,KAAA,EAAOA;KAAQF,QAAA;EAG9C,OAAOA,QAAA;AACT;AAsCO,SAASM,wCAAkBC,KAAgC;EAChE,IAAI;IAAAC,SAAA,EACFA,SAAS;IAAAC,KAAA,EACTA,KAAK;IAAAT,QAAA,EACLA,QAAQ;IAAAU,gBAAA,EACRA,gBAAgB;IAAAC,eAAA,EAChBA,eAAe;IAAAC,YAAA,EACfA,YAAY;IAAAb,MAAA,EACZA;EAAM,CACP,GAAGQ,KAAA;EAEJ,OAAO,IAAAM,cAAM,EAAE;IACb,IAAIC,iBAAA;IACJ,IAAIC,aAAA;IACJ,IAAIC,gBAAA;IAEJ,IAAI,OAAOR,SAAA,KAAc,YACvBM,iBAAA,GAAoBN,SAAA,CAAAS,aAAA,CAAAA,aAAA,KAAclB,MAAM;wBAAEW;IAAA,EAAgB,OAE1DI,iBAAA,GAAoBN,SAAA;IAGtB,IAAI,OAAOC,KAAA,KAAU,YACnBM,aAAA,GAAgBN,KAAA,CAAAQ,aAAA,CAAAA,aAAA,KAAUlB,MAAM;MAAEa,YAAA,EAAcA,YAAA,IAAgB,CAAC;IAAA,EAAC,OAElEG,aAAA,GAAgBN,KAAA;IAGlB,IAAI,OAAOT,QAAA,KAAa,YACtBgB,gBAAA,GAAmBhB,QAAA,CAAAiB,aAAA,CAAAA,aAAA,KAAalB,MAAM;uBAAEY;IAAA,EAAe,OAClD,IAAIX,QAAA,IAAY,MACrBgB,gBAAA,GAAmBL,eAAA,MAEnBK,gBAAA,GAAmBhB,QAAA;IAGrB,OAAO;MACLQ,SAAA,EAAWM,iBAAA,aAAAA,iBAAA,cAAAA,iBAAA,GAAqBJ,gBAAA;MAChCD,KAAA,EAAOM,aAAC,IAAiBH,YAAA,GAAAK,aAAA,CAAAA,aAAA,KAAoBL,YAAY,GAAKG,aAAa,IAAIG,SAAA;MAC/ElB,QAAA,EAAUgB,gBAAA,aAAAA,gBAAA,cAAAA,gBAAA,GAAoBL,eAAA;MAC9B,YAAY;IACd;EACF,GAAG,CAACH,SAAA,EAAWC,KAAA,EAAOT,QAAA,EAAUU,gBAAA,EAAkBC,eAAA,EAAiBC,YAAA,EAAcb,MAAA,CAAO;AAC1F;AAMO,SAASoB;AACd;AACAjB,KAA4D,EAC5DkB,IAAyC;EAEzC,OAAQC,WAAA,IAAgBD,IAAA,CAAK,OAAOlB,KAAA,KAAU,aAAaA,KAAA,CAAMmB,WAAA,IAAenB,KAAA,EAAOmB,WAAA;AACzF;AAWO,SAASC,0CAAqBC,OAAwC,EAAEC,IAAoB;EACjG,IAAIC,GAAA,GAAM,IAAAC,iBAAS,EAAEH,OAAA;EACrB,IAAIC,IAAA,KAAS;IACX;IACA,OAAO;EAET,IAAIC,GAAA,IAAO,OAAOA,GAAA,KAAQ,YAAY,WAAWA,GAAA,IAAOA,GAAA,CAAIE,KAAK,EAAE;IACjE,IAAIC,cAAA,GAAiB,IAAIC,IAAA,CAAKC,UAAU,GAAGC,MAAM,CAACC,MAAA,CAAOC,IAAI,CAACR,GAAA,CAAIE,KAAK,EAAEO,GAAG,CAACC,CAAA,SAAAC,MAAA,CAASD,CAAA,OAAI;IAE1F,IAAI,CAACX,IAAA,IAAQ,CAACC,GAAA,CAAIE,KAAK,CAAChC,yCAAA,CAAa,EACnC,MAAM,IAAI0C,KAAA,kDAAAD,MAAA,CAAuDR,cAAA,MAAiB;IAEpF,IAAIU,OAAA,GAAUd,IAAA,IAAQ7B,yCAAA;IACtB,IAAI,CAAC8B,GAAA,CAAIE,KAAK,CAACW,OAAA,CAAQ;MACrB;MACA,MAAM,IAAID,KAAA,mBAAAD,MAAA,CAAuBZ,IAAA,+BAAAY,MAAA,CAA+BR,cAAA,MAAiB;IAEnF,OAAOH,GAAA,CAAIE,KAAK,CAACW,OAAA,CAAQ;EAC3B;EACA;EACA,OAAOb,GAAA;AACT;AAEO,SAASc,0CAA2DhC,KAAoB,EAAEiC,GAAoB,EAAEjB,OAAoC;EACzJ,IAAIE,GAAA,GAAMH,yCAAA,CAAkBC,OAAA,EAAShB,KAAA,CAAMiB,IAAI,KAAK,CAAC;EACrD;EACA,IAAI;MAACgB,GAAA,EAAKC;IAAe,CAAa,GAAGhB,GAAA;IAAhBiB,YAAA,GAAAC,wBAAA,CAAgBlB,GAAA,EAAAmB,SAAA;EACzC,IAAIC,SAAA,GAAY,IAAAC,mBAAW,EAAE,IAAAjC,cAAM,EAAE,MAAM,IAAAkC,gBAAQ,EAAEP,GAAA,EAAKC,UAAA,GAAa,CAACD,GAAA,EAAKC,UAAA,CAAW;EACxF,IAAIO,WAAA,GAAc,IAAAC,iBAAS,EAAEP,YAAA,EAAcnC,KAAA;EAE3C;EACA,IACE,WAAWmC,YAAA,IACXA,YAAA,CAAajC,KAAK,IAClB,WAAWF,KAAA,IACXA,KAAA,CAAME,KAAK;IAEX,IAAI,OAAOiC,YAAA,CAAajC,KAAK,KAAK,cAAc,OAAOF,KAAA,CAAME,KAAK,KAAK;MACrE;MACAuC,WAAA,CAAYvC,KAAK,GAAIY,WAAA;QACnB,IAAI6B,YAAA,GAAe,OAAOR,YAAA,CAAajC,KAAK,KAAK,aAAaiC,YAAA,CAAajC,KAAK,CAACY,WAAA,IAAeqB,YAAA,CAAajC,KAAK;QAClH,IAAIG,YAAA,GAAAK,aAAA,CAAAA,aAAA,KAAmBI,WAAA,CAAYT,YAAY,GAAKsC,YAAY;QAChE,IAAIzC,KAAA,GAAQ,OAAOF,KAAA,CAAME,KAAK,KAAK,aAC/BF,KAAA,CAAME,KAAK,CAAAQ,aAAA,CAAAA,aAAA,KAAKI,WAAW;wBAAET;QAAA,EAAY,IACzCL,KAAA,CAAME,KAAK;QACf,OAAAQ,aAAA,CAAAA,aAAA,KAAWL,YAAY,GAAKH,KAAK;MACnC;MAEA;MACAuC,WAAA,CAAYvC,KAAK,GAAAQ,aAAA,CAAAA,aAAA,KAAOyB,YAAA,CAAajC,KAAK,GAAKF,KAAA,CAAME,KAAK;;EAI9D,OAAO,CAACuC,WAAA,EAAaH,SAAA,CAAU;AACjC;AAEO,SAASM,0CAAA;EACd;EACA,IAAI,CAACC,OAAA,EAASC,UAAA,CAAW,GAAG,IAAAC,eAAO,EAAE;EACrC,IAAIC,MAAA,GAAS,IAAAC,aAAK,EAAE;EAEpB;EACA;EACA,IAAIhB,GAAA,GAAM,IAAAiB,kBAAU,EAAEC,EAAA;IACpBH,MAAA,CAAOI,OAAO,GAAG;IACjBN,UAAA,CAAW,CAAC,CAACK,EAAA;EACf,GAAG,EAAE;EAEL;EACA,IAAAE,sBAAc,EAAE;IACd,IAAI,CAACL,MAAA,CAAOI,OAAO,EACjBN,UAAA,CAAW;EAEf,GAAG,EAAE;EAEL,OAAO,CAACb,GAAA,EAAKY,OAAA,CAAQ;AACvB;AAMO,SAASS,0CAAwBtD,KAAQ;EAC9C,MAAMuD,MAAA,GAAS;EACf,IAAIC,aAAA,GAAgB,CAAC;EAErB,KAAK,MAAMC,IAAA,IAAQzD,KAAA,EACjB,IAAI,CAACuD,MAAA,CAAOG,IAAI,CAACD,IAAA,GACfD,aAAa,CAACC,IAAA,CAAK,GAAGzD,KAAK,CAACyD,IAAA,CAAK;EAIrC,OAAOD,aAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}