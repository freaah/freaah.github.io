{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"rowProps\"],\n  _excluded2 = [\"children\"],\n  _excluded3 = [\"dropIndicatorProps\", \"isDropTarget\", \"buttonRef\"];\nimport { ButtonContext as $d2b4bc8c273e7be6$export$24d547caef80ccd1 } from \"./Button.mjs\";\nimport { CheckboxContext as $4e85f108e88277b8$export$b085522c77523c51 } from \"./RSPContexts.mjs\";\nimport { CollectionRendererContext as $7135fc7d473fd974$export$4feb769f8ddf26c5, DefaultCollectionRenderer as $7135fc7d473fd974$export$a164736487e3f0ae } from \"./Collection.mjs\";\nimport { DEFAULT_SLOT as $64fa3d84918910a7$export$c62b8e45d58ddad9, Provider as $64fa3d84918910a7$export$2881499e37b75b9a, useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { DragAndDropContext as $612b8eb6cb90e02d$export$d188a835a7bc5783, DropIndicatorContext as $612b8eb6cb90e02d$export$f55761759794cf55, useDndPersistedKeys as $612b8eb6cb90e02d$export$d1e8e3fbb7461f6, useRenderDropIndicator as $612b8eb6cb90e02d$export$971707d8a129a1f7 } from \"./DragAndDrop.mjs\";\nimport $dbSRa$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { CollectionNode as $dbSRa$CollectionNode, BaseCollection as $dbSRa$BaseCollection, Collection as $dbSRa$Collection, CollectionBuilder as $dbSRa$CollectionBuilder, createBranchComponent as $dbSRa$createBranchComponent, useCachedChildren as $dbSRa$useCachedChildren, createLeafComponent as $dbSRa$createLeafComponent } from \"@react-aria/collections\";\nimport { buildHeaderRows as $dbSRa$buildHeaderRows } from \"@react-stately/table\";\nimport { useTableColumnResizeState as $dbSRa$useTableColumnResizeState, useMultipleSelectionState as $dbSRa$useMultipleSelectionState, useTableState as $dbSRa$useTableState } from \"react-stately\";\nimport { useTable as $dbSRa$useTable, ListKeyboardDelegate as $dbSRa$ListKeyboardDelegate, useFocusRing as $dbSRa$useFocusRing, FocusScope as $dbSRa$FocusScope, mergeProps as $dbSRa$mergeProps, useTableRowGroup as $dbSRa$useTableRowGroup, useHover as $dbSRa$useHover, useTableHeaderRow as $dbSRa$useTableHeaderRow, useTableSelectAllCheckbox as $dbSRa$useTableSelectAllCheckbox, useTableColumnHeader as $dbSRa$useTableColumnHeader, useLocalizedStringFormatter as $dbSRa$useLocalizedStringFormatter, useTableColumnResize as $dbSRa$useTableColumnResize, useLocale as $dbSRa$useLocale, useTableRow as $dbSRa$useTableRow, useTableSelectionCheckbox as $dbSRa$useTableSelectionCheckbox, useVisuallyHidden as $dbSRa$useVisuallyHidden, useTableCell as $dbSRa$useTableCell } from \"react-aria\";\nimport { useObjectRef as $dbSRa$useObjectRef, useLayoutEffect as $dbSRa$useLayoutEffect, isScrollable as $dbSRa$isScrollable, useResizeObserver as $dbSRa$useResizeObserver, filterDOMProps as $dbSRa$filterDOMProps, mergeRefs as $dbSRa$mergeRefs } from \"@react-aria/utils\";\nimport $dbSRa$react, { createContext as $dbSRa$createContext, forwardRef as $dbSRa$forwardRef, useRef as $dbSRa$useRef, useState as $dbSRa$useState, useMemo as $dbSRa$useMemo, useContext as $dbSRa$useContext, useEffect as $dbSRa$useEffect, useCallback as $dbSRa$useCallback } from \"react\";\nimport $dbSRa$reactdom from \"react-dom\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nclass $1910c06f0ca9905e$var$TableCollection extends (0, $dbSRa$BaseCollection) {\n  addNode(node) {\n    super.addNode(node);\n    this.columnsDirty || (this.columnsDirty = node.type === 'column');\n    if (node.type === 'tableheader') this.head = node;\n    if (node.type === 'tablebody') this.body = node;\n  }\n  commit(firstKey, lastKey) {\n    let isSSR = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.updateColumns(isSSR);\n    super.commit(firstKey, lastKey, isSSR);\n    this.rows = [...this.getChildren(this.body.key)];\n  }\n  updateColumns(isSSR) {\n    if (!this.columnsDirty) return;\n    this.rowHeaderColumnKeys = new Set();\n    this.columns = [];\n    let columnKeyMap = new Map();\n    let visit = node => {\n      switch (node.type) {\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            node.index = this.columns.length;\n            this.columns.push(node);\n            if (node.props.isRowHeader) this.rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n      }\n      for (let child of this.getChildren(node.key)) visit(child);\n    };\n    for (let node of this.getChildren(this.head.key)) visit(node);\n    this.headerRows = (0, $dbSRa$buildHeaderRows)(columnKeyMap, this.columns);\n    this.columnsDirty = false;\n    if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) throw new Error('A table must have at least one Column with the isRowHeader prop set to true');\n  }\n  get columnCount() {\n    return this.columns.length;\n  }\n  *[Symbol.iterator]() {\n    // Wait until the collection is initialized.\n    if (this.head.key === -1) return;\n    yield this.head;\n    yield this.body;\n  }\n  get size() {\n    return this.rows.length;\n  }\n  getFirstKey() {\n    return this.body.firstChildKey;\n  }\n  getLastKey() {\n    return this.body.lastChildKey;\n  }\n  getKeyAfter(key) {\n    let node = this.getItem(key);\n    var _node_nextKey;\n    if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_nextKey = node.nextKey) !== null && _node_nextKey !== void 0 ? _node_nextKey : null;\n    return super.getKeyAfter(key);\n  }\n  getKeyBefore(key) {\n    var _this_getItem;\n    let node = this.getItem(key);\n    var _node_prevKey;\n    if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_prevKey = node.prevKey) !== null && _node_prevKey !== void 0 ? _node_prevKey : null;\n    let k = super.getKeyBefore(key);\n    if (k != null && ((_this_getItem = this.getItem(k)) === null || _this_getItem === void 0 ? void 0 : _this_getItem.type) === 'tablebody') return null;\n    return k;\n  }\n  getChildren(key) {\n    if (!this.getItem(key)) for (let row of this.headerRows) {\n      if (row.key === key) return row.childNodes;\n    }\n    return super.getChildren(key);\n  }\n  clone() {\n    let collection = super.clone();\n    collection.headerRows = this.headerRows;\n    collection.columns = this.columns;\n    collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    collection.head = this.head;\n    collection.body = this.body;\n    return collection;\n  }\n  getTextValue(key) {\n    let row = this.getItem(key);\n    if (!row) return '';\n    // If the row has a textValue, use that.\n    if (row.textValue) return row.textValue;\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    let text = [];\n    for (let cell of this.getChildren(key)) {\n      let column = this.columns[cell.index];\n      if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);\n      if (text.length === rowHeaderColumnKeys.size) break;\n    }\n    return text.join(' ');\n  }\n  constructor() {\n    super(...arguments), this.headerRows = [], this.columns = [], this.rows = [], this.rowHeaderColumnKeys = new Set(), this.head = new (0, $dbSRa$CollectionNode)('tableheader', -1), this.body = new (0, $dbSRa$CollectionNode)('tablebody', -2), this.columnsDirty = true;\n  }\n}\nconst $1910c06f0ca9905e$var$ResizableTableContainerContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$7063e69b8a954175 = /*#__PURE__*/(0, $dbSRa$forwardRef)(function ResizableTableContainer(props, ref) {\n  let containerRef = (0, $dbSRa$useObjectRef)(ref);\n  let tableRef = (0, $dbSRa$useRef)(null);\n  let scrollRef = (0, $dbSRa$useRef)(null);\n  let [width, setWidth] = (0, $dbSRa$useState)(0);\n  (0, $dbSRa$useLayoutEffect)(() => {\n    // Walk up the DOM from the Table to the ResizableTableContainer and stop\n    // when we reach the first scrollable element. This is what we'll measure\n    // to determine column widths (important due to width of scrollbars).\n    // This will usually be the ResizableTableContainer for native tables, and\n    // the Table itself for virtualized tables.\n    let table = tableRef.current;\n    while (table && table !== containerRef.current && !(0, $dbSRa$isScrollable)(table)) table = table.parentElement;\n    scrollRef.current = table;\n  }, [containerRef]);\n  (0, $dbSRa$useResizeObserver)({\n    ref: scrollRef,\n    box: 'border-box',\n    onResize() {\n      var _scrollRef_current;\n      var _scrollRef_current_clientWidth;\n      setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);\n    }\n  });\n  (0, $dbSRa$useLayoutEffect)(() => {\n    var _scrollRef_current;\n    var _scrollRef_current_clientWidth;\n    setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);\n  }, []);\n  let ctx = (0, $dbSRa$useMemo)(() => ({\n    tableRef: tableRef,\n    scrollRef: scrollRef,\n    tableWidth: width,\n    useTableColumnResizeState: $dbSRa$useTableColumnResizeState,\n    onResizeStart: props.onResizeStart,\n    onResize: props.onResize,\n    onResizeEnd: props.onResizeEnd\n  }), [tableRef, width, props.onResizeStart, props.onResize, props.onResizeEnd]);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", _objectSpread(_objectSpread({}, (0, $dbSRa$filterDOMProps)(props)), {}, {\n    ref: containerRef,\n    className: props.className || 'react-aria-ResizableTableContainer',\n    style: props.style,\n    onScroll: props.onScroll\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$ResizableTableContainerContext.Provider, {\n    value: ctx\n  }, props.children));\n});\nconst $1910c06f0ca9905e$export$93e4b0b2cc49b648 = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$38de1cb0526c21fb = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$a2680a798823803c = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$54ec01a60f47d33d = /*#__PURE__*/(0, $dbSRa$forwardRef)(function Table(props, ref) {\n  var _props_dragAndDropHooks;\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $1910c06f0ca9905e$export$93e4b0b2cc49b648);\n  // Separate selection state so we have access to it from collection components via useTableOptions.\n  let selectionState = (0, $dbSRa$useMultipleSelectionState)(props);\n  let {\n    selectionBehavior: selectionBehavior,\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection\n  } = selectionState;\n  let hasDragHooks = !!((_props_dragAndDropHooks = props.dragAndDropHooks) === null || _props_dragAndDropHooks === void 0 ? void 0 : _props_dragAndDropHooks.useDraggableCollectionState);\n  let ctx = (0, $dbSRa$useMemo)(() => ({\n    selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    allowsDragging: hasDragHooks\n  }), [selectionBehavior, selectionMode, disallowEmptySelection, hasDragHooks]);\n  let content = /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableOptionsContext.Provider, {\n    value: ctx\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), props));\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$CollectionBuilder), {\n    content: content,\n    createCollection: () => new $1910c06f0ca9905e$var$TableCollection()\n  }, collection => /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableInner, {\n    props: props,\n    forwardedRef: ref,\n    selectionState: selectionState,\n    collection: collection\n  }));\n});\nfunction $1910c06f0ca9905e$var$TableInner(_ref) {\n  let {\n    props: props,\n    forwardedRef: ref,\n    selectionState: selectionState,\n    collection: collection\n  } = _ref;\n  let tableContainerContext = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ResizableTableContainerContext);\n  ref = (0, $dbSRa$useObjectRef)((0, $dbSRa$useMemo)(() => (0, $dbSRa$mergeRefs)(ref, tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef), [ref, tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef]));\n  let state = (0, $dbSRa$useTableState)(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection,\n    children: undefined,\n    UNSAFE_selectionState: selectionState\n  }));\n  let {\n    isVirtualized: isVirtualized,\n    layoutDelegate: layoutDelegate,\n    dropTargetDelegate: ctxDropTargetDelegate,\n    CollectionRoot: CollectionRoot\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    dragAndDropHooks: dragAndDropHooks\n  } = props;\n  let {\n    gridProps: gridProps\n  } = (0, $dbSRa$useTable)(_objectSpread(_objectSpread({}, props), {}, {\n    layoutDelegate: layoutDelegate,\n    isVirtualized: isVirtualized\n  }), state, ref);\n  let selectionManager = state.selectionManager;\n  let hasDragHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);\n  let hasDropHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);\n  let dragHooksProvided = (0, $dbSRa$useRef)(hasDragHooks);\n  let dropHooksProvided = (0, $dbSRa$useRef)(hasDropHooks);\n  (0, $dbSRa$useEffect)(() => {\n    if (dragHooksProvided.current !== hasDragHooks) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    if (dropHooksProvided.current !== hasDropHooks) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n  }, [hasDragHooks, hasDropHooks]);\n  let dragState = undefined;\n  let dropState = undefined;\n  let droppableCollection = undefined;\n  let isRootDropTarget = false;\n  let dragPreview = null;\n  let preview = (0, $dbSRa$useRef)(null);\n  if (hasDragHooks && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, ref);\n    let DragPreview = dragAndDropHooks.DragPreview;\n    dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/(0, $dbSRa$react).createElement(DragPreview, {\n      ref: preview\n    }, dragAndDropHooks.renderDragPreview) : null;\n  }\n  if (hasDropHooks && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager\n    });\n    let keyboardDelegate = new (0, $dbSRa$ListKeyboardDelegate)({\n      collection: collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref: ref,\n      layoutDelegate: layoutDelegate\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection.rows, ref);\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: keyboardDelegate,\n      dropTargetDelegate: dropTargetDelegate\n    }, dropState, ref);\n    isRootDropTarget = dropState.isDropTarget({\n      type: 'root'\n    });\n  }\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $dbSRa$useFocusRing)();\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-Table',\n    values: {\n      isDropTarget: isRootDropTarget,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      state: state\n    }\n  });\n  let isListDraggable = !!(hasDragHooks && !(dragState === null || dragState === void 0 ? void 0 : dragState.isDisabled));\n  let style = renderProps.style;\n  let layoutState = null;\n  if (tableContainerContext) {\n    layoutState = tableContainerContext.useTableColumnResizeState({\n      tableWidth: tableContainerContext.tableWidth\n    }, state);\n    if (!isVirtualized) style = _objectSpread(_objectSpread({}, style), {}, {\n      tableLayout: 'fixed',\n      width: 'fit-content'\n    });\n  }\n  let ElementType = $1910c06f0ca9905e$var$useElementType('table');\n  var _tableContainerContext_scrollRef;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[$1910c06f0ca9905e$export$38de1cb0526c21fb, state], [$1910c06f0ca9905e$export$a2680a798823803c, layoutState], [(0, $612b8eb6cb90e02d$export$d188a835a7bc5783), {\n      dragAndDropHooks: dragAndDropHooks,\n      dragState: dragState,\n      dropState: dropState\n    }], [(0, $612b8eb6cb90e02d$export$f55761759794cf55), {\n      render: $1910c06f0ca9905e$var$TableDropIndicatorWrapper\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$FocusScope), null, /*#__PURE__*/(0, $dbSRa$react).createElement(ElementType, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$filterDOMProps)(props)), renderProps), (0, $dbSRa$mergeProps)(gridProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps)), {}, {\n    style: style,\n    ref: ref,\n    slot: props.slot || undefined,\n    onScroll: props.onScroll,\n    \"data-allows-dragging\": isListDraggable || undefined,\n    \"data-drop-target\": isRootDropTarget || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionRoot, {\n    collection: collection,\n    scrollRef: (_tableContainerContext_scrollRef = tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.scrollRef) !== null && _tableContainerContext_scrollRef !== void 0 ? _tableContainerContext_scrollRef : ref,\n    persistedKeys: (0, $612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState)\n  }))), dragPreview);\n}\nfunction $1910c06f0ca9905e$var$useElementType(element) {\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  return isVirtualized ? 'div' : element;\n}\nconst $1910c06f0ca9905e$var$TableOptionsContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nfunction $1910c06f0ca9905e$export$fddc468cd8cb4db9() {\n  return (0, $dbSRa$useContext)($1910c06f0ca9905e$var$TableOptionsContext);\n}\nconst $1910c06f0ca9905e$export$f850895b287ef28e = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('tableheader', (props, ref) => {\n  let collection = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb).collection;\n  let headerRows = (0, $dbSRa$useCachedChildren)({\n    items: collection.headerRows,\n    children: (0, $dbSRa$useCallback)(item => {\n      switch (item.type) {\n        case 'headerrow':\n          return /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableHeaderRow, {\n            item: item\n          });\n        default:\n          throw new Error('Unsupported node type in TableHeader: ' + item.type);\n      }\n    }, [])\n  });\n  let THead = $1910c06f0ca9905e$var$useElementType('thead');\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $dbSRa$useTableRowGroup)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    onHoverStart: props.onHoverStart,\n    onHoverChange: props.onHoverChange,\n    onHoverEnd: props.onHoverEnd\n  });\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-TableHeader',\n    values: {\n      isHovered: isHovered\n    }\n  });\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(THead, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowGroupProps, hoverProps)), renderProps), {}, {\n    ref: ref,\n    \"data-hovered\": isHovered || undefined\n  }), headerRows);\n}, props => /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), {\n  dependencies: props.dependencies,\n  items: props.columns\n}, props.children));\nfunction $1910c06f0ca9905e$var$TableHeaderRow(_ref2) {\n  let {\n    item: item\n  } = _ref2;\n  let ref = (0, $dbSRa$useRef)(null);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized,\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    rowProps: rowProps\n  } = (0, $dbSRa$useTableHeaderRow)({\n    node: item,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $dbSRa$useTableSelectAllCheckbox)(state);\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, _objectSpread(_objectSpread({}, rowProps), {}, {\n    ref: ref\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$b085522c77523c51), {\n      slots: {\n        selection: checkboxProps\n      }\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: state.collection,\n    parent: item\n  })));\n}\nconst $1910c06f0ca9905e$export$816b5d811295e6bc = /*#__PURE__*/(0, $dbSRa$createLeafComponent)('column', (props, forwardedRef, column) => {\n  var _state_sortDescriptor, _state_sortDescriptor1;\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $dbSRa$useTableColumnHeader)({\n    node: column,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let layoutState = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$a2680a798823803c);\n  let isResizing = false;\n  if (layoutState) isResizing = layoutState.resizingColumn === column.key;else {\n    for (let prop in ['width', 'defaultWidth', 'minWidth', 'maxWidth']) if (prop in column.props) console.warn(\"The \".concat(prop, \" prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.\"));\n  }\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    isDisabled: !props.allowsSorting\n  });\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    id: undefined,\n    children: column.rendered,\n    defaultClassName: 'react-aria-Column',\n    values: {\n      isHovered: isHovered,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      allowsSorting: column.props.allowsSorting,\n      sortDirection: ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === column.key ? state.sortDescriptor.direction : undefined,\n      isResizing: isResizing,\n      startResize: () => {\n        if (layoutState) {\n          layoutState.startResize(column.key);\n          state.setKeyboardNavigationDisabled(true);\n        } else throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n      },\n      sort: direction => {\n        state.sort(column.key, direction);\n      }\n    }\n  }));\n  let style = renderProps.style;\n  if (layoutState) style = _objectSpread(_objectSpread({}, style), {}, {\n    width: layoutState.getColumnWidth(column.key)\n  });\n  let TH = $1910c06f0ca9905e$var$useElementType('th');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TH, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), columnHeaderProps, focusProps, hoverProps)), renderProps), {}, {\n    style: style,\n    colSpan: column.colspan,\n    ref: ref,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-resizing\": isResizing || undefined,\n    \"data-allows-sorting\": column.props.allowsSorting || undefined,\n    \"data-sort-direction\": ((_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.column) === column.key ? state.sortDescriptor.direction : undefined\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[$1910c06f0ca9905e$var$ColumnResizerContext, {\n      column: column,\n      triggerRef: ref\n    }], [(0, $7135fc7d473fd974$export$4feb769f8ddf26c5), (0, $7135fc7d473fd974$export$a164736487e3f0ae)]]\n  }, renderProps.children));\n});\nconst $1910c06f0ca9905e$var$ColumnResizerContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$ee689e97a7664bfd = /*#__PURE__*/(0, $dbSRa$forwardRef)(function ColumnResizer(props, ref) {\n  let layoutState = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$a2680a798823803c);\n  if (!layoutState) throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n  let stringFormatter = (0, $dbSRa$useLocalizedStringFormatter)((0, $parcel$interopDefault($dbSRa$intlStringsmodulejs)), 'react-aria-components');\n  let {\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd\n  } = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ResizableTableContainerContext);\n  let {\n    column: column,\n    triggerRef: triggerRef\n  } = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ColumnResizerContext);\n  let inputRef = (0, $dbSRa$useRef)(null);\n  let {\n    resizerProps: resizerProps,\n    inputProps: inputProps,\n    isResizing: isResizing\n  } = (0, $dbSRa$useTableColumnResize)({\n    column: column,\n    'aria-label': props['aria-label'] || stringFormatter.format('tableResizer'),\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd,\n    triggerRef: triggerRef\n  }, layoutState, inputRef);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)(props);\n  let isEResizable = layoutState.getColumnMinWidth(column.key) >= layoutState.getColumnWidth(column.key);\n  let isWResizable = layoutState.getColumnMaxWidth(column.key) <= layoutState.getColumnWidth(column.key);\n  let {\n    direction: direction\n  } = (0, $dbSRa$useLocale)();\n  let resizableDirection = 'both';\n  if (isEResizable) resizableDirection = direction === 'rtl' ? 'right' : 'left';else if (isWResizable) resizableDirection = direction === 'rtl' ? 'left' : 'right';else resizableDirection = 'both';\n  let objectRef = (0, $dbSRa$useObjectRef)(ref);\n  let [cursor, setCursor] = (0, $dbSRa$useState)('');\n  (0, $dbSRa$useEffect)(() => {\n    if (!objectRef.current) return;\n    let style = window.getComputedStyle(objectRef.current);\n    setCursor(style.cursor);\n  }, [objectRef, resizableDirection]);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    defaultClassName: 'react-aria-ColumnResizer',\n    values: {\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      isResizing: isResizing,\n      isHovered: isHovered,\n      resizableDirection: resizableDirection\n    }\n  }));\n  let [isMouseDown, setMouseDown] = (0, $dbSRa$useState)(false);\n  let onPointerDown = e => {\n    if (e.pointerType === 'mouse') setMouseDown(true);\n  };\n  if (!isResizing && isMouseDown) setMouseDown(false);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    ref: objectRef,\n    role: \"presentation\"\n  }, (0, $dbSRa$filterDOMProps)(props)), renderProps), (0, $dbSRa$mergeProps)(resizerProps, {\n    onPointerDown: onPointerDown\n  }, hoverProps)), {}, {\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-resizing\": isResizing || undefined,\n    \"data-resizable-direction\": resizableDirection\n  }), renderProps.children, /*#__PURE__*/(0, $dbSRa$react).createElement(\"input\", _objectSpread({\n    ref: inputRef\n  }, (0, $dbSRa$mergeProps)(inputProps, focusProps))), isResizing && isMouseDown && /*#__PURE__*/(0, $dbSRa$reactdom).createPortal(/*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      cursor: cursor\n    }\n  }), document.body));\n});\nconst $1910c06f0ca9905e$export$76ccd210b9029917 = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('tablebody', (props, ref) => {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let collection = state.collection;\n  let {\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let isDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState) && !(dropState === null || dropState === void 0 ? void 0 : dropState.isDisabled);\n  var _dropState_isDropTarget;\n  let isRootDropTarget = isDroppable && !!dropState && ((_dropState_isDropTarget = dropState.isDropTarget({\n    type: 'root'\n  })) !== null && _dropState_isDropTarget !== void 0 ? _dropState_isDropTarget : false);\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: collection.size === 0\n  };\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    id: undefined,\n    children: undefined,\n    defaultClassName: 'react-aria-TableBody',\n    values: renderValues\n  }));\n  let emptyState;\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  let numColumns = collection.columnCount;\n  if (collection.size === 0 && props.renderEmptyState && state) {\n    let rowProps = {};\n    let rowHeaderProps = {};\n    let style = {};\n    if (isVirtualized) {\n      rowProps['aria-rowindex'] = collection.headerRows.length + 1;\n      rowHeaderProps['aria-colspan'] = numColumns;\n      style = {\n        display: 'contents'\n      };\n    } else rowHeaderProps['colSpan'] = numColumns;\n    emptyState = /*#__PURE__*/(0, $dbSRa$react).createElement(TR, _objectSpread(_objectSpread({\n      role: \"row\"\n    }, rowProps), {}, {\n      style: style\n    }), /*#__PURE__*/(0, $dbSRa$react).createElement(TD, _objectSpread(_objectSpread({\n      role: \"rowheader\"\n    }, rowHeaderProps), {}, {\n      style: style\n    }), props.renderEmptyState(renderValues)));\n  }\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $dbSRa$useTableRowGroup)();\n  let TBody = $1910c06f0ca9905e$var$useElementType('tbody');\n  // TODO: TableBody doesn't support being the scrollable body of the table yet, to revisit if needed. Would need to\n  // call useLoadMore here and walk up the DOM to the nearest scrollable element to set scrollRef\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TBody, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowGroupProps)), renderProps), {}, {\n    ref: ref,\n    \"data-empty\": collection.size === 0 || undefined\n  }), isDroppable && /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$RootDropIndicator, null), /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: collection,\n    parent: collection.body,\n    renderDropIndicator: (0, $612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)\n  }), emptyState);\n});\nconst $1910c06f0ca9905e$export$b59bdbef9ce70de2 = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('item', (props, forwardedRef, item) => {\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dragState: dragState,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let {\n    isVirtualized: isVirtualized,\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let _ref3 = (0, $dbSRa$useTableRow)({\n      node: item,\n      shouldSelectOnPressUp: !!dragState,\n      isVirtualized: isVirtualized\n    }, state, ref),\n    {\n      rowProps: rowProps\n    } = _ref3,\n    states = _objectWithoutProperties(_ref3, _excluded);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = (0, $dbSRa$useFocusRing)({\n    within: true\n  });\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: props.onHoverStart,\n    onHoverChange: props.onHoverChange,\n    onHoverEnd: props.onHoverEnd\n  });\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $dbSRa$useTableSelectionCheckbox)({\n    key: item.key\n  }, state);\n  let draggableItem = undefined;\n  if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({\n    key: item.key,\n    hasDragButton: true\n  }, dragState);\n  let dropIndicator = undefined;\n  let dropIndicatorRef = (0, $dbSRa$useRef)(null);\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  if (dropState && dragAndDropHooks) dropIndicator = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'item',\n      key: item.key,\n      dropPosition: 'on'\n    }\n  }, dropState, dropIndicatorRef);\n  let dragButtonRef = (0, $dbSRa$useRef)(null);\n  (0, $dbSRa$useEffect)(() => {\n    if (dragState && !dragButtonRef.current) console.warn('Draggable items in a Table must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n    // eslint-disable-next-line\n  }, []);\n  let isDragging = dragState && dragState.isDragging(item.key);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {\n      children: _\n    } = props,\n    restProps = _objectWithoutProperties(props, _excluded2);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, restProps), {}, {\n    id: undefined,\n    defaultClassName: 'react-aria-Row',\n    values: _objectSpread(_objectSpread({}, states), {}, {\n      isHovered: isHovered,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      isDragging: isDragging,\n      isDropTarget: dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget,\n      isFocusVisibleWithin: isFocusVisibleWithin\n    })\n  }));\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$react).Fragment, null, dropIndicator && !dropIndicator.isHidden && /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    role: \"row\",\n    style: {\n      height: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", _objectSpread(_objectSpread(_objectSpread({\n    role: \"button\"\n  }, visuallyHiddenProps), dropIndicator.dropIndicatorProps), {}, {\n    ref: dropIndicatorRef\n  })))), /*#__PURE__*/(0, $dbSRa$react).createElement(TR, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowProps, focusProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps, focusWithinProps)), renderProps), {}, {\n    ref: ref,\n    \"data-disabled\": states.isDisabled || undefined,\n    \"data-selected\": states.isSelected || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": states.isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-pressed\": states.isPressed || undefined,\n    \"data-dragging\": isDragging || undefined,\n    \"data-drop-target\": (dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget) || undefined,\n    \"data-selection-mode\": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode,\n    \"data-focus-visible-within\": isFocusVisibleWithin || undefined\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$b085522c77523c51), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},\n        selection: checkboxProps\n      }\n    }], [(0, $d2b4bc8c273e7be6$export$24d547caef80ccd1), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},\n        drag: _objectSpread(_objectSpread({}, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps), {}, {\n          ref: dragButtonRef,\n          style: {\n            pointerEvents: 'none'\n          }\n        })\n      }\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: state.collection,\n    parent: item\n  }))));\n}, props => {\n  if (props.id == null && typeof props.children === 'function') throw new Error('No id detected for the Row element. The Row element requires a id to be provided to it when the cells are rendered dynamically.');\n  let dependencies = [props.value].concat(props.dependencies);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), {\n    dependencies: dependencies,\n    items: props.columns,\n    idScope: props.id\n  }, props.children);\n});\nconst $1910c06f0ca9905e$export$f6f0c3fe4ec306ea = /*#__PURE__*/(0, $dbSRa$createLeafComponent)('cell', (props, forwardedRef, cell) => {\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragState: dragState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  cell.column = state.collection.columns[cell.index];\n  let {\n    gridCellProps: gridCellProps,\n    isPressed: isPressed\n  } = (0, $dbSRa$useTableCell)({\n    node: cell,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({});\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    id: undefined,\n    defaultClassName: 'react-aria-Cell',\n    values: {\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      isPressed: isPressed,\n      isHovered: isHovered\n    }\n  }));\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TD, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), gridCellProps, focusProps, hoverProps)), renderProps), {}, {\n    ref: ref,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-pressed\": isPressed || undefined\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement((0, $7135fc7d473fd974$export$4feb769f8ddf26c5).Provider, {\n    value: (0, $7135fc7d473fd974$export$a164736487e3f0ae)\n  }, renderProps.children));\n});\nfunction $1910c06f0ca9905e$var$TableDropIndicatorWrapper(props, ref) {\n  ref = (0, $dbSRa$useObjectRef)(ref);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let buttonRef = (0, $dbSRa$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps,\n    isHidden: isHidden,\n    isDropTarget: isDropTarget\n  } = dragAndDropHooks.useDropIndicator(props, dropState, buttonRef);\n  if (isHidden) return null;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableDropIndicatorForwardRef, _objectSpread(_objectSpread({}, props), {}, {\n    dropIndicatorProps: dropIndicatorProps,\n    isDropTarget: isDropTarget,\n    buttonRef: buttonRef,\n    ref: ref\n  }));\n}\nfunction $1910c06f0ca9905e$var$TableDropIndicator(props, ref) {\n  let {\n      dropIndicatorProps: dropIndicatorProps,\n      isDropTarget: isDropTarget,\n      buttonRef: buttonRef\n    } = props,\n    otherProps = _objectWithoutProperties(props, _excluded3);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, otherProps), {}, {\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget: isDropTarget\n    }\n  }));\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, _objectSpread(_objectSpread(_objectSpread({}, (0, $dbSRa$filterDOMProps)(props)), renderProps), {}, {\n    role: \"row\",\n    ref: ref,\n    \"data-drop-target\": isDropTarget || undefined\n  }), /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", _objectSpread(_objectSpread(_objectSpread({}, visuallyHiddenProps), {}, {\n    role: \"button\"\n  }, dropIndicatorProps), {}, {\n    ref: buttonRef\n  })), renderProps.children));\n}\nconst $1910c06f0ca9905e$var$TableDropIndicatorForwardRef = /*#__PURE__*/(0, $dbSRa$forwardRef)($1910c06f0ca9905e$var$TableDropIndicator);\nfunction $1910c06f0ca9905e$var$RootDropIndicator() {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let ref = (0, $dbSRa$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps\n  } = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'root'\n    }\n  }, dropState, ref);\n  let isDropTarget = dropState.isDropTarget({\n    type: 'root'\n  });\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) return null;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    role: \"row\",\n    \"aria-hidden\": dropIndicatorProps['aria-hidden'],\n    style: {\n      height: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", _objectSpread(_objectSpread(_objectSpread({\n    role: \"button\"\n  }, visuallyHiddenProps), dropIndicatorProps), {}, {\n    ref: ref\n  }))));\n}\nconst $1910c06f0ca9905e$export$f241c45dcdfa4093 = (0, $dbSRa$createLeafComponent)('loader', function TableLoadingIndicator(props, ref, item) {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let numColumns = state.collection.columns.length;\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-TableLoadingIndicator',\n    values: null\n  }));\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  let rowProps = {};\n  let rowHeaderProps = {};\n  let style = {};\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = state.collection.headerRows.length + state.collection.size;\n    rowHeaderProps['aria-colspan'] = numColumns;\n    style = {\n      display: 'contents'\n    };\n  } else rowHeaderProps['colSpan'] = numColumns;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$react).Fragment, null, /*#__PURE__*/(0, $dbSRa$react).createElement(TR, _objectSpread(_objectSpread({\n    role: \"row\",\n    ref: ref\n  }, (0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowProps)), renderProps), /*#__PURE__*/(0, $dbSRa$react).createElement(TD, _objectSpread(_objectSpread({\n    role: \"rowheader\"\n  }, rowHeaderProps), {}, {\n    style: style\n  }), renderProps.children)));\n});\nexport { $1910c06f0ca9905e$export$7063e69b8a954175 as ResizableTableContainer, $1910c06f0ca9905e$export$93e4b0b2cc49b648 as TableContext, $1910c06f0ca9905e$export$38de1cb0526c21fb as TableStateContext, $1910c06f0ca9905e$export$a2680a798823803c as TableColumnResizeStateContext, $1910c06f0ca9905e$export$54ec01a60f47d33d as Table, $1910c06f0ca9905e$export$fddc468cd8cb4db9 as useTableOptions, $1910c06f0ca9905e$export$f850895b287ef28e as TableHeader, $1910c06f0ca9905e$export$816b5d811295e6bc as Column, $1910c06f0ca9905e$export$ee689e97a7664bfd as ColumnResizer, $1910c06f0ca9905e$export$76ccd210b9029917 as TableBody, $1910c06f0ca9905e$export$b59bdbef9ce70de2 as Row, $1910c06f0ca9905e$export$f6f0c3fe4ec306ea as Cell, $1910c06f0ca9905e$export$f241c45dcdfa4093 as UNSTABLE_TableLoadingIndicator };","map":{"version":3,"names":["$1910c06f0ca9905e$var$TableCollection","$dbSRa$BaseCollection","addNode","node","columnsDirty","type","head","body","commit","firstKey","lastKey","isSSR","arguments","length","undefined","updateColumns","rows","getChildren","key","rowHeaderColumnKeys","Set","columns","columnKeyMap","Map","visit","set","hasChildNodes","index","push","props","isRowHeader","add","child","headerRows","$dbSRa$buildHeaderRows","size","Error","columnCount","Symbol","iterator","getFirstKey","firstChildKey","getLastKey","lastChildKey","getKeyAfter","getItem","_node_nextKey","nextKey","getKeyBefore","_this_getItem","_node_prevKey","prevKey","k","row","childNodes","clone","collection","getTextValue","textValue","text","cell","column","has","join","$dbSRa$CollectionNode","$1910c06f0ca9905e$var$ResizableTableContainerContext","$dbSRa$createContext","$1910c06f0ca9905e$export$7063e69b8a954175","$dbSRa$forwardRef","ResizableTableContainer","ref","containerRef","$dbSRa$useObjectRef","tableRef","$dbSRa$useRef","scrollRef","width","setWidth","$dbSRa$useState","$dbSRa$useLayoutEffect","table","current","$dbSRa$isScrollable","parentElement","$dbSRa$useResizeObserver","box","onResize","_scrollRef_current","_scrollRef_current_clientWidth","clientWidth","ctx","$dbSRa$useMemo","tableWidth","$dbSRa$useTableColumnResizeState","onResizeStart","onResizeEnd","$dbSRa$react","createElement","_objectSpread","$dbSRa$filterDOMProps","className","style","onScroll","Provider","value","children","$1910c06f0ca9905e$export$93e4b0b2cc49b648","$1910c06f0ca9905e$export$38de1cb0526c21fb","$1910c06f0ca9905e$export$a2680a798823803c","$1910c06f0ca9905e$export$54ec01a60f47d33d","Table","_props_dragAndDropHooks","$64fa3d84918910a7$export$29f1550f4b0d4415","selectionState","$dbSRa$useMultipleSelectionState","selectionBehavior","selectionMode","disallowEmptySelection","hasDragHooks","dragAndDropHooks","useDraggableCollectionState","allowsDragging","content","$1910c06f0ca9905e$var$TableOptionsContext","$dbSRa$Collection","$dbSRa$CollectionBuilder","createCollection","$1910c06f0ca9905e$var$TableInner","forwardedRef","_ref","tableContainerContext","$dbSRa$useContext","$dbSRa$mergeRefs","state","$dbSRa$useTableState","UNSAFE_selectionState","isVirtualized","layoutDelegate","dropTargetDelegate","ctxDropTargetDelegate","CollectionRoot","$7135fc7d473fd974$export$4feb769f8ddf26c5","gridProps","$dbSRa$useTable","selectionManager","hasDropHooks","useDroppableCollectionState","dragHooksProvided","dropHooksProvided","$dbSRa$useEffect","console","warn","dragState","dropState","droppableCollection","isRootDropTarget","dragPreview","preview","renderDragPreview","useDraggableCollection","DragPreview","keyboardDelegate","$dbSRa$ListKeyboardDelegate","disabledKeys","disabledBehavior","ListDropTargetDelegate","useDroppableCollection","isDropTarget","focusProps","isFocused","isFocusVisible","$dbSRa$useFocusRing","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","defaultClassName","values","isListDraggable","isDisabled","layoutState","useTableColumnResizeState","tableLayout","ElementType","$1910c06f0ca9905e$var$useElementType","_tableContainerContext_scrollRef","$64fa3d84918910a7$export$2881499e37b75b9a","$612b8eb6cb90e02d$export$d188a835a7bc5783","$612b8eb6cb90e02d$export$f55761759794cf55","render","$1910c06f0ca9905e$var$TableDropIndicatorWrapper","$dbSRa$FocusScope","$dbSRa$mergeProps","collectionProps","slot","persistedKeys","$612b8eb6cb90e02d$export$d1e8e3fbb7461f6","element","$1910c06f0ca9905e$export$fddc468cd8cb4db9","$1910c06f0ca9905e$export$f850895b287ef28e","$dbSRa$createBranchComponent","$dbSRa$useCachedChildren","items","$dbSRa$useCallback","item","$1910c06f0ca9905e$var$TableHeaderRow","THead","rowGroupProps","$dbSRa$useTableRowGroup","hoverProps","isHovered","$dbSRa$useHover","onHoverStart","onHoverChange","onHoverEnd","dependencies","_ref2","CollectionBranch","rowProps","$dbSRa$useTableHeaderRow","checkboxProps","$dbSRa$useTableSelectAllCheckbox","TR","$4e85f108e88277b8$export$b085522c77523c51","slots","selection","parent","$1910c06f0ca9905e$export$816b5d811295e6bc","$dbSRa$createLeafComponent","_state_sortDescriptor","_state_sortDescriptor1","columnHeaderProps","$dbSRa$useTableColumnHeader","isResizing","resizingColumn","prop","concat","allowsSorting","id","rendered","sortDirection","sortDescriptor","direction","startResize","setKeyboardNavigationDisabled","sort","getColumnWidth","TH","colSpan","colspan","$1910c06f0ca9905e$var$ColumnResizerContext","triggerRef","$7135fc7d473fd974$export$a164736487e3f0ae","$1910c06f0ca9905e$export$ee689e97a7664bfd","ColumnResizer","stringFormatter","$dbSRa$useLocalizedStringFormatter","$parcel$interopDefault","$dbSRa$intlStringsmodulejs","inputRef","resizerProps","inputProps","$dbSRa$useTableColumnResize","format","isEResizable","getColumnMinWidth","isWResizable","getColumnMaxWidth","$dbSRa$useLocale","resizableDirection","objectRef","cursor","setCursor","window","getComputedStyle","isMouseDown","setMouseDown","onPointerDown","e","pointerType","role","$dbSRa$reactdom","createPortal","position","top","left","bottom","right","document","$1910c06f0ca9905e$export$76ccd210b9029917","isDroppable","_dropState_isDropTarget","renderValues","isEmpty","emptyState","TD","numColumns","renderEmptyState","rowHeaderProps","display","TBody","$1910c06f0ca9905e$var$RootDropIndicator","renderDropIndicator","$612b8eb6cb90e02d$export$971707d8a129a1f7","$1910c06f0ca9905e$export$b59bdbef9ce70de2","_ref3","$dbSRa$useTableRow","shouldSelectOnPressUp","states","_objectWithoutProperties","_excluded","isFocusVisibleWithin","focusWithinProps","within","allowsSelection","hasAction","$dbSRa$useTableSelectionCheckbox","draggableItem","useDraggableItem","hasDragButton","dropIndicator","dropIndicatorRef","visuallyHiddenProps","$dbSRa$useVisuallyHidden","useDropIndicator","target","dropPosition","dragButtonRef","isDragging","_","restProps","_excluded2","Fragment","isHidden","height","padding","dropIndicatorProps","dragProps","isSelected","isPressed","$64fa3d84918910a7$export$c62b8e45d58ddad9","$d2b4bc8c273e7be6$export$24d547caef80ccd1","drag","dragButtonProps","pointerEvents","idScope","$1910c06f0ca9905e$export$f6f0c3fe4ec306ea","gridCellProps","$dbSRa$useTableCell","buttonRef","$1910c06f0ca9905e$var$TableDropIndicatorForwardRef","$1910c06f0ca9905e$var$TableDropIndicator","otherProps","_excluded3","$1910c06f0ca9905e$export$f241c45dcdfa4093","TableLoadingIndicator"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\react-aria-components\\dist\\packages\\react-aria-components\\src\\Table.tsx"],"sourcesContent":["import {AriaLabelingProps, HoverEvents, Key, LinkDOMProps, RefObject} from '@react-types/shared';\nimport {BaseCollection, Collection, CollectionBuilder, CollectionNode, createBranchComponent, createLeafComponent, useCachedChildren} from '@react-aria/collections';\nimport {buildHeaderRows, TableColumnResizeState} from '@react-stately/table';\nimport {ButtonContext} from './Button';\nimport {CheckboxContext} from './RSPContexts';\nimport {CollectionProps, CollectionRendererContext, DefaultCollectionRenderer, ItemRenderProps} from './Collection';\nimport {ColumnSize, ColumnStaticSize, TableCollection as ITableCollection, TableProps as SharedTableProps} from '@react-types/table';\nimport {ContextValue, DEFAULT_SLOT, DOMProps, Provider, RenderProps, ScrollableProps, SlotProps, StyleProps, StyleRenderProps, useContextProps, useRenderProps} from './utils';\nimport {DisabledBehavior, DraggableCollectionState, DroppableCollectionState, MultipleSelectionState, Node, SelectionBehavior, SelectionMode, SortDirection, TableState, useMultipleSelectionState, useTableColumnResizeState, useTableState} from 'react-stately';\nimport {DragAndDropContext, DropIndicatorContext, DropIndicatorProps, useDndPersistedKeys, useRenderDropIndicator} from './DragAndDrop';\nimport {DragAndDropHooks} from './useDragAndDrop';\nimport {DraggableItemResult, DragPreviewRenderer, DropIndicatorAria, DroppableCollectionResult, FocusScope, ListKeyboardDelegate, mergeProps, useFocusRing, useHover, useLocale, useLocalizedStringFormatter, useTable, useTableCell, useTableColumnHeader, useTableColumnResize, useTableHeaderRow, useTableRow, useTableRowGroup, useTableSelectAllCheckbox, useTableSelectionCheckbox, useVisuallyHidden} from 'react-aria';\nimport {filterDOMProps, isScrollable, mergeRefs, useLayoutEffect, useObjectRef, useResizeObserver} from '@react-aria/utils';\nimport {GridNode} from '@react-types/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {createContext, ForwardedRef, forwardRef, JSX, ReactElement, ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass TableCollection<T> extends BaseCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[] = [];\n  columns: GridNode<T>[] = [];\n  rows: GridNode<T>[] = [];\n  rowHeaderColumnKeys: Set<Key> = new Set();\n  head: CollectionNode<T> = new CollectionNode('tableheader', -1);\n  body: CollectionNode<T> = new CollectionNode('tablebody', -2);\n  columnsDirty = true;\n\n  addNode(node: CollectionNode<T>) {\n    super.addNode(node);\n\n    this.columnsDirty ||= node.type === 'column';\n    if (node.type === 'tableheader') {\n      this.head = node;\n    }\n\n    if (node.type === 'tablebody') {\n      this.body = node;\n    }\n  }\n\n  commit(firstKey: Key, lastKey: Key, isSSR = false) {\n    this.updateColumns(isSSR);\n    super.commit(firstKey, lastKey, isSSR);\n    this.rows = [...this.getChildren(this.body.key)];\n  }\n\n  private updateColumns(isSSR: boolean) {\n    if (!this.columnsDirty) {\n      return;\n    }\n\n    this.rowHeaderColumnKeys = new Set();\n    this.columns = [];\n\n    let columnKeyMap = new Map();\n    let visit = (node: Node<T>) => {\n      switch (node.type) {\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            node.index = this.columns.length;\n            this.columns.push(node);\n\n            if (node.props.isRowHeader) {\n              this.rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n      }\n      for (let child of this.getChildren(node.key)) {\n        visit(child);\n      }\n    };\n\n    for (let node of this.getChildren(this.head.key)) {\n      visit(node);\n    }\n\n    this.headerRows = buildHeaderRows(columnKeyMap, this.columns);\n    this.columnsDirty = false;\n    if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) {\n      throw new Error('A table must have at least one Column with the isRowHeader prop set to true');\n    }\n  }\n\n  get columnCount() {\n    return this.columns.length;\n  }\n\n  *[Symbol.iterator]() {\n    // Wait until the collection is initialized.\n    if (this.head.key === -1) {\n      return;\n    }\n    yield this.head;\n    yield this.body;\n  }\n\n  get size() {\n    return this.rows.length;\n  }\n\n  getFirstKey() {\n    return this.body.firstChildKey;\n  }\n\n  getLastKey() {\n    return this.body.lastChildKey;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.nextKey ?? null;\n    }\n\n    return super.getKeyAfter(key);\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.prevKey ?? null;\n    }\n\n    let k = super.getKeyBefore(key);\n    if (k != null && this.getItem(k)?.type === 'tablebody') {\n      return null;\n    }\n\n    return k;\n  }\n\n  getChildren(key: Key): Iterable<Node<T>> {\n    if (!this.getItem(key)) {\n      for (let row of this.headerRows) {\n        if (row.key === key) {\n          return row.childNodes;\n        }\n      }\n    }\n\n    return super.getChildren(key);\n  }\n\n  clone() {\n    let collection = super.clone();\n    collection.headerRows = this.headerRows;\n    collection.columns = this.columns;\n    collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    collection.head = this.head;\n    collection.body = this.body;\n    return collection;\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    let text: string[] = [];\n    for (let cell of this.getChildren(key)) {\n      let column = this.columns[cell.index!];\n      if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n        text.push(cell.textValue);\n      }\n\n      if (text.length === rowHeaderColumnKeys.size) {\n        break;\n      }\n    }\n\n    return text.join(' ');\n  }\n}\n\ninterface ResizableTableContainerContextValue {\n  tableWidth: number,\n  tableRef: RefObject<HTMLTableElement | null>,\n  scrollRef: RefObject<HTMLElement | null>,\n  // Dependency inject useTableColumnResizeState so it doesn't affect bundle size unless you're using ResizableTableContainer.\n  useTableColumnResizeState: typeof useTableColumnResizeState,\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nconst ResizableTableContainerContext = createContext<ResizableTableContainerContextValue | null>(null);\n\nexport interface ResizableTableContainerProps extends DOMProps, ScrollableProps<HTMLDivElement> {\n  /**\n   * Handler that is called when a user starts a column resize.\n   */\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called when a user performs a column resize.\n   * Can be used with the width property on columns to put the column widths into\n   * a controlled state.\n   */\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called after a user performs a column resize.\n   * Can be used to store the widths of columns for another future session.\n   */\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nexport const ResizableTableContainer = forwardRef(function ResizableTableContainer(props: ResizableTableContainerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let containerRef = useObjectRef(ref);\n  let tableRef = useRef<HTMLTableElement>(null);\n  let scrollRef = useRef<HTMLElement | null>(null);\n  let [width, setWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    // Walk up the DOM from the Table to the ResizableTableContainer and stop\n    // when we reach the first scrollable element. This is what we'll measure\n    // to determine column widths (important due to width of scrollbars).\n    // This will usually be the ResizableTableContainer for native tables, and\n    // the Table itself for virtualized tables.\n    let table = tableRef.current as HTMLElement | null;\n    while (table && table !== containerRef.current && !isScrollable(table)) {\n      table = table.parentElement;\n    }\n    scrollRef.current = table;\n  }, [containerRef]);\n\n  useResizeObserver({\n    ref: scrollRef,\n    box: 'border-box',\n    onResize() {\n      setWidth(scrollRef.current?.clientWidth ?? 0);\n    }\n  });\n\n  useLayoutEffect(() => {\n    setWidth(scrollRef.current?.clientWidth ?? 0);\n  }, []);\n\n  let ctx = useMemo(() => ({\n    tableRef,\n    scrollRef,\n    tableWidth: width,\n    useTableColumnResizeState,\n    onResizeStart: props.onResizeStart,\n    onResize: props.onResize,\n    onResizeEnd: props.onResizeEnd\n  }), [tableRef, width, props.onResizeStart, props.onResize, props.onResizeEnd]);\n\n  return (\n    <div\n      {...filterDOMProps(props as any)}\n      ref={containerRef}\n      className={props.className || 'react-aria-ResizableTableContainer'}\n      style={props.style}\n      onScroll={props.onScroll}>\n      <ResizableTableContainerContext.Provider value={ctx}>\n        {props.children}\n      </ResizableTableContainerContext.Provider>\n    </div>\n  );\n});\n\nexport const TableContext = createContext<ContextValue<TableProps, HTMLTableElement>>(null);\nexport const TableStateContext = createContext<TableState<any> | null>(null);\nexport const TableColumnResizeStateContext = createContext<TableColumnResizeState<unknown> | null>(null);\n\nexport interface TableRenderProps {\n  /**\n   * Whether the table is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the table is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * State of the table.\n   */\n  state: TableState<unknown>\n}\n\nexport interface TableProps extends Omit<SharedTableProps<any>, 'children'>, StyleRenderProps<TableRenderProps>, SlotProps, AriaLabelingProps, ScrollableProps<HTMLTableElement> {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: ReactNode,\n  /**\n   * How multiple selection should behave in the collection.\n   * @default \"toggle\"\n   */\n  selectionBehavior?: SelectionBehavior,\n  /**\n   * Whether `disabledKeys` applies to all interactions, or only selection.\n   * @default \"selection\"\n   */\n  disabledBehavior?: DisabledBehavior,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the Table. */\n  dragAndDropHooks?: DragAndDropHooks\n}\n\n/**\n * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,\n * and optionally supports row selection and sorting.\n */\nexport const Table = forwardRef(function Table(props: TableProps, ref: ForwardedRef<HTMLTableElement>) {\n  [props, ref] = useContextProps(props, ref, TableContext);\n\n  // Separate selection state so we have access to it from collection components via useTableOptions.\n  let selectionState = useMultipleSelectionState(props);\n  let {selectionBehavior, selectionMode, disallowEmptySelection} = selectionState;\n  let hasDragHooks = !!props.dragAndDropHooks?.useDraggableCollectionState;\n  let ctx = useMemo(() => ({\n    selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,\n    selectionMode,\n    disallowEmptySelection,\n    allowsDragging: hasDragHooks\n  }), [selectionBehavior, selectionMode, disallowEmptySelection, hasDragHooks]);\n\n  let content = (\n    <TableOptionsContext.Provider value={ctx}>\n      <Collection {...props} />\n    </TableOptionsContext.Provider>\n  );\n\n  return (\n    <CollectionBuilder content={content} createCollection={() => new TableCollection<any>()}>\n      {collection => <TableInner props={props} forwardedRef={ref} selectionState={selectionState} collection={collection} />}\n    </CollectionBuilder>\n  );\n});\n\ninterface TableInnerProps {\n  props: TableProps,\n  forwardedRef: ForwardedRef<HTMLTableElement>,\n  selectionState: MultipleSelectionState,\n  collection: ITableCollection<Node<object>>\n}\n\n\nfunction TableInner({props, forwardedRef: ref, selectionState, collection}: TableInnerProps) {\n  let tableContainerContext = useContext(ResizableTableContainerContext);\n  ref = useObjectRef(useMemo(() => mergeRefs(ref, tableContainerContext?.tableRef), [ref, tableContainerContext?.tableRef]));\n  let state = useTableState({\n    ...props,\n    collection,\n    children: undefined,\n    UNSAFE_selectionState: selectionState\n  });\n\n  let {isVirtualized, layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate, CollectionRoot} = useContext(CollectionRendererContext);\n  let {dragAndDropHooks} = props;\n  let {gridProps} = useTable({\n    ...props,\n    layoutDelegate,\n    isVirtualized\n  }, state, ref);\n  let selectionManager = state.selectionManager;\n  let hasDragHooks = !!dragAndDropHooks?.useDraggableCollectionState;\n  let hasDropHooks = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(hasDragHooks);\n  let dropHooksProvided = useRef(hasDropHooks);\n  useEffect(() => {\n    if (dragHooksProvided.current !== hasDragHooks) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== hasDropHooks) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [hasDragHooks, hasDropHooks]);\n\n  let dragState: DraggableCollectionState | undefined = undefined;\n  let dropState: DroppableCollectionState | undefined = undefined;\n  let droppableCollection: DroppableCollectionResult | undefined = undefined;\n  let isRootDropTarget = false;\n  let dragPreview: JSX.Element | null = null;\n  let preview = useRef<DragPreviewRenderer>(null);\n\n  if (hasDragHooks && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState!({\n      collection,\n      selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection!({}, dragState, ref);\n\n    let DragPreview = dragAndDropHooks.DragPreview!;\n    dragPreview = dragAndDropHooks.renderDragPreview\n      ? <DragPreview ref={preview}>{dragAndDropHooks.renderDragPreview}</DragPreview>\n      : null;\n  }\n\n  if (hasDropHooks && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState!({\n      collection,\n      selectionManager\n    });\n\n    let keyboardDelegate = new ListKeyboardDelegate({\n      collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref,\n      layoutDelegate\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection.rows, ref);\n    droppableCollection = dragAndDropHooks.useDroppableCollection!({\n      keyboardDelegate,\n      dropTargetDelegate\n    }, dropState, ref);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-Table',\n    values: {\n      isDropTarget: isRootDropTarget,\n      isFocused,\n      isFocusVisible,\n      state\n    }\n  });\n\n  let isListDraggable = !!(hasDragHooks && !dragState?.isDisabled);\n\n  let style = renderProps.style;\n  let layoutState: TableColumnResizeState<unknown> | null = null;\n  if (tableContainerContext) {\n    layoutState = tableContainerContext.useTableColumnResizeState({\n      tableWidth: tableContainerContext.tableWidth\n    }, state);\n    if (!isVirtualized) {\n      style = {\n        ...style,\n        tableLayout: 'fixed',\n        width: 'fit-content'\n      };\n    }\n  }\n\n  let ElementType = useElementType('table');\n\n  return (\n    <Provider\n      values={[\n        [TableStateContext, state],\n        [TableColumnResizeStateContext, layoutState],\n        [DragAndDropContext, {dragAndDropHooks, dragState, dropState}],\n        [DropIndicatorContext, {render: TableDropIndicatorWrapper}]\n      ]}>\n      <FocusScope>\n        <ElementType\n          {...filterDOMProps(props)}\n          {...renderProps}\n          {...mergeProps(gridProps, focusProps, droppableCollection?.collectionProps)}\n          style={style}\n          ref={ref}\n          slot={props.slot || undefined}\n          onScroll={props.onScroll}\n          data-allows-dragging={isListDraggable || undefined}\n          data-drop-target={isRootDropTarget || undefined}\n          data-focused={isFocused || undefined}\n          data-focus-visible={isFocusVisible || undefined}>\n          <CollectionRoot\n            collection={collection}\n            scrollRef={tableContainerContext?.scrollRef ?? ref}\n            persistedKeys={useDndPersistedKeys(selectionManager, dragAndDropHooks, dropState)} />\n        </ElementType>\n      </FocusScope>\n      {dragPreview}\n    </Provider>\n  );\n}\n\nfunction useElementType<E extends keyof JSX.IntrinsicElements>(element: E): E | 'div' {\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  return isVirtualized ? 'div' : element;\n}\n\nexport interface TableOptionsContextValue {\n  /** The type of selection that is allowed in the table. */\n  selectionMode: SelectionMode,\n  /** The selection behavior for the table. If selectionMode is `\"none\"`, this will be `null`. */\n  selectionBehavior: SelectionBehavior | null,\n  /** Whether the table allows empty selection. */\n  disallowEmptySelection: boolean,\n  /** Whether the table allows rows to be dragged. */\n  allowsDragging: boolean\n}\n\nconst TableOptionsContext = createContext<TableOptionsContextValue | null>(null);\n\n/**\n * Returns options from the parent `<Table>` component.\n */\nexport function useTableOptions(): TableOptionsContextValue {\n  return useContext(TableOptionsContext)!;\n}\n\nexport interface TableHeaderRenderProps {\n  /**\n   * Whether the table header is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface TableHeaderProps<T> extends StyleRenderProps<TableHeaderRenderProps>, HoverEvents {\n  /** A list of table columns. */\n  columns?: T[],\n  /** A list of `Column(s)` or a function. If the latter, a list of columns must be provided using the `columns` prop. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** Values that should invalidate the column cache when using dynamic collections. */\n  dependencies?: any[]\n}\n\n/**\n * A header within a `<Table>`, containing the table columns.\n */\nexport const TableHeader =  /*#__PURE__*/ createBranchComponent(\n  'tableheader',\n  <T extends object>(props: TableHeaderProps<T>, ref: ForwardedRef<HTMLTableSectionElement>) => {\n    let collection = useContext(TableStateContext)!.collection as TableCollection<unknown>;\n    let headerRows = useCachedChildren({\n      items: collection.headerRows,\n      children: useCallback((item: Node<unknown>) => {\n        switch (item.type) {\n          case 'headerrow':\n            return <TableHeaderRow item={item} />;\n          default:\n            throw new Error('Unsupported node type in TableHeader: ' + item.type);\n        }\n      }, [])\n    });\n\n    let THead = useElementType('thead');\n    let {rowGroupProps} = useTableRowGroup();\n    let {hoverProps, isHovered} = useHover({\n      onHoverStart: props.onHoverStart,\n      onHoverChange: props.onHoverChange,\n      onHoverEnd: props.onHoverEnd\n    });\n\n    let renderProps = useRenderProps({\n      className: props.className,\n      style: props.style,\n      defaultClassName: 'react-aria-TableHeader',\n      values: {\n        isHovered\n      }\n    });\n\n    return (\n      <THead\n        {...mergeProps(filterDOMProps(props as any), rowGroupProps, hoverProps)}\n        {...renderProps}\n        ref={ref}\n        data-hovered={isHovered || undefined}>\n        {headerRows}\n      </THead>\n    );\n  },\n  props => (\n    <Collection dependencies={props.dependencies} items={props.columns}>\n      {props.children}\n    </Collection>\n  )\n);\n\nfunction TableHeaderRow({item}: {item: GridNode<any>}) {\n  let ref = useRef<HTMLTableRowElement>(null);\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized, CollectionBranch} = useContext(CollectionRendererContext);\n  let {rowProps} = useTableHeaderRow({node: item, isVirtualized}, state, ref);\n  let {checkboxProps} = useTableSelectAllCheckbox(state);\n  let TR = useElementType('tr');\n\n  return (\n    <TR {...rowProps} ref={ref}>\n      <Provider\n        values={[\n          [CheckboxContext, {\n            slots: {\n              selection: checkboxProps\n            }\n          }]\n        ]}>\n        <CollectionBranch collection={state.collection} parent={item} />\n      </Provider>\n    </TR>\n  );\n}\n\nexport interface ColumnRenderProps {\n  /**\n   * Whether the item is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the item is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the item is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the column allows sorting.\n   * @selector [data-allows-sorting]\n   */\n  allowsSorting: boolean,\n  /**\n   * The current sort direction.\n   * @selector [data-sort-direction=\"ascending | descending\"]\n   */\n  sortDirection: SortDirection | undefined,\n  /**\n   * Whether the column is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * Triggers sorting for this column in the given direction.\n   */\n  sort(direction: SortDirection): void,\n  /**\n   * Starts column resizing if the table is contained in a `<ResizableTableContainer>` element.\n   */\n  startResize(): void\n}\n\nexport interface ColumnProps extends RenderProps<ColumnRenderProps> {\n  /** The unique id of the column. */\n  id?: Key,\n  /** Whether the column allows sorting. */\n  allowsSorting?: boolean,\n  /** Whether a column is a [row header](https://www.w3.org/TR/wai-aria-1.1/#rowheader) and should be announced by assistive technology during row navigation. */\n  isRowHeader?: boolean,\n  /** A string representation of the column's contents, used for accessibility announcements. */\n  textValue?: string,\n  /** The width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  width?: ColumnSize | null,\n  /** The default width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  defaultWidth?: ColumnSize | null,\n  /** The minimum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  minWidth?: ColumnStaticSize | null,\n  /** The maximum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  maxWidth?: ColumnStaticSize | null\n}\n\n/**\n * A column within a `<Table>`.\n */\nexport const Column = /*#__PURE__*/ createLeafComponent('column', (props: ColumnProps, forwardedRef: ForwardedRef<HTMLTableCellElement>, column: GridNode<unknown>) => {\n  let ref = useObjectRef<HTMLTableHeaderCellElement>(forwardedRef);\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let {columnHeaderProps} = useTableColumnHeader(\n    {node: column, isVirtualized},\n    state,\n    ref\n  );\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n\n  let layoutState = useContext(TableColumnResizeStateContext);\n  let isResizing = false;\n  if (layoutState) {\n    isResizing = layoutState.resizingColumn === column.key;\n  } else {\n    for (let prop in ['width', 'defaultWidth', 'minWidth', 'maxWidth']) {\n      if (prop in column.props) {\n        console.warn(`The ${prop} prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.`);\n      }\n    }\n  }\n\n  let {hoverProps, isHovered} = useHover({isDisabled: !props.allowsSorting});\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: column.rendered,\n    defaultClassName: 'react-aria-Column',\n    values: {\n      isHovered,\n      isFocused,\n      isFocusVisible,\n      allowsSorting: column.props.allowsSorting,\n      sortDirection: state.sortDescriptor?.column === column.key\n        ? state.sortDescriptor.direction\n        : undefined,\n      isResizing,\n      startResize: () => {\n        if (layoutState) {\n          layoutState.startResize(column.key);\n          state.setKeyboardNavigationDisabled(true);\n        } else {\n          throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n        }\n      },\n      sort: (direction) => {\n        state.sort(column.key, direction);\n      }\n    }\n  });\n\n  let style = renderProps.style;\n  if (layoutState) {\n    style = {...style, width: layoutState.getColumnWidth(column.key)};\n  }\n\n  let TH = useElementType('th');\n\n  return (\n    <TH\n      {...mergeProps(filterDOMProps(props as any), columnHeaderProps, focusProps, hoverProps)}\n      {...renderProps}\n      style={style}\n      colSpan={column.colspan}\n      ref={ref}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-allows-sorting={column.props.allowsSorting || undefined}\n      data-sort-direction={state.sortDescriptor?.column === column.key ? state.sortDescriptor.direction : undefined}>\n      <Provider\n        values={[\n          [ColumnResizerContext, {column, triggerRef: ref}],\n          [CollectionRendererContext, DefaultCollectionRenderer]\n        ]}>\n        {renderProps.children}\n      </Provider>\n    </TH>\n  );\n});\n\nexport interface ColumnResizerRenderProps {\n  /**\n   * Whether the resizer is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the resizer is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the resizer is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the resizer is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * The direction that the column is currently resizable.\n   * @selector [data-resizable-direction=\"right | left | both\"]\n   */\n  resizableDirection: 'right' | 'left' | 'both'\n}\n\nexport interface ColumnResizerProps extends HoverEvents, RenderProps<ColumnResizerRenderProps> {\n  /** A custom accessibility label for the resizer. */\n  'aria-label'?: string\n}\n\ninterface ColumnResizerContextValue {\n  column: GridNode<unknown>,\n  triggerRef: RefObject<HTMLDivElement | null>\n}\n\nconst ColumnResizerContext = createContext<ColumnResizerContextValue | null>(null);\n\nexport const ColumnResizer = forwardRef(function ColumnResizer(props: ColumnResizerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let layoutState = useContext(TableColumnResizeStateContext);\n  if (!layoutState) {\n    throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n  }\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, 'react-aria-components');\n\n  let {onResizeStart, onResize, onResizeEnd} = useContext(ResizableTableContainerContext)!;\n  let {column, triggerRef} = useContext(ColumnResizerContext)!;\n  let inputRef = useRef<HTMLInputElement>(null);\n  let {resizerProps, inputProps, isResizing} = useTableColumnResize(\n    {\n      column,\n      'aria-label': props['aria-label'] || stringFormatter.format('tableResizer'),\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      triggerRef\n    },\n    layoutState,\n    inputRef\n  );\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let {hoverProps, isHovered} = useHover(props);\n\n  let isEResizable = layoutState.getColumnMinWidth(column.key) >= layoutState.getColumnWidth(column.key);\n  let isWResizable = layoutState.getColumnMaxWidth(column.key) <= layoutState.getColumnWidth(column.key);\n  let {direction} = useLocale();\n  let resizableDirection: ColumnResizerRenderProps['resizableDirection'] = 'both';\n  if (isEResizable) {\n    resizableDirection = direction === 'rtl' ? 'right' : 'left';\n  } else if (isWResizable) {\n    resizableDirection = direction === 'rtl' ? 'left' : 'right';\n  } else {\n    resizableDirection = 'both';\n  }\n\n  let objectRef = useObjectRef(ref);\n  let [cursor, setCursor] = useState('');\n  useEffect(() => {\n    if (!objectRef.current) {\n      return;\n    }\n    let style = window.getComputedStyle(objectRef.current);\n    setCursor(style.cursor);\n  }, [objectRef, resizableDirection]);\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-ColumnResizer',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isResizing,\n      isHovered,\n      resizableDirection\n    }\n  });\n\n  let [isMouseDown, setMouseDown] = useState(false);\n  let onPointerDown = (e: PointerEvent) => {\n    if (e.pointerType === 'mouse') {\n      setMouseDown(true);\n    }\n  };\n\n  if (!isResizing && isMouseDown) {\n    setMouseDown(false);\n  }\n\n  return (\n    <div\n      ref={objectRef}\n      role=\"presentation\"\n      {...filterDOMProps(props as any)}\n      {...renderProps}\n      {...mergeProps(resizerProps, {onPointerDown}, hoverProps)}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-resizable-direction={resizableDirection}>\n      {renderProps.children}\n      <input\n        ref={inputRef}\n        {...mergeProps(inputProps, focusProps)} />\n      {isResizing && isMouseDown && ReactDOM.createPortal(<div style={{position: 'fixed', top: 0, left: 0, bottom: 0, right: 0, cursor}} />, document.body)}\n    </div>\n  );\n});\n\nexport interface TableBodyRenderProps {\n  /**\n   * Whether the table body has no rows and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the Table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean\n}\n\nexport interface TableBodyProps<T> extends CollectionProps<T>, StyleRenderProps<TableBodyRenderProps> {\n  /** Provides content to display when there are no rows in the table. */\n  renderEmptyState?: (props: TableBodyRenderProps) => ReactNode\n}\n/**\n * The body of a `<Table>`, containing the table rows.\n */\nexport const TableBody = /*#__PURE__*/ createBranchComponent('tablebody', <T extends object>(props: TableBodyProps<T>, ref: ForwardedRef<HTMLTableSectionElement>) => {\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let collection = state.collection;\n  let {CollectionBranch} = useContext(CollectionRendererContext);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let isDroppable = !!dragAndDropHooks?.useDroppableCollectionState && !dropState?.isDisabled;\n  let isRootDropTarget = isDroppable && !!dropState && (dropState.isDropTarget({type: 'root'}) ?? false);\n\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: collection.size === 0\n  };\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: undefined,\n    defaultClassName: 'react-aria-TableBody',\n    values: renderValues\n  });\n\n  let emptyState;\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n  let numColumns = collection.columnCount;\n  if (collection.size === 0 && props.renderEmptyState && state) {\n    let rowProps = {};\n    let rowHeaderProps = {};\n    let style = {};\n    if (isVirtualized) {\n      rowProps['aria-rowindex'] = collection.headerRows.length + 1;\n      rowHeaderProps['aria-colspan'] = numColumns;\n      style = {display: 'contents'};\n    } else {\n      rowHeaderProps['colSpan'] = numColumns;\n    }\n\n    emptyState = (\n      <TR role=\"row\" {...rowProps} style={style}>\n        <TD role=\"rowheader\" {...rowHeaderProps} style={style}>\n          {props.renderEmptyState(renderValues)}\n        </TD>\n      </TR>\n    );\n  }\n\n  let {rowGroupProps} = useTableRowGroup();\n  let TBody = useElementType('tbody');\n\n  // TODO: TableBody doesn't support being the scrollable body of the table yet, to revisit if needed. Would need to\n  // call useLoadMore here and walk up the DOM to the nearest scrollable element to set scrollRef\n  return (\n    <TBody\n      {...mergeProps(filterDOMProps(props as any), rowGroupProps)}\n      {...renderProps}\n      ref={ref}\n      data-empty={collection.size === 0 || undefined}>\n      {isDroppable && <RootDropIndicator />}\n      <CollectionBranch\n        collection={collection}\n        parent={collection.body}\n        renderDropIndicator={useRenderDropIndicator(dragAndDropHooks, dropState)} />\n      {emptyState}\n    </TBody>\n  );\n});\n\nexport interface RowRenderProps extends ItemRenderProps {\n  /** Whether the row's children have keyboard focus. */\n  isFocusVisibleWithin: boolean\n}\n\nexport interface RowProps<T> extends StyleRenderProps<RowRenderProps>, LinkDOMProps, HoverEvents {\n  /** The unique id of the row. */\n  id?: Key,\n  /** A list of columns used when dynamically rendering cells. */\n  columns?: Iterable<T>,\n  /** The cells within the row. Supports static items or a function for dynamic rendering. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** The object value that this row represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** Values that should invalidate the cell cache when using dynamic collections. */\n  dependencies?: any[],\n  /** A string representation of the row's contents, used for features like typeahead. */\n  textValue?: string,\n  /** Whether the row is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\n/**\n * A row within a `<Table>`.\n */\nexport const Row = /*#__PURE__*/ createBranchComponent(\n  'item',\n  <T extends object>(props: RowProps<T>, forwardedRef: ForwardedRef<HTMLTableRowElement>, item: GridNode<T>) => {\n    let ref = useObjectRef<HTMLTableRowElement>(forwardedRef);\n    let state = useContext(TableStateContext)!;\n    let {dragAndDropHooks, dragState, dropState} = useContext(DragAndDropContext);\n    let {isVirtualized, CollectionBranch} = useContext(CollectionRendererContext);\n    let {rowProps, ...states} = useTableRow(\n      {\n        node: item,\n        shouldSelectOnPressUp: !!dragState,\n        isVirtualized\n      },\n      state,\n      ref\n    );\n    let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n    let {\n      isFocusVisible: isFocusVisibleWithin,\n      focusProps: focusWithinProps\n    } = useFocusRing({within: true});\n    let {hoverProps, isHovered} = useHover({\n      isDisabled: !states.allowsSelection && !states.hasAction,\n      onHoverStart: props.onHoverStart,\n      onHoverChange: props.onHoverChange,\n      onHoverEnd: props.onHoverEnd\n    });\n\n    let {checkboxProps} = useTableSelectionCheckbox(\n      {key: item.key},\n      state\n    );\n\n    let draggableItem: DraggableItemResult | undefined = undefined;\n    if (dragState && dragAndDropHooks) {\n      draggableItem = dragAndDropHooks.useDraggableItem!({key: item.key, hasDragButton: true}, dragState);\n    }\n\n    let dropIndicator: DropIndicatorAria | undefined = undefined;\n    let dropIndicatorRef = useRef<HTMLDivElement>(null);\n    let {visuallyHiddenProps} = useVisuallyHidden();\n    if (dropState && dragAndDropHooks) {\n      dropIndicator = dragAndDropHooks.useDropIndicator!({\n        target: {type: 'item', key: item.key, dropPosition: 'on'}\n      }, dropState, dropIndicatorRef);\n    }\n\n    let dragButtonRef = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n      if (dragState && !dragButtonRef.current) {\n        console.warn('Draggable items in a Table must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n      }\n    // eslint-disable-next-line\n    }, []);\n\n    let isDragging = dragState && dragState.isDragging(item.key);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let {children: _, ...restProps} = props;\n    let renderProps = useRenderProps({\n      ...restProps,\n      id: undefined,\n      defaultClassName: 'react-aria-Row',\n      values: {\n        ...states,\n        isHovered,\n        isFocused,\n        isFocusVisible,\n        selectionMode: state.selectionManager.selectionMode,\n        selectionBehavior: state.selectionManager.selectionBehavior,\n        isDragging,\n        isDropTarget: dropIndicator?.isDropTarget,\n        isFocusVisibleWithin\n      }\n    });\n\n    let TR = useElementType('tr');\n    let TD = useElementType('td');\n\n    return (\n      <>\n        {dropIndicator && !dropIndicator.isHidden && (\n          <TR role=\"row\" style={{height: 0}}>\n            <TD role=\"gridcell\" colSpan={state.collection.columnCount} style={{padding: 0}}>\n              <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator.dropIndicatorProps} ref={dropIndicatorRef} />\n            </TD>\n          </TR>\n        )}\n        <TR\n          {...mergeProps(filterDOMProps(props as any), rowProps, focusProps, hoverProps, draggableItem?.dragProps, focusWithinProps)}\n          {...renderProps}\n          ref={ref}\n          data-disabled={states.isDisabled || undefined}\n          data-selected={states.isSelected || undefined}\n          data-hovered={isHovered || undefined}\n          data-focused={states.isFocused || undefined}\n          data-focus-visible={isFocusVisible || undefined}\n          data-pressed={states.isPressed || undefined}\n          data-dragging={isDragging || undefined}\n          data-drop-target={dropIndicator?.isDropTarget || undefined}\n          data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}\n          data-focus-visible-within={isFocusVisibleWithin || undefined}>\n          <Provider\n            values={[\n              [CheckboxContext, {\n                slots: {\n                  [DEFAULT_SLOT]: {},\n                  selection: checkboxProps\n                }\n              }],\n              [ButtonContext, {\n                slots: {\n                  [DEFAULT_SLOT]: {},\n                  drag: {\n                    ...draggableItem?.dragButtonProps,\n                    ref: dragButtonRef,\n                    style: {\n                      pointerEvents: 'none'\n                    }\n                  }\n                }\n              }]\n            ]}>\n            <CollectionBranch collection={state.collection} parent={item} />\n          </Provider>\n        </TR>\n      </>\n    );\n  },\n  props => {\n    if (props.id == null && typeof props.children === 'function') {\n      throw new Error('No id detected for the Row element. The Row element requires a id to be provided to it when the cells are rendered dynamically.');\n    }\n\n    let dependencies = [props.value].concat(props.dependencies);\n    return (\n      <Collection dependencies={dependencies} items={props.columns} idScope={props.id}>\n        {props.children}\n      </Collection>\n    );\n  }\n);\n\nexport interface CellRenderProps {\n  /**\n   * Whether the cell is currently in a pressed state.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the cell is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the cell is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the cell is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface CellProps extends RenderProps<CellRenderProps> {\n  /** The unique id of the cell. */\n  id?: Key,\n  /** A string representation of the cell's contents, used for features like typeahead. */\n  textValue?: string\n}\n\n/**\n * A cell within a table row.\n */\nexport const Cell = /*#__PURE__*/ createLeafComponent('cell', (props: CellProps, forwardedRef: ForwardedRef<HTMLTableCellElement>, cell: GridNode<unknown>) => {\n  let ref = useObjectRef<HTMLTableCellElement>(forwardedRef);\n  let state = useContext(TableStateContext)!;\n  let {dragState} = useContext(DragAndDropContext);\n  let {isVirtualized} = useContext(CollectionRendererContext);\n\n  cell.column = state.collection.columns[cell.index];\n\n  let {gridCellProps, isPressed} = useTableCell({\n    node: cell,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized\n  }, state, ref);\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({});\n\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    defaultClassName: 'react-aria-Cell',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isPressed,\n      isHovered\n    }\n  });\n\n  let TD = useElementType('td');\n\n  return (\n    <TD\n      {...mergeProps(filterDOMProps(props as any), gridCellProps, focusProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-pressed={isPressed || undefined}>\n      <CollectionRendererContext.Provider value={DefaultCollectionRenderer}>\n        {renderProps.children}\n      </CollectionRendererContext.Provider>\n    </TD>\n  );\n});\n\nfunction TableDropIndicatorWrapper(props: DropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  ref = useObjectRef(ref);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext)!;\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps, isHidden, isDropTarget} = dragAndDropHooks!.useDropIndicator!(\n    props,\n    dropState!,\n    buttonRef\n  );\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <TableDropIndicatorForwardRef {...props} dropIndicatorProps={dropIndicatorProps} isDropTarget={isDropTarget} buttonRef={buttonRef} ref={ref} />\n  );\n}\n\ninterface TableDropIndicatorProps extends DropIndicatorProps {\n  dropIndicatorProps: React.HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean,\n  buttonRef: RefObject<HTMLDivElement | null>\n}\n\nfunction TableDropIndicator(props: TableDropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  let {\n    dropIndicatorProps,\n    isDropTarget,\n    buttonRef,\n    ...otherProps\n  } = props;\n\n  let state = useContext(TableStateContext)!;\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget\n    }\n  });\n\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n\n  return (\n    <TR\n      {...filterDOMProps(props as any)}\n      {...renderProps}\n      role=\"row\"\n      ref={ref as RefObject<HTMLTableRowElement | null>}\n      data-drop-target={isDropTarget || undefined}>\n      <TD\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div {...visuallyHiddenProps} role=\"button\" {...dropIndicatorProps} ref={buttonRef} />\n        {renderProps.children}\n      </TD>\n    </TR>\n  );\n}\n\nconst TableDropIndicatorForwardRef = forwardRef(TableDropIndicator);\n\nfunction RootDropIndicator() {\n  let state = useContext(TableStateContext)!;\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let ref = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps} = dragAndDropHooks!.useDropIndicator!({\n    target: {type: 'root'}\n  }, dropState!, ref);\n  let isDropTarget = dropState!.isDropTarget({type: 'root'});\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) {\n    return null;\n  }\n\n  return (\n    <TR\n      role=\"row\"\n      aria-hidden={dropIndicatorProps['aria-hidden']}\n      style={{height: 0}}>\n      <TD\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div role=\"button\" {...visuallyHiddenProps} {...dropIndicatorProps} ref={ref} />\n      </TD>\n    </TR>\n  );\n}\n\nexport interface TableLoadingIndicatorProps extends StyleProps {\n  children?: ReactNode\n}\n\nexport const UNSTABLE_TableLoadingIndicator = createLeafComponent('loader', function TableLoadingIndicator<T extends object>(props: TableLoadingIndicatorProps, ref: ForwardedRef<HTMLTableRowElement>, item: Node<T>) {\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let numColumns = state.collection.columns.length;\n\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-TableLoadingIndicator',\n    values: null\n  });\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n  let rowProps = {};\n  let rowHeaderProps = {};\n  let style = {};\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = state.collection.headerRows.length + state.collection.size ;\n    rowHeaderProps['aria-colspan'] = numColumns;\n    style = {display: 'contents'};\n  } else {\n    rowHeaderProps['colSpan'] = numColumns;\n  }\n\n  return (\n    <>\n      <TR\n        role=\"row\"\n        ref={ref}\n        {...mergeProps(filterDOMProps(props as any), rowProps)}\n        {...renderProps}>\n        <TD role=\"rowheader\" {...rowHeaderProps} style={style}>\n          {renderProps.children}\n        </TD>\n      </TR>\n    </>\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}