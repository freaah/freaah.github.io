{"ast":null,"code":"import { useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { ToggleGroupStateContext as $84b7d8702d4ff4a8$export$a8a71863db173133 } from \"./ToggleButtonGroup.mjs\";\nimport { useToggleButtonGroupItem as $jrJ9L$useToggleButtonGroupItem, useToggleButton as $jrJ9L$useToggleButton, useFocusRing as $jrJ9L$useFocusRing, useHover as $jrJ9L$useHover, mergeProps as $jrJ9L$mergeProps } from \"react-aria\";\nimport $jrJ9L$react, { createContext as $jrJ9L$createContext, forwardRef as $jrJ9L$forwardRef, useContext as $jrJ9L$useContext } from \"react\";\nimport { useToggleState as $jrJ9L$useToggleState } from \"react-stately\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $efde0372d7a700fe$export$43506d75ebd2e218 = /*#__PURE__*/(0, $jrJ9L$createContext)({});\nconst $efde0372d7a700fe$export$d2b052e7b4be1756 = /*#__PURE__*/(0, $jrJ9L$forwardRef)(function ToggleButton(props, ref) {\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $efde0372d7a700fe$export$43506d75ebd2e218);\n  let groupState = (0, $jrJ9L$useContext)((0, $84b7d8702d4ff4a8$export$a8a71863db173133));\n  let state = (0, $jrJ9L$useToggleState)(groupState && props.id != null ? {\n    isSelected: groupState.selectedKeys.has(props.id),\n    onChange(isSelected) {\n      groupState.setSelected(props.id, isSelected);\n    }\n  } : props);\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed,\n    isSelected: isSelected,\n    isDisabled: isDisabled\n  } = groupState && props.id != null ? (0, $jrJ9L$useToggleButtonGroupItem)({\n    ...props,\n    id: props.id\n  }, groupState, ref) : (0, $jrJ9L$useToggleButton)({\n    ...props,\n    id: props.id != null ? String(props.id) : undefined\n  }, state, ref);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $jrJ9L$useFocusRing)(props);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $jrJ9L$useHover)(props);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    values: {\n      isHovered: isHovered,\n      isPressed: isPressed,\n      isFocused: isFocused,\n      isSelected: state.isSelected,\n      isFocusVisible: isFocusVisible,\n      isDisabled: isDisabled,\n      state: state\n    },\n    defaultClassName: 'react-aria-ToggleButton'\n  });\n  return /*#__PURE__*/(0, $jrJ9L$react).createElement(\"button\", {\n    ...(0, $jrJ9L$mergeProps)(buttonProps, focusProps, hoverProps),\n    ...renderProps,\n    ref: ref,\n    slot: props.slot || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-disabled\": isDisabled || undefined,\n    \"data-pressed\": isPressed || undefined,\n    \"data-selected\": isSelected || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined\n  });\n});\nexport { $efde0372d7a700fe$export$43506d75ebd2e218 as ToggleButtonContext, $efde0372d7a700fe$export$d2b052e7b4be1756 as ToggleButton };","map":{"version":3,"names":["$efde0372d7a700fe$export$43506d75ebd2e218","$jrJ9L$createContext","$efde0372d7a700fe$export$d2b052e7b4be1756","$jrJ9L$forwardRef","ToggleButton","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","groupState","$jrJ9L$useContext","$84b7d8702d4ff4a8$export$a8a71863db173133","state","$jrJ9L$useToggleState","id","isSelected","selectedKeys","has","onChange","setSelected","buttonProps","isPressed","isDisabled","$jrJ9L$useToggleButtonGroupItem","$jrJ9L$useToggleButton","String","undefined","focusProps","isFocused","isFocusVisible","$jrJ9L$useFocusRing","hoverProps","isHovered","$jrJ9L$useHover","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","values","defaultClassName","$jrJ9L$react","createElement","$jrJ9L$mergeProps","slot"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\react-aria-components\\dist\\packages\\react-aria-components\\src\\ToggleButton.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleButtonProps, HoverEvents, mergeProps, useFocusRing, useHover, useToggleButton, useToggleButtonGroupItem} from 'react-aria';\nimport {ButtonRenderProps} from './Button';\nimport {ContextValue, RenderProps, SlotProps, useContextProps, useRenderProps} from './utils';\nimport {forwardRefType, Key} from '@react-types/shared';\nimport React, {createContext, ForwardedRef, forwardRef, useContext} from 'react';\nimport {ToggleGroupStateContext} from './ToggleButtonGroup';\nimport {ToggleState, useToggleState} from 'react-stately';\n\nexport interface ToggleButtonRenderProps extends Omit<ButtonRenderProps, 'isPending'> {\n  /**\n   * Whether the button is currently selected.\n   * @selector [data-selected]\n   */\n  isSelected: boolean,\n  /**\n   * State of the toggle button.\n   */\n  state: ToggleState\n}\n\nexport interface ToggleButtonProps extends Omit<AriaToggleButtonProps, 'children' | 'elementType' | 'id'>, HoverEvents, SlotProps, RenderProps<ToggleButtonRenderProps> {\n  /** When used in a ToggleButtonGroup, an identifier for the item in `selectedKeys`. When used standalone, a DOM id. */\n  id?: Key\n}\n\nexport const ToggleButtonContext = createContext<ContextValue<ToggleButtonProps, HTMLButtonElement>>({});\n\n/**\n * A toggle button allows a user to toggle a selection on or off, for example switching between two states or modes.\n */\nexport const ToggleButton = /*#__PURE__*/ (forwardRef as forwardRefType)(function ToggleButton(props: ToggleButtonProps, ref: ForwardedRef<HTMLButtonElement>) {\n  [props, ref] = useContextProps(props, ref, ToggleButtonContext);\n  let groupState = useContext(ToggleGroupStateContext);\n  let state = useToggleState(groupState && props.id != null ? {\n    isSelected: groupState.selectedKeys.has(props.id),\n    onChange(isSelected) {\n      groupState.setSelected(props.id!, isSelected);\n    }\n  } : props);\n\n  let {buttonProps, isPressed, isSelected, isDisabled} = groupState && props.id != null\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    ? useToggleButtonGroupItem({...props, id: props.id}, groupState, ref)\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    : useToggleButton({...props, id: props.id != null ? String(props.id) : undefined}, state, ref);\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing(props);\n  let {hoverProps, isHovered} = useHover(props);\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    values: {isHovered, isPressed, isFocused, isSelected: state.isSelected, isFocusVisible, isDisabled, state},\n    defaultClassName: 'react-aria-ToggleButton'\n  });\n\n  return (\n    <button\n      {...mergeProps(buttonProps, focusProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      data-focused={isFocused || undefined}\n      data-disabled={isDisabled || undefined}\n      data-pressed={isPressed || undefined}\n      data-selected={isSelected || undefined}\n      data-hovered={isHovered || undefined}\n      data-focus-visible={isFocusVisible || undefined} />\n  );\n});\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAqCO,MAAMA,yCAAA,gBAAsB,IAAAC,oBAAY,EAAsD,CAAC;AAK/F,MAAMC,yCAAA,GAA6B,aAAC,IAAAC,iBAAS,EAAqB,SAASC,aAAaC,KAAwB,EAAEC,GAAoC;EAC3J,CAACD,KAAA,EAAOC,GAAA,CAAI,GAAG,IAAAC,yCAAc,EAAEF,KAAA,EAAOC,GAAA,EAAKN,yCAAA;EAC3C,IAAIQ,UAAA,GAAa,IAAAC,iBAAS,GAAE,GAAAC,yCAAsB;EAClD,IAAIC,KAAA,GAAQ,IAAAC,qBAAa,EAAEJ,UAAA,IAAcH,KAAA,CAAMQ,EAAE,IAAI,OAAO;IAC1DC,UAAA,EAAYN,UAAA,CAAWO,YAAY,CAACC,GAAG,CAACX,KAAA,CAAMQ,EAAE;IAChDI,SAASH,UAAU;MACjBN,UAAA,CAAWU,WAAW,CAACb,KAAA,CAAMQ,EAAE,EAAGC,UAAA;IACpC;EACF,IAAIT,KAAA;EAEJ,IAAI;IAAAc,WAAA,EAACA,WAAW;IAAAC,SAAA,EAAEA,SAAS;IAAAN,UAAA,EAAEA,UAAU;IAAAO,UAAA,EAAEA;EAAU,CAAC,GAAGb,UAAA,IAAcH,KAAA,CAAMQ,EAAE,IAAI,OAE7E,IAAAS,+BAAuB,EAAE;IAAC,GAAGjB,KAAK;IAAEQ,EAAA,EAAIR,KAAA,CAAMQ;EAAE,GAAGL,UAAA,EAAYF,GAAA,IAE/D,IAAAiB,sBAAc,EAAE;IAAC,GAAGlB,KAAK;IAAEQ,EAAA,EAAIR,KAAA,CAAMQ,EAAE,IAAI,OAAOW,MAAA,CAAOnB,KAAA,CAAMQ,EAAE,IAAIY;EAAS,GAAGd,KAAA,EAAOL,GAAA;EAE5F,IAAI;IAAAoB,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA,SAAS;IAAAC,cAAA,EAAEA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAExB,KAAA;EAC3D,IAAI;IAAAyB,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,eAAO,EAAE3B,KAAA;EACvC,IAAI4B,WAAA,GAAc,IAAAC,uCAAa,EAAE;IAC/B,GAAG7B,KAAK;IACRQ,EAAA,EAAIY,SAAA;IACJU,MAAA,EAAQ;iBAACJ,SAAA;iBAAWX,SAAA;iBAAWO,SAAA;MAAWb,UAAA,EAAYH,KAAA,CAAMG,UAAU;sBAAEc,cAAA;kBAAgBP,UAAA;aAAYV;IAAK;IACzGyB,gBAAA,EAAkB;EACpB;EAEA,oBACE,IAAAC,YAAA,EAAAC,aAAA,CAAC;IACE,GAAG,IAAAC,iBAAS,EAAEpB,WAAA,EAAaO,UAAA,EAAYI,UAAA,CAAW;IAClD,GAAGG,WAAW;IACf3B,GAAA,EAAKA,GAAA;IACLkC,IAAA,EAAMnC,KAAA,CAAMmC,IAAI,IAAIf,SAAA;IACpB,gBAAcE,SAAA,IAAaF,SAAA;IAC3B,iBAAeJ,UAAA,IAAcI,SAAA;IAC7B,gBAAcL,SAAA,IAAaK,SAAA;IAC3B,iBAAeX,UAAA,IAAcW,SAAA;IAC7B,gBAAcM,SAAA,IAAaN,SAAA;IAC3B,sBAAoBG,cAAA,IAAkBH;;AAE5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}