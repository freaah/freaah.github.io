{"ast":null,"code":"import { Size as $uBoVA$Size } from \"@react-stately/virtualizer\";\nimport { useCallback as $uBoVA$useCallback } from \"react\";\nimport { useLayoutEffect as $uBoVA$useLayoutEffect } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $47736c1e63ba1c6d$export$1da781778207e0a2(options) {\n  let {\n    layoutInfo: layoutInfo,\n    virtualizer: virtualizer,\n    ref: ref\n  } = options;\n  let key = layoutInfo === null || layoutInfo === void 0 ? void 0 : layoutInfo.key;\n  let updateSize = (0, $uBoVA$useCallback)(() => {\n    if (key != null && ref.current) {\n      let size = $47736c1e63ba1c6d$var$getSize(ref.current);\n      virtualizer.updateItemSize(key, size);\n    }\n  }, [virtualizer, key, ref]);\n  (0, $uBoVA$useLayoutEffect)(() => {\n    if (layoutInfo === null || layoutInfo === void 0 ? void 0 : layoutInfo.estimatedSize) updateSize();\n  });\n  return {\n    updateSize: updateSize\n  };\n}\nfunction $47736c1e63ba1c6d$var$getSize(node) {\n  // Reset height before measuring so we get the intrinsic size\n  let height = node.style.height;\n  node.style.height = '';\n  let size = new (0, $uBoVA$Size)(node.scrollWidth, node.scrollHeight);\n  node.style.height = height;\n  return size;\n}\nexport { $47736c1e63ba1c6d$export$1da781778207e0a2 as useVirtualizerItem };","map":{"version":3,"names":["$47736c1e63ba1c6d$export$1da781778207e0a2","options","layoutInfo","virtualizer","ref","key","updateSize","$uBoVA$useCallback","current","size","$47736c1e63ba1c6d$var$getSize","updateItemSize","$uBoVA$useLayoutEffect","estimatedSize","node","height","style","$uBoVA$Size","scrollWidth","scrollHeight"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\virtualizer\\dist\\packages\\@react-aria\\virtualizer\\src\\useVirtualizerItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, RefObject} from '@react-types/shared';\nimport {LayoutInfo, Size} from '@react-stately/virtualizer';\nimport {useCallback} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\ninterface IVirtualizer {\n  updateItemSize(key: Key, size: Size): void\n}\n\nexport interface VirtualizerItemOptions {\n  layoutInfo: LayoutInfo | null,\n  virtualizer: IVirtualizer,\n  ref: RefObject<HTMLElement | null>\n}\n\nexport function useVirtualizerItem(options: VirtualizerItemOptions) {\n  let {layoutInfo, virtualizer, ref} = options;\n  let key = layoutInfo?.key;\n\n  let updateSize = useCallback(() => {\n    if (key != null && ref.current) {\n      let size = getSize(ref.current);\n      virtualizer.updateItemSize(key, size);\n    }\n  }, [virtualizer, key, ref]);\n\n  useLayoutEffect(() => {\n    if (layoutInfo?.estimatedSize) {\n      updateSize();\n    }\n  });\n\n  return {updateSize};\n}\n\nfunction getSize(node: HTMLElement) {\n  // Reset height before measuring so we get the intrinsic size\n  let height = node.style.height;\n  node.style.height = '';\n  let size = new Size(node.scrollWidth, node.scrollHeight);\n  node.style.height = height;\n  return size;\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA2BO,SAASA,0CAAmBC,OAA+B;EAChE,IAAI;IAAAC,UAAA,EAACA,UAAU;IAAAC,WAAA,EAAEA,WAAW;IAAAC,GAAA,EAAEA;EAAG,CAAC,GAAGH,OAAA;EACrC,IAAII,GAAA,GAAMH,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAYG,GAAG;EAEzB,IAAIC,UAAA,GAAa,IAAAC,kBAAU,EAAE;IAC3B,IAAIF,GAAA,IAAO,QAAQD,GAAA,CAAII,OAAO,EAAE;MAC9B,IAAIC,IAAA,GAAOC,6BAAA,CAAQN,GAAA,CAAII,OAAO;MAC9BL,WAAA,CAAYQ,cAAc,CAACN,GAAA,EAAKI,IAAA;IAClC;EACF,GAAG,CAACN,WAAA,EAAaE,GAAA,EAAKD,GAAA,CAAI;EAE1B,IAAAQ,sBAAc,EAAE;IACd,IAAIV,UAAA,aAAAA,UAAA,uBAAAA,UAAA,CAAYW,aAAa,EAC3BP,UAAA;EAEJ;EAEA,OAAO;gBAACA;EAAU;AACpB;AAEA,SAASI,8BAAQI,IAAiB;EAChC;EACA,IAAIC,MAAA,GAASD,IAAA,CAAKE,KAAK,CAACD,MAAM;EAC9BD,IAAA,CAAKE,KAAK,CAACD,MAAM,GAAG;EACpB,IAAIN,IAAA,GAAO,KAAI,GAAAQ,WAAG,EAAEH,IAAA,CAAKI,WAAW,EAAEJ,IAAA,CAAKK,YAAY;EACvDL,IAAA,CAAKE,KAAK,CAACD,MAAM,GAAGA,MAAA;EACpB,OAAON,IAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}