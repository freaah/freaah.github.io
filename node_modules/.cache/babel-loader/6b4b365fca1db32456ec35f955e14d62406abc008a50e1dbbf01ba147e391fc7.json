{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { registerDropTarget as $67560de7c78cb232$export$c28d9fb4a54e471a } from \"./DragManager.mjs\";\nimport { DragTypes as $7252cd45fc48c07c$export$7f04ce188c91447c, globalAllowedDropOperations as $7252cd45fc48c07c$export$f0130eb70b6347b8, globalDndState as $7252cd45fc48c07c$export$6ca6700462636d0b, readFromDataTransfer as $7252cd45fc48c07c$export$d9e760437831f8b3, setGlobalDnDState as $7252cd45fc48c07c$export$6c10d32b362bfa5f, setGlobalDropEffect as $7252cd45fc48c07c$export$64f52ed7349ddb84 } from \"./utils.mjs\";\nimport { DROP_EFFECT_TO_DROP_OPERATION as $103790afe9474d1c$export$608ecc6f1b23c35d, DROP_OPERATION as $103790afe9474d1c$export$60b7b4bcf3903d8e, DROP_OPERATION_ALLOWED as $103790afe9474d1c$export$9bbdfc78cf083e16, DROP_OPERATION_TO_DROP_EFFECT as $103790afe9474d1c$export$5eacb0769d26d3b2 } from \"./constants.mjs\";\nimport { useVirtualDrop as $224594fe3e57ff1e$export$62447ad3d2ec7da6 } from \"./useVirtualDrop.mjs\";\nimport { useState as $j5n4S$useState, useRef as $j5n4S$useRef } from \"react\";\nimport { useEffectEvent as $j5n4S$useEffectEvent, useLayoutEffect as $j5n4S$useLayoutEffect, isMac as $j5n4S$isMac, isIPad as $j5n4S$isIPad } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $5c06e4929e123553$var$DROP_ACTIVATE_TIMEOUT = 800;\nfunction $5c06e4929e123553$export$ccdee5eaf73cf661(options) {\n  let {\n    hasDropButton: hasDropButton,\n    isDisabled: isDisabled\n  } = options;\n  let [isDropTarget, setDropTarget] = (0, $j5n4S$useState)(false);\n  let state = (0, $j5n4S$useRef)({\n    x: 0,\n    y: 0,\n    dragOverElements: new Set(),\n    dropEffect: 'none',\n    allowedOperations: (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).all,\n    dropActivateTimer: undefined\n  }).current;\n  let fireDropEnter = e => {\n    setDropTarget(true);\n    if (typeof options.onDropEnter === 'function') {\n      let rect = e.currentTarget.getBoundingClientRect();\n      options.onDropEnter({\n        type: 'dropenter',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y\n      });\n    }\n  };\n  let fireDropExit = e => {\n    setDropTarget(false);\n    if (typeof options.onDropExit === 'function') {\n      let rect = e.currentTarget.getBoundingClientRect();\n      options.onDropExit({\n        type: 'dropexit',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y\n      });\n    }\n  };\n  let onDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    let allowedOperations = $5c06e4929e123553$var$getAllowedOperations(e);\n    if (e.clientX === state.x && e.clientY === state.y && allowedOperations === state.allowedOperations) {\n      e.dataTransfer.dropEffect = state.dropEffect;\n      return;\n    }\n    state.x = e.clientX;\n    state.y = e.clientY;\n    let prevDropEffect = state.dropEffect;\n    // Update drop effect if allowed drop operations changed (e.g. user pressed modifier key).\n    if (allowedOperations !== state.allowedOperations) {\n      let allowedOps = $5c06e4929e123553$var$allowedOperationsToArray(allowedOperations);\n      let dropOperation = allowedOps[0];\n      if (typeof options.getDropOperation === 'function') {\n        let types = new (0, $7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);\n        dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperations, options.getDropOperation(types, allowedOps));\n      }\n      state.dropEffect = (0, $103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';\n    }\n    if (typeof options.getDropOperationForPoint === 'function') {\n      let types = new (0, $7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);\n      let rect = e.currentTarget.getBoundingClientRect();\n      let dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperations, options.getDropOperationForPoint(types, $5c06e4929e123553$var$allowedOperationsToArray(allowedOperations), state.x - rect.x, state.y - rect.y));\n      state.dropEffect = (0, $103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';\n    }\n    state.allowedOperations = allowedOperations;\n    e.dataTransfer.dropEffect = state.dropEffect;\n    // If the drop operation changes, update state and fire events appropriately.\n    if (state.dropEffect === 'none' && prevDropEffect !== 'none') fireDropExit(e);else if (state.dropEffect !== 'none' && prevDropEffect === 'none') fireDropEnter(e);\n    if (typeof options.onDropMove === 'function' && state.dropEffect !== 'none') {\n      let rect = e.currentTarget.getBoundingClientRect();\n      options.onDropMove({\n        type: 'dropmove',\n        x: state.x - rect.x,\n        y: state.y - rect.y\n      });\n    }\n    clearTimeout(state.dropActivateTimer);\n    if (options.onDropActivate && typeof options.onDropActivate === 'function' && state.dropEffect !== 'none') {\n      let onDropActivateOptions = options.onDropActivate;\n      let rect = e.currentTarget.getBoundingClientRect();\n      state.dropActivateTimer = setTimeout(() => {\n        onDropActivateOptions({\n          type: 'dropactivate',\n          x: state.x - rect.x,\n          y: state.y - rect.y\n        });\n      }, $5c06e4929e123553$var$DROP_ACTIVATE_TIMEOUT);\n    }\n  };\n  let onDragEnter = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    state.dragOverElements.add(e.target);\n    if (state.dragOverElements.size > 1) return;\n    let allowedOperationsBits = $5c06e4929e123553$var$getAllowedOperations(e);\n    let allowedOperations = $5c06e4929e123553$var$allowedOperationsToArray(allowedOperationsBits);\n    let dropOperation = allowedOperations[0];\n    if (typeof options.getDropOperation === 'function') {\n      let types = new (0, $7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);\n      dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperationsBits, options.getDropOperation(types, allowedOperations));\n    }\n    if (typeof options.getDropOperationForPoint === 'function') {\n      let types = new (0, $7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);\n      let rect = e.currentTarget.getBoundingClientRect();\n      dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperationsBits, options.getDropOperationForPoint(types, allowedOperations, e.clientX - rect.x, e.clientY - rect.y));\n    }\n    state.x = e.clientX;\n    state.y = e.clientY;\n    state.allowedOperations = allowedOperationsBits;\n    state.dropEffect = (0, $103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';\n    e.dataTransfer.dropEffect = state.dropEffect;\n    if (dropOperation !== 'cancel') fireDropEnter(e);\n  };\n  let onDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    // We would use e.relatedTarget to detect if the drag is still inside the drop target,\n    // but it is always null in WebKit. https://bugs.webkit.org/show_bug.cgi?id=66547\n    // Instead, we track all of the targets of dragenter events in a set, and remove them\n    // in dragleave. When the set becomes empty, we've left the drop target completely.\n    // We must also remove any elements that are no longer in the DOM, because dragleave\n    // events will never be fired for these. This can happen, for example, with drop\n    // indicators between items, which disappear when the drop target changes.\n    state.dragOverElements.delete(e.target);\n    for (let element of state.dragOverElements) if (!e.currentTarget.contains(element)) state.dragOverElements.delete(element);\n    if (state.dragOverElements.size > 0) return;\n    if (state.dropEffect !== 'none') fireDropExit(e);\n    clearTimeout(state.dropActivateTimer);\n  };\n  let onDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    // Track drop effect in global state for Chrome Android. https://bugs.chromium.org/p/chromium/issues/detail?id=1353951\n    // Android onDragEnd always returns \"none\" as its drop effect.\n    (0, $7252cd45fc48c07c$export$64f52ed7349ddb84)(state.dropEffect);\n    if (typeof options.onDrop === 'function') {\n      let dropOperation = (0, $103790afe9474d1c$export$608ecc6f1b23c35d)[state.dropEffect];\n      let items = (0, $7252cd45fc48c07c$export$d9e760437831f8b3)(e.dataTransfer);\n      let rect = e.currentTarget.getBoundingClientRect();\n      let event = {\n        type: 'drop',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y,\n        items: items,\n        dropOperation: dropOperation\n      };\n      options.onDrop(event);\n    }\n    let dndStateSnapshot = _objectSpread({}, (0, $7252cd45fc48c07c$export$6ca6700462636d0b));\n    state.dragOverElements.clear();\n    fireDropExit(e);\n    clearTimeout(state.dropActivateTimer);\n    // If there wasn't a collection being tracked as a dragged collection, then we are in a case where a non RSP drag is dropped on a\n    // RSP collection and thus we don't need to preserve the global drop effect\n    if (dndStateSnapshot.draggingCollectionRef == null) (0, $7252cd45fc48c07c$export$64f52ed7349ddb84)(undefined);else\n      // Otherwise we need to preserve the global dnd state for onDragEnd's isInternal check.\n      // At the moment fireDropExit may clear dropCollectionRef (i.e. useDroppableCollection's provided onDropExit, required to clear dropCollectionRef when exiting a valid drop target)\n      (0, $7252cd45fc48c07c$export$6c10d32b362bfa5f)(dndStateSnapshot);\n  };\n  let onDropEnter = (0, $j5n4S$useEffectEvent)(e => {\n    if (typeof options.onDropEnter === 'function') options.onDropEnter(e);\n  });\n  let onDropExit = (0, $j5n4S$useEffectEvent)(e => {\n    if (typeof options.onDropExit === 'function') options.onDropExit(e);\n  });\n  let onDropActivate = (0, $j5n4S$useEffectEvent)(e => {\n    if (typeof options.onDropActivate === 'function') options.onDropActivate(e);\n  });\n  let onKeyboardDrop = (0, $j5n4S$useEffectEvent)(e => {\n    if (typeof options.onDrop === 'function') options.onDrop(e);\n  });\n  let getDropOperationKeyboard = (0, $j5n4S$useEffectEvent)((types, allowedOperations) => {\n    if (options.getDropOperation) return options.getDropOperation(types, allowedOperations);\n    return allowedOperations[0];\n  });\n  let {\n    ref: ref\n  } = options;\n  (0, $j5n4S$useLayoutEffect)(() => {\n    if (isDisabled || !ref.current) return;\n    return $67560de7c78cb232$export$c28d9fb4a54e471a({\n      element: ref.current,\n      getDropOperation: getDropOperationKeyboard,\n      onDropEnter(e) {\n        setDropTarget(true);\n        onDropEnter(e);\n      },\n      onDropExit(e) {\n        setDropTarget(false);\n        onDropExit(e);\n      },\n      onDrop: onKeyboardDrop,\n      onDropActivate: onDropActivate\n    });\n  }, [isDisabled, ref, getDropOperationKeyboard, onDropEnter, onDropExit, onKeyboardDrop, onDropActivate]);\n  let {\n    dropProps: dropProps\n  } = (0, $224594fe3e57ff1e$export$62447ad3d2ec7da6)();\n  if (isDisabled) return {\n    dropProps: {},\n    dropButtonProps: {\n      isDisabled: true\n    },\n    isDropTarget: false\n  };\n  return {\n    dropProps: _objectSpread(_objectSpread({}, !hasDropButton && dropProps), {}, {\n      onDragEnter: onDragEnter,\n      onDragOver: onDragOver,\n      onDragLeave: onDragLeave,\n      onDrop: onDrop\n    }),\n    dropButtonProps: _objectSpread({}, hasDropButton && dropProps),\n    isDropTarget: isDropTarget\n  };\n}\nfunction $5c06e4929e123553$var$getAllowedOperations(e) {\n  let allowedOperations = (0, $103790afe9474d1c$export$9bbdfc78cf083e16)[e.dataTransfer.effectAllowed];\n  // WebKit always sets effectAllowed to \"copyMove\" on macOS, and \"all\" on iOS, regardless of what was\n  // set during the dragstart event: https://bugs.webkit.org/show_bug.cgi?id=178058\n  //\n  // Android Chrome also sets effectAllowed to \"copyMove\" in all cases: https://bugs.chromium.org/p/chromium/issues/detail?id=1359182\n  //\n  // If the drag started within the page, we can use a global variable to get the real allowed operations.\n  // This needs to be intersected with the actual effectAllowed, which may have been filtered based on modifier keys.\n  // Unfortunately, this means that link operations do not work at all in Safari.\n  if (0, $7252cd45fc48c07c$export$f0130eb70b6347b8) allowedOperations &= (0, $7252cd45fc48c07c$export$f0130eb70b6347b8);\n  // Chrome and Safari on macOS will automatically filter effectAllowed when pressing modifier keys,\n  // allowing the user to switch between move, link, and copy operations. Firefox on macOS and all\n  // Windows browsers do not do this, so do it ourselves instead. The exact keys are platform dependent.\n  // https://ux.stackexchange.com/questions/83748/what-are-the-most-common-modifier-keys-for-dragging-objects-with-a-mouse\n  //\n  // Note that none of these modifiers are ever set in WebKit due to a bug: https://bugs.webkit.org/show_bug.cgi?id=77465\n  // However, Safari does update effectAllowed correctly, so we can just rely on that.\n  let allowedModifiers = (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).none;\n  if ((0, $j5n4S$isMac)()) {\n    if (e.altKey) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).copy;\n    // Chrome and Safari both use the Control key for link, even though Finder uses Command + Option.\n    // iPadOS doesn't support link operations and will not fire the drop event at all if dropEffect is set to link.\n    // https://bugs.webkit.org/show_bug.cgi?id=244701\n    if (e.ctrlKey && !(0, $j5n4S$isIPad)()) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).link;\n    if (e.metaKey) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).move;\n  } else {\n    if (e.altKey) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).link;\n    if (e.shiftKey) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).move;\n    if (e.ctrlKey) allowedModifiers |= (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).copy;\n  }\n  if (allowedModifiers) return allowedOperations & allowedModifiers;\n  return allowedOperations;\n}\nfunction $5c06e4929e123553$var$allowedOperationsToArray(allowedOperationsBits) {\n  let allowedOperations = [];\n  if (allowedOperationsBits & (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).move) allowedOperations.push('move');\n  if (allowedOperationsBits & (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).copy) allowedOperations.push('copy');\n  if (allowedOperationsBits & (0, $103790afe9474d1c$export$60b7b4bcf3903d8e).link) allowedOperations.push('link');\n  return allowedOperations;\n}\nfunction $5c06e4929e123553$var$getDropOperation(allowedOperations, operation) {\n  let op = (0, $103790afe9474d1c$export$60b7b4bcf3903d8e)[operation];\n  return allowedOperations & op ? operation : 'cancel';\n}\nexport { $5c06e4929e123553$export$ccdee5eaf73cf661 as useDrop };","map":{"version":3,"names":["$5c06e4929e123553$var$DROP_ACTIVATE_TIMEOUT","$5c06e4929e123553$export$ccdee5eaf73cf661","options","hasDropButton","isDisabled","isDropTarget","setDropTarget","$j5n4S$useState","state","$j5n4S$useRef","x","y","dragOverElements","Set","dropEffect","allowedOperations","$103790afe9474d1c$export$60b7b4bcf3903d8e","all","dropActivateTimer","undefined","current","fireDropEnter","e","onDropEnter","rect","currentTarget","getBoundingClientRect","type","clientX","clientY","fireDropExit","onDropExit","onDragOver","preventDefault","stopPropagation","$5c06e4929e123553$var$getAllowedOperations","dataTransfer","prevDropEffect","allowedOps","$5c06e4929e123553$var$allowedOperationsToArray","dropOperation","getDropOperation","types","$7252cd45fc48c07c$export$7f04ce188c91447c","$5c06e4929e123553$var$getDropOperation","$103790afe9474d1c$export$5eacb0769d26d3b2","getDropOperationForPoint","onDropMove","clearTimeout","onDropActivate","onDropActivateOptions","setTimeout","onDragEnter","add","target","size","allowedOperationsBits","onDragLeave","delete","element","contains","onDrop","$7252cd45fc48c07c$export$64f52ed7349ddb84","$103790afe9474d1c$export$608ecc6f1b23c35d","items","$7252cd45fc48c07c$export$d9e760437831f8b3","event","dndStateSnapshot","_objectSpread","$7252cd45fc48c07c$export$6ca6700462636d0b","clear","draggingCollectionRef","$7252cd45fc48c07c$export$6c10d32b362bfa5f","$j5n4S$useEffectEvent","onKeyboardDrop","getDropOperationKeyboard","ref","$j5n4S$useLayoutEffect","$67560de7c78cb232$export$c28d9fb4a54e471a","dropProps","$224594fe3e57ff1e$export$62447ad3d2ec7da6","dropButtonProps","$103790afe9474d1c$export$9bbdfc78cf083e16","effectAllowed","$7252cd45fc48c07c$export$f0130eb70b6347b8","allowedModifiers","none","$j5n4S$isMac","altKey","copy","ctrlKey","$j5n4S$isIPad","link","metaKey","move","shiftKey","push","operation","op"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\dnd\\dist\\packages\\@react-aria\\dnd\\src\\useDrop.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DragEvent, HTMLAttributes, useRef, useState} from 'react';\nimport * as DragManager from './DragManager';\nimport {DragTypes, globalAllowedDropOperations, globalDndState, readFromDataTransfer, setGlobalDnDState, setGlobalDropEffect} from './utils';\nimport {DROP_EFFECT_TO_DROP_OPERATION, DROP_OPERATION, DROP_OPERATION_ALLOWED, DROP_OPERATION_TO_DROP_EFFECT} from './constants';\nimport {DropActivateEvent, DropEnterEvent, DropEvent, DropExitEvent, DropMoveEvent, DropOperation, FocusableElement, DragTypes as IDragTypes, RefObject} from '@react-types/shared';\nimport {isIPad, isMac, useEffectEvent, useLayoutEffect} from '@react-aria/utils';\nimport {useVirtualDrop} from './useVirtualDrop';\n\nexport interface DropOptions {\n  /** A ref for the droppable element. */\n  ref: RefObject<FocusableElement | null>,\n  /**\n   * A function returning the drop operation to be performed when items matching the given types are dropped\n   * on the drop target.\n   */\n  getDropOperation?: (types: IDragTypes, allowedOperations: DropOperation[]) => DropOperation,\n  /** A function that returns the drop operation for a specific point within the target. */\n  getDropOperationForPoint?: (types: IDragTypes, allowedOperations: DropOperation[], x: number, y: number) => DropOperation,\n  /** Handler that is called when a valid drag enters the drop target. */\n  onDropEnter?: (e: DropEnterEvent) => void,\n  /** Handler that is called when a valid drag is moved within the drop target. */\n  onDropMove?: (e: DropMoveEvent) => void,\n  /**\n   * Handler that is called after a valid drag is held over the drop target for a period of time.\n   * This typically opens the item so that the user can drop within it.\n   * @private\n   */\n  onDropActivate?: (e: DropActivateEvent) => void,\n  /** Handler that is called when a valid drag exits the drop target. */\n  onDropExit?: (e: DropExitEvent) => void,\n  /** Handler that is called when a valid drag is dropped on the drop target. */\n  onDrop?: (e: DropEvent) => void,\n  /**\n   * Whether the item has an explicit focusable drop affordance to initiate accessible drag and drop mode.\n   * If true, the dropProps will omit these event handlers, and they will be applied to dropButtonProps instead.\n   */\n  hasDropButton?: boolean,\n  /**\n   * Whether the drop target is disabled. If true, the drop target will not accept any drops.\n   */\n  isDisabled?: boolean\n}\n\nexport interface DropResult {\n  /** Props for the droppable element. */\n  dropProps: HTMLAttributes<HTMLElement>,\n  /** Whether the drop target is currently focused or hovered. */\n  isDropTarget: boolean,\n  /** Props for the explicit drop button affordance, if any. */\n  dropButtonProps?: AriaButtonProps\n}\n\nconst DROP_ACTIVATE_TIMEOUT = 800;\n\n/**\n * Handles drop interactions for an element, with support for traditional mouse and touch\n * based drag and drop, in addition to full parity for keyboard and screen reader users.\n */\nexport function useDrop(options: DropOptions): DropResult {\n  let {hasDropButton, isDisabled} = options;\n  let [isDropTarget, setDropTarget] = useState(false);\n  let state = useRef<{\n    x: number,\n    y: number,\n    dragOverElements: Set<Element>,\n    dropEffect: DataTransfer['dropEffect'],\n    allowedOperations: DROP_OPERATION,\n    dropActivateTimer: ReturnType<typeof setTimeout> | undefined\n  }>({\n    x: 0,\n    y: 0,\n    dragOverElements: new Set<Element>(),\n    dropEffect: 'none',\n    allowedOperations: DROP_OPERATION.all,\n    dropActivateTimer: undefined\n  }).current;\n\n  let fireDropEnter = (e: DragEvent) => {\n    setDropTarget(true);\n\n    if (typeof options.onDropEnter === 'function') {\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      options.onDropEnter({\n        type: 'dropenter',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y\n      });\n    }\n  };\n\n  let fireDropExit = (e: DragEvent) => {\n    setDropTarget(false);\n\n    if (typeof options.onDropExit === 'function') {\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      options.onDropExit({\n        type: 'dropexit',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y\n      });\n    }\n  };\n\n  let onDragOver = (e: DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let allowedOperations = getAllowedOperations(e);\n    if (e.clientX === state.x && e.clientY === state.y && allowedOperations === state.allowedOperations) {\n      e.dataTransfer.dropEffect = state.dropEffect;\n      return;\n    }\n\n    state.x = e.clientX;\n    state.y = e.clientY;\n\n    let prevDropEffect = state.dropEffect;\n\n    // Update drop effect if allowed drop operations changed (e.g. user pressed modifier key).\n    if (allowedOperations !== state.allowedOperations) {\n      let allowedOps = allowedOperationsToArray(allowedOperations);\n      let dropOperation = allowedOps[0];\n      if (typeof options.getDropOperation === 'function') {\n        let types = new DragTypes(e.dataTransfer);\n        dropOperation = getDropOperation(allowedOperations, options.getDropOperation(types, allowedOps));\n      }\n      state.dropEffect = DROP_OPERATION_TO_DROP_EFFECT[dropOperation] || 'none';\n    }\n\n    if (typeof options.getDropOperationForPoint === 'function') {\n      let types = new DragTypes(e.dataTransfer);\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      let dropOperation = getDropOperation(\n        allowedOperations,\n        options.getDropOperationForPoint(types, allowedOperationsToArray(allowedOperations), state.x - rect.x, state.y - rect.y)\n      );\n      state.dropEffect = DROP_OPERATION_TO_DROP_EFFECT[dropOperation] || 'none';\n    }\n\n    state.allowedOperations = allowedOperations;\n    e.dataTransfer.dropEffect = state.dropEffect;\n\n    // If the drop operation changes, update state and fire events appropriately.\n    if (state.dropEffect === 'none' && prevDropEffect !== 'none') {\n      fireDropExit(e);\n    } else if (state.dropEffect !== 'none' && prevDropEffect === 'none') {\n      fireDropEnter(e);\n    }\n\n    if (typeof options.onDropMove === 'function' && state.dropEffect !== 'none') {\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      options.onDropMove({\n        type: 'dropmove',\n        x: state.x - rect.x,\n        y: state.y - rect.y\n      });\n    }\n\n    clearTimeout(state.dropActivateTimer);\n\n    if (options.onDropActivate && typeof options.onDropActivate === 'function' && state.dropEffect !== 'none') {\n      let onDropActivateOptions = options.onDropActivate;\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      state.dropActivateTimer = setTimeout(() => {\n        onDropActivateOptions({\n          type: 'dropactivate',\n          x: state.x - rect.x,\n          y: state.y - rect.y\n        });\n      }, DROP_ACTIVATE_TIMEOUT);\n    }\n  };\n\n  let onDragEnter = (e: DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    state.dragOverElements.add(e.target as Element);\n    if (state.dragOverElements.size > 1) {\n      return;\n    }\n\n    let allowedOperationsBits = getAllowedOperations(e);\n    let allowedOperations = allowedOperationsToArray(allowedOperationsBits);\n    let dropOperation = allowedOperations[0];\n\n    if (typeof options.getDropOperation === 'function') {\n      let types = new DragTypes(e.dataTransfer);\n      dropOperation = getDropOperation(allowedOperationsBits, options.getDropOperation(types, allowedOperations));\n    }\n\n    if (typeof options.getDropOperationForPoint === 'function') {\n      let types = new DragTypes(e.dataTransfer);\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      dropOperation = getDropOperation(\n        allowedOperationsBits,\n        options.getDropOperationForPoint(types, allowedOperations, e.clientX - rect.x, e.clientY - rect.y)\n      );\n    }\n\n    state.x = e.clientX;\n    state.y = e.clientY;\n    state.allowedOperations = allowedOperationsBits;\n    state.dropEffect = DROP_OPERATION_TO_DROP_EFFECT[dropOperation] || 'none';\n    e.dataTransfer.dropEffect = state.dropEffect;\n\n    if (dropOperation !== 'cancel') {\n      fireDropEnter(e);\n    }\n  };\n\n  let onDragLeave = (e: DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // We would use e.relatedTarget to detect if the drag is still inside the drop target,\n    // but it is always null in WebKit. https://bugs.webkit.org/show_bug.cgi?id=66547\n    // Instead, we track all of the targets of dragenter events in a set, and remove them\n    // in dragleave. When the set becomes empty, we've left the drop target completely.\n    // We must also remove any elements that are no longer in the DOM, because dragleave\n    // events will never be fired for these. This can happen, for example, with drop\n    // indicators between items, which disappear when the drop target changes.\n\n    state.dragOverElements.delete(e.target as Element);\n    for (let element of state.dragOverElements) {\n      if (!e.currentTarget.contains(element)) {\n        state.dragOverElements.delete(element);\n      }\n    }\n\n    if (state.dragOverElements.size > 0) {\n      return;\n    }\n\n    if (state.dropEffect !== 'none') {\n      fireDropExit(e);\n    }\n\n    clearTimeout(state.dropActivateTimer);\n  };\n\n  let onDrop = (e: DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // Track drop effect in global state for Chrome Android. https://bugs.chromium.org/p/chromium/issues/detail?id=1353951\n    // Android onDragEnd always returns \"none\" as its drop effect.\n    setGlobalDropEffect(state.dropEffect);\n\n    if (typeof options.onDrop === 'function') {\n      let dropOperation = DROP_EFFECT_TO_DROP_OPERATION[state.dropEffect];\n      let items = readFromDataTransfer(e.dataTransfer);\n\n      let rect = (e.currentTarget as HTMLElement).getBoundingClientRect();\n      let event: DropEvent = {\n        type: 'drop',\n        x: e.clientX - rect.x,\n        y: e.clientY - rect.y,\n        items,\n        dropOperation\n      };\n\n      options.onDrop(event);\n    }\n\n    let dndStateSnapshot = {...globalDndState};\n    state.dragOverElements.clear();\n    fireDropExit(e);\n    clearTimeout(state.dropActivateTimer);\n    // If there wasn't a collection being tracked as a dragged collection, then we are in a case where a non RSP drag is dropped on a\n    // RSP collection and thus we don't need to preserve the global drop effect\n    if (dndStateSnapshot.draggingCollectionRef == null) {\n      setGlobalDropEffect(undefined);\n    } else {\n      // Otherwise we need to preserve the global dnd state for onDragEnd's isInternal check.\n      // At the moment fireDropExit may clear dropCollectionRef (i.e. useDroppableCollection's provided onDropExit, required to clear dropCollectionRef when exiting a valid drop target)\n      setGlobalDnDState(dndStateSnapshot);\n    }\n  };\n\n  let onDropEnter = useEffectEvent((e: DropEnterEvent) => {\n    if (typeof options.onDropEnter === 'function') {\n      options.onDropEnter(e);\n    }\n  });\n\n  let onDropExit = useEffectEvent((e: DropExitEvent) => {\n    if (typeof options.onDropExit === 'function') {\n      options.onDropExit(e);\n    }\n  });\n\n  let onDropActivate = useEffectEvent((e: DropActivateEvent) => {\n    if (typeof options.onDropActivate === 'function') {\n      options.onDropActivate(e);\n    }\n  });\n\n  let onKeyboardDrop = useEffectEvent((e: DropEvent) => {\n    if (typeof options.onDrop === 'function') {\n      options.onDrop(e);\n    }\n  });\n\n  let getDropOperationKeyboard = useEffectEvent((types: IDragTypes, allowedOperations: DropOperation[]) => {\n    if (options.getDropOperation) {\n      return options.getDropOperation(types, allowedOperations);\n    }\n\n    return allowedOperations[0];\n  });\n\n  let {ref} = options;\n  useLayoutEffect(() => {\n    if (isDisabled || !ref.current) {\n      return;\n    }\n    return DragManager.registerDropTarget({\n      element: ref.current,\n      getDropOperation: getDropOperationKeyboard,\n      onDropEnter(e) {\n        setDropTarget(true);\n        onDropEnter(e);\n      },\n      onDropExit(e) {\n        setDropTarget(false);\n        onDropExit(e);\n      },\n      onDrop: onKeyboardDrop,\n      onDropActivate\n    });\n  }, [isDisabled, ref, getDropOperationKeyboard, onDropEnter, onDropExit, onKeyboardDrop, onDropActivate]);\n\n  let {dropProps} = useVirtualDrop();\n  if (isDisabled) {\n    return {\n      dropProps: {},\n      dropButtonProps: {isDisabled: true},\n      isDropTarget: false\n    };\n  }\n  return {\n    dropProps: {\n      ...(!hasDropButton && dropProps),\n      onDragEnter,\n      onDragOver,\n      onDragLeave,\n      onDrop\n    },\n    dropButtonProps: {...(hasDropButton && dropProps)},\n    isDropTarget\n  };\n}\n\nfunction getAllowedOperations(e: DragEvent) {\n  let allowedOperations = DROP_OPERATION_ALLOWED[e.dataTransfer.effectAllowed];\n\n  // WebKit always sets effectAllowed to \"copyMove\" on macOS, and \"all\" on iOS, regardless of what was\n  // set during the dragstart event: https://bugs.webkit.org/show_bug.cgi?id=178058\n  //\n  // Android Chrome also sets effectAllowed to \"copyMove\" in all cases: https://bugs.chromium.org/p/chromium/issues/detail?id=1359182\n  //\n  // If the drag started within the page, we can use a global variable to get the real allowed operations.\n  // This needs to be intersected with the actual effectAllowed, which may have been filtered based on modifier keys.\n  // Unfortunately, this means that link operations do not work at all in Safari.\n  if (globalAllowedDropOperations) {\n    allowedOperations &= globalAllowedDropOperations;\n  }\n\n  // Chrome and Safari on macOS will automatically filter effectAllowed when pressing modifier keys,\n  // allowing the user to switch between move, link, and copy operations. Firefox on macOS and all\n  // Windows browsers do not do this, so do it ourselves instead. The exact keys are platform dependent.\n  // https://ux.stackexchange.com/questions/83748/what-are-the-most-common-modifier-keys-for-dragging-objects-with-a-mouse\n  //\n  // Note that none of these modifiers are ever set in WebKit due to a bug: https://bugs.webkit.org/show_bug.cgi?id=77465\n  // However, Safari does update effectAllowed correctly, so we can just rely on that.\n  let allowedModifiers = DROP_OPERATION.none;\n  if (isMac()) {\n    if (e.altKey) {\n      allowedModifiers |= DROP_OPERATION.copy;\n    }\n\n    // Chrome and Safari both use the Control key for link, even though Finder uses Command + Option.\n    // iPadOS doesn't support link operations and will not fire the drop event at all if dropEffect is set to link.\n    // https://bugs.webkit.org/show_bug.cgi?id=244701\n    if (e.ctrlKey && !isIPad()) {\n      allowedModifiers |= DROP_OPERATION.link;\n    }\n\n    if (e.metaKey) {\n      allowedModifiers |= DROP_OPERATION.move;\n    }\n  } else {\n    if (e.altKey) {\n      allowedModifiers |= DROP_OPERATION.link;\n    }\n\n    if (e.shiftKey) {\n      allowedModifiers |= DROP_OPERATION.move;\n    }\n\n    if (e.ctrlKey) {\n      allowedModifiers |= DROP_OPERATION.copy;\n    }\n  }\n\n  if (allowedModifiers) {\n    return allowedOperations & allowedModifiers;\n  }\n\n  return allowedOperations;\n}\n\nfunction allowedOperationsToArray(allowedOperationsBits: DROP_OPERATION) {\n  let allowedOperations: Array<DropOperation> = [];\n  if (allowedOperationsBits & DROP_OPERATION.move) {\n    allowedOperations.push('move');\n  }\n\n  if (allowedOperationsBits & DROP_OPERATION.copy) {\n    allowedOperations.push('copy');\n  }\n\n  if (allowedOperationsBits & DROP_OPERATION.link) {\n    allowedOperations.push('link');\n  }\n\n  return allowedOperations;\n}\n\nfunction getDropOperation(allowedOperations: DROP_OPERATION, operation: DropOperation) {\n  let op = DROP_OPERATION[operation];\n  return allowedOperations & op ? operation : 'cancel';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}