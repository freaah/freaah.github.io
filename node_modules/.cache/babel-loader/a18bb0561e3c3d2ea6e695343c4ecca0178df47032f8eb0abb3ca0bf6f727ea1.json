{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { ProgressBarContext as $0393f8ab869a0f1a$export$e9f3bf65a26ce129 } from \"./ProgressBar.mjs\";\nimport { announce as $fM325$announce } from \"@react-aria/live-announcer\";\nimport { useButton as $fM325$useButton, useFocusRing as $fM325$useFocusRing, useHover as $fM325$useHover, useId as $fM325$useId, mergeProps as $fM325$mergeProps } from \"react-aria\";\nimport { createHideableComponent as $fM325$createHideableComponent } from \"@react-aria/collections\";\nimport { filterDOMProps as $fM325$filterDOMProps } from \"@react-aria/utils\";\nimport $fM325$react, { createContext as $fM325$createContext, useRef as $fM325$useRef, useEffect as $fM325$useEffect } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $d2b4bc8c273e7be6$var$additionalButtonHTMLAttributes = new Set(['form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'name', 'value']);\nconst $d2b4bc8c273e7be6$export$24d547caef80ccd1 = /*#__PURE__*/(0, $fM325$createContext)({});\nconst $d2b4bc8c273e7be6$export$353f5b6fc5456de1 = /*#__PURE__*/(0, $fM325$createHideableComponent)(function Button(props, ref) {\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $d2b4bc8c273e7be6$export$24d547caef80ccd1);\n  props = $d2b4bc8c273e7be6$var$disablePendingProps(props);\n  let ctx = props;\n  let {\n    isPending: isPending\n  } = ctx;\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed\n  } = (0, $fM325$useButton)(props, ref);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $fM325$useFocusRing)(props);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $fM325$useHover)(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: props.isDisabled || isPending\n  }));\n  let renderValues = {\n    isHovered: isHovered,\n    isPressed: (ctx.isPressed || isPressed) && !isPending,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    isDisabled: props.isDisabled || false,\n    isPending: isPending !== null && isPending !== void 0 ? isPending : false\n  };\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)(_objectSpread(_objectSpread({}, props), {}, {\n    values: renderValues,\n    defaultClassName: 'react-aria-Button'\n  }));\n  let buttonId = (0, $fM325$useId)(buttonProps.id);\n  let progressId = (0, $fM325$useId)();\n  let ariaLabelledby = buttonProps['aria-labelledby'];\n  if (isPending) {\n    // aria-labelledby wins over aria-label\n    // https://www.w3.org/TR/accname-1.2/#computation-steps\n    if (ariaLabelledby) ariaLabelledby = \"\".concat(ariaLabelledby, \" \").concat(progressId);else if (buttonProps['aria-label']) ariaLabelledby = \"\".concat(buttonId, \" \").concat(progressId);\n  }\n  let wasPending = (0, $fM325$useRef)(isPending);\n  (0, $fM325$useEffect)(() => {\n    let message = {\n      'aria-labelledby': ariaLabelledby || buttonId\n    };\n    if (!wasPending.current && isFocused && isPending) (0, $fM325$announce)(message, 'assertive');else if (wasPending.current && isFocused && !isPending) (0, $fM325$announce)(message, 'assertive');\n    wasPending.current = isPending;\n  }, [isPending, isFocused, ariaLabelledby, buttonId]);\n  // When the button is in a pending state, we want to stop implicit form submission (ie. when the user presses enter on a text input).\n  // We do this by changing the button's type to button.\n  return /*#__PURE__*/(0, $fM325$react).createElement(\"button\", _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, $fM325$filterDOMProps)(props, {\n    propNames: $d2b4bc8c273e7be6$var$additionalButtonHTMLAttributes\n  })), (0, $fM325$mergeProps)(buttonProps, focusProps, hoverProps)), renderProps), {}, {\n    type: buttonProps.type === 'submit' && isPending ? 'button' : buttonProps.type,\n    id: buttonId,\n    ref: ref,\n    \"aria-labelledby\": ariaLabelledby,\n    slot: props.slot || undefined,\n    \"aria-disabled\": isPending ? 'true' : buttonProps['aria-disabled'],\n    \"data-disabled\": props.isDisabled || undefined,\n    \"data-pressed\": renderValues.isPressed || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-pending\": isPending || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined\n  }), /*#__PURE__*/(0, $fM325$react).createElement((0, $0393f8ab869a0f1a$export$e9f3bf65a26ce129).Provider, {\n    value: {\n      id: progressId\n    }\n  }, renderProps.children));\n});\nfunction $d2b4bc8c273e7be6$var$disablePendingProps(props) {\n  // Don't allow interaction while isPending is true\n  if (props.isPending) {\n    props.onPress = undefined;\n    props.onPressStart = undefined;\n    props.onPressEnd = undefined;\n    props.onPressChange = undefined;\n    props.onPressUp = undefined;\n    props.onKeyDown = undefined;\n    props.onKeyUp = undefined;\n    props.onClick = undefined;\n    props.href = undefined;\n  }\n  return props;\n}\nexport { $d2b4bc8c273e7be6$export$24d547caef80ccd1 as ButtonContext, $d2b4bc8c273e7be6$export$353f5b6fc5456de1 as Button };","map":{"version":3,"names":["$d2b4bc8c273e7be6$var$additionalButtonHTMLAttributes","Set","$d2b4bc8c273e7be6$export$24d547caef80ccd1","$fM325$createContext","$d2b4bc8c273e7be6$export$353f5b6fc5456de1","$fM325$createHideableComponent","Button","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","$d2b4bc8c273e7be6$var$disablePendingProps","ctx","isPending","buttonProps","isPressed","$fM325$useButton","focusProps","isFocused","isFocusVisible","$fM325$useFocusRing","hoverProps","isHovered","$fM325$useHover","_objectSpread","isDisabled","renderValues","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","values","defaultClassName","buttonId","$fM325$useId","id","progressId","ariaLabelledby","concat","wasPending","$fM325$useRef","$fM325$useEffect","message","current","$fM325$announce","$fM325$react","createElement","$fM325$filterDOMProps","propNames","$fM325$mergeProps","type","slot","undefined","$0393f8ab869a0f1a$export$e9f3bf65a26ce129","Provider","value","children","onPress","onPressStart","onPressEnd","onPressChange","onPressUp","onKeyDown","onKeyUp","onClick","href"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\react-aria-components\\dist\\packages\\react-aria-components\\src\\Button.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {\n  AriaButtonProps,\n  HoverEvents,\n  mergeProps,\n  useButton,\n  useFocusRing,\n  useHover,\n  useId\n} from 'react-aria';\nimport {\n  ContextValue,\n  RenderProps,\n  SlotProps,\n  useContextProps,\n  useRenderProps\n} from './utils';\nimport {createHideableComponent} from '@react-aria/collections';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {ProgressBarContext} from './ProgressBar';\nimport React, {createContext, ForwardedRef, useEffect, useRef} from 'react';\n\nexport interface ButtonRenderProps {\n  /**\n   * Whether the button is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the button is currently in a pressed state.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the button is focused, either via a mouse or keyboard.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the button is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the button is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the button is currently in a pending state.\n   * @selector [data-pending]\n   */\n  isPending: boolean\n}\n\nexport interface ButtonProps extends Omit<AriaButtonProps, 'children' | 'href' | 'target' | 'rel' | 'elementType'>, HoverEvents, SlotProps, RenderProps<ButtonRenderProps> {\n  /**\n   * The `<form>` element to associate the button with.\n   * The value of this attribute must be the id of a `<form>` in the same document.\n   */\n  form?: string,\n  /**\n   * The URL that processes the information submitted by the button.\n   * Overrides the action attribute of the button's form owner.\n   */\n  formAction?: string,\n  /** Indicates how to encode the form data that is submitted. */\n  formEncType?: string,\n  /** Indicates the HTTP method used to submit the form. */\n  formMethod?: string,\n  /** Indicates that the form is not to be validated when it is submitted. */\n  formNoValidate?: boolean,\n  /** Overrides the target attribute of the button's form owner. */\n  formTarget?: string,\n  /** Submitted as a pair with the button's value as part of the form data. */\n  name?: string,\n  /** The value associated with the button's name when it's submitted with the form data. */\n  value?: string,\n  /**\n   * Whether the button is in a pending state. This disables press and hover events\n   * while retaining focusability, and announces the pending state to screen readers.\n   */\n  isPending?: boolean\n}\n\ninterface ButtonContextValue extends ButtonProps {\n  isPressed?: boolean\n}\n\nconst additionalButtonHTMLAttributes = new Set(['form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'name', 'value']);\n\nexport const ButtonContext = createContext<ContextValue<ButtonContextValue, HTMLButtonElement>>({});\n\n/**\n * A button allows a user to perform an action, with mouse, touch, and keyboard interactions.\n */\nexport const Button = /*#__PURE__*/ createHideableComponent(function Button(props: ButtonProps, ref: ForwardedRef<HTMLButtonElement>) {\n  [props, ref] = useContextProps(props, ref, ButtonContext);\n  props = disablePendingProps(props);\n  let ctx = props as ButtonContextValue;\n  let {isPending} = ctx;\n  let {buttonProps, isPressed} = useButton(props, ref);\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing(props);\n  let {hoverProps, isHovered} = useHover({\n    ...props,\n    isDisabled: props.isDisabled || isPending\n  });\n  let renderValues = {\n    isHovered,\n    isPressed: (ctx.isPressed || isPressed) && !isPending,\n    isFocused,\n    isFocusVisible,\n    isDisabled: props.isDisabled || false,\n    isPending: isPending ?? false\n  };\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: renderValues,\n    defaultClassName: 'react-aria-Button'\n  });\n\n  let buttonId = useId(buttonProps.id);\n  let progressId = useId();\n\n  let ariaLabelledby = buttonProps['aria-labelledby'];\n  if (isPending) {\n    // aria-labelledby wins over aria-label\n    // https://www.w3.org/TR/accname-1.2/#computation-steps\n    if (ariaLabelledby) {\n      ariaLabelledby = `${ariaLabelledby} ${progressId}`;\n    } else if (buttonProps['aria-label']) {\n      ariaLabelledby = `${buttonId} ${progressId}`;\n    }\n  }\n\n  let wasPending = useRef(isPending);\n  useEffect(() => {\n    let message = {'aria-labelledby': ariaLabelledby || buttonId};\n    if (!wasPending.current && isFocused && isPending) {\n      announce(message, 'assertive');\n    } else if (wasPending.current && isFocused && !isPending) {\n      announce(message, 'assertive');\n    }\n    wasPending.current = isPending;\n  }, [isPending, isFocused, ariaLabelledby, buttonId]);\n\n  // When the button is in a pending state, we want to stop implicit form submission (ie. when the user presses enter on a text input).\n  // We do this by changing the button's type to button.\n  return (\n    <button\n      {...filterDOMProps(props, {propNames: additionalButtonHTMLAttributes})}\n      {...mergeProps(buttonProps, focusProps, hoverProps)}\n      {...renderProps}\n      type={buttonProps.type === 'submit' && isPending ? 'button' : buttonProps.type}\n      id={buttonId}\n      ref={ref}\n      aria-labelledby={ariaLabelledby}\n      slot={props.slot || undefined}\n      aria-disabled={isPending ? 'true' : buttonProps['aria-disabled']}\n      data-disabled={props.isDisabled || undefined}\n      data-pressed={renderValues.isPressed || undefined}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-pending={isPending || undefined}\n      data-focus-visible={isFocusVisible || undefined}>\n      <ProgressBarContext.Provider value={{id: progressId}}>\n        {renderProps.children}\n      </ProgressBarContext.Provider>\n    </button>\n  );\n});\n\nfunction disablePendingProps(props) {\n  // Don't allow interaction while isPending is true\n  if (props.isPending) {\n    props.onPress = undefined;\n    props.onPressStart = undefined;\n    props.onPressEnd = undefined;\n    props.onPressChange = undefined;\n    props.onPressUp = undefined;\n    props.onKeyDown = undefined;\n    props.onKeyUp = undefined;\n    props.onClick = undefined;\n    props.href = undefined;\n  }\n  return props;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}