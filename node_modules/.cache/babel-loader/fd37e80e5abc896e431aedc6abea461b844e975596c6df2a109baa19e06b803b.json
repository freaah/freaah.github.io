{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */class $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n    let string = strings[key];\n    if (!string) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(locale, \" locale\"));\n    return string;\n  }\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.messages = Object.fromEntries(Object.entries(messages).filter(_ref => {\n      let [, v] = _ref;\n      return v;\n    }));\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  if (Intl.Locale) return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary };","map":{"version":3,"names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","concat","constructor","arguments","length","undefined","Object","fromEntries","entries","filter","_ref","v","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageDictionary.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.messages = Object.fromEntries(\n      Object.entries(messages).filter(([, v]) => v)\n    );\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  if (Intl.Locale) {\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n"],"mappings":"AAAA;;;;;;;;;;GAsBO,MAAMA,yCAAA;EAaXC,mBAAmBC,GAAW,EAAEC,MAAc,EAAE;IAC9C,IAAIC,OAAA,GAAU,IAAI,CAACC,QAAQ,CAACF,MAAA,CAAO;IACnC,IAAI,CAACC,OAAA,EAAS;MACZA,OAAA,GAAUE,yCAAA,CAAoBH,MAAA,EAAQ,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACE,aAAa;MACvE,IAAI,CAACF,QAAQ,CAACF,MAAA,CAAO,GAAGC,OAAA;IAC1B;IAEA,IAAII,MAAA,GAASJ,OAAO,CAACF,GAAA,CAAI;IACzB,IAAI,CAACM,MAAA,EACH,MAAM,IAAIC,KAAA,gCAAAC,MAAA,CAAqCR,GAAA,UAAAQ,MAAA,CAAUP,MAAA,YAAe;IAG1E,OAAOK,MAAA;EACT;EAtBAG,YAAYN,QAA0B,EAAmC;IAAA,IAAjCE,aAAA,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,OAAO;IACrE;IACA;IACA,IAAI,CAACP,QAAQ,GAAGU,MAAA,CAAOC,WAAW,CAChCD,MAAA,CAAOE,OAAO,CAACZ,QAAA,EAAUa,MAAM,CAACC,IAAA;MAAA,IAAC,GAAGC,CAAA,CAAE,GAAAD,IAAA;MAAA,OAAKC,CAAA;IAAA;IAE7C,IAAI,CAACb,aAAa,GAAGA,aAAA;EACvB;AAgBF;AAEA,SAASD,0CAAoBH,MAAc,EAAEC,OAAyB,EAAyB;EAAA,IAAvBG,aAAA,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgB,OAAO;EAC7F;EACA,IAAIR,OAAO,CAACD,MAAA,CAAO,EACjB,OAAOC,OAAO,CAACD,MAAA,CAAO;EAGxB;EACA;EACA;EACA;EACA;EACA,IAAIkB,QAAA,GAAWC,iCAAA,CAAYnB,MAAA;EAC3B,IAAIC,OAAO,CAACiB,QAAA,CAAS,EACnB,OAAOjB,OAAO,CAACiB,QAAA,CAAS;EAG1B,KAAK,IAAInB,GAAA,IAAOE,OAAA,EAAS;IACvB,IAAIF,GAAA,CAAIqB,UAAU,CAACF,QAAA,GAAW,MAC5B,OAAOjB,OAAO,CAACF,GAAA,CAAI;EAEvB;EAEA;EACA,OAAOE,OAAO,CAACG,aAAA,CAAc;AAC/B;AAEA,SAASe,kCAAYnB,MAAc;EACjC,IAAIqB,IAAA,CAAKC,MAAM,EACb,OAAO,IAAID,IAAA,CAAKC,MAAM,CAACtB,MAAA,EAAQkB,QAAQ;EAGzC,OAAOlB,MAAA,CAAOuB,KAAK,CAAC,IAAI,CAAC,EAAE;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}