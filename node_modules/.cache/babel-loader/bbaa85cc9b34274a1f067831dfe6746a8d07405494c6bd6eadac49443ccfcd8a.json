{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useEffect as $ig234$useEffect } from \"react\";\nimport { filterDOMProps as $ig234$filterDOMProps, useFormReset as $ig234$useFormReset, getOwnerWindow as $ig234$getOwnerWindow, mergeProps as $ig234$mergeProps } from \"@react-aria/utils\";\nimport { useControlledState as $ig234$useControlledState } from \"@react-stately/utils\";\nimport { useField as $ig234$useField } from \"@react-aria/label\";\nimport { useFocusable as $ig234$useFocusable } from \"@react-aria/focus\";\nimport { useFormValidation as $ig234$useFormValidation } from \"@react-aria/form\";\nimport { useFormValidationState as $ig234$useFormValidationState } from \"@react-stately/form\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    type = 'text',\n    validationBehavior = 'aria'\n  } = props;\n  let [value, setValue] = (0, $ig234$useControlledState)(props.value, props.defaultValue || '', props.onChange);\n  let {\n    focusableProps: focusableProps\n  } = (0, $ig234$useFocusable)(props, ref);\n  let validationState = (0, $ig234$useFormValidationState)(_objectSpread(_objectSpread({}, props), {}, {\n    value: value\n  }));\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = validationState.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $ig234$useField)(_objectSpread(_objectSpread({}, props), {}, {\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  }));\n  let domProps = (0, $ig234$filterDOMProps)(props, {\n    labelable: true\n  });\n  const inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  (0, $ig234$useFormReset)(ref, value, setValue);\n  (0, $ig234$useFormValidation)(props, validationState, ref);\n  (0, $ig234$useEffect)(() => {\n    // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.\n    // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,\n    // which causes Chrome to skip validation. Only updating `value` is ok in our case since our\n    // textareas are always controlled. React is planning on removing this synchronization in a\n    // future major version.\n    // https://github.com/facebook/react/issues/19474\n    // https://github.com/facebook/react/issues/11896\n    if (ref.current instanceof (0, $ig234$getOwnerWindow)(ref.current).HTMLTextAreaElement) {\n      let input = ref.current;\n      Object.defineProperty(input, 'defaultValue', {\n        get: () => input.value,\n        set: () => {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $ig234$mergeProps)(domProps, inputElementType === 'input' ? inputOnlyProps : undefined, _objectSpread(_objectSpread({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      required: isRequired && validationBehavior === 'native',\n      'aria-required': isRequired && validationBehavior === 'aria' || undefined,\n      'aria-invalid': isInvalid || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-activedescendant': props['aria-activedescendant'],\n      'aria-autocomplete': props['aria-autocomplete'],\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-controls': props['aria-controls'],\n      value: value,\n      onChange: e => setValue(e.target.value),\n      autoComplete: props.autoComplete,\n      autoCapitalize: props.autoCapitalize,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      autoCorrect: props.autoCorrect,\n      spellCheck: props.spellCheck,\n      // Clipboard events\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      // Composition events\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      // Selection events\n      onSelect: props.onSelect,\n      // Input events\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps), fieldProps)),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $2d73ec29415bd339$export$712718f7aec83d5 as useTextField };","map":{"version":3,"names":["$2d73ec29415bd339$export$712718f7aec83d5","props","ref","inputElementType","isDisabled","isRequired","isReadOnly","type","validationBehavior","value","setValue","$ig234$useControlledState","defaultValue","onChange","focusableProps","$ig234$useFocusable","validationState","$ig234$useFormValidationState","_objectSpread","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","$ig234$useField","errorMessage","domProps","$ig234$filterDOMProps","labelable","inputOnlyProps","pattern","$ig234$useFormReset","$ig234$useFormValidation","$ig234$useEffect","current","$ig234$getOwnerWindow","HTMLTextAreaElement","input","Object","defineProperty","get","set","configurable","inputProps","$ig234$mergeProps","undefined","disabled","readOnly","required","e","target","autoComplete","autoCapitalize","maxLength","minLength","name","placeholder","inputMode","autoCorrect","spellCheck","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  HTMLAttributes,\n  type JSX,\n  LabelHTMLAttributes,\n  RefObject,\n  useEffect\n} from 'react';\nimport {DOMAttributes, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, getOwnerWindow, mergeProps, useFormReset} from '@react-aria/utils';\nimport {useControlledState} from '@react-stately/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\nimport {useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = JSX.IntrinsicElements;\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n/**\n * The HTML element interfaces that `useTextField` supports based on what is\n * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n * `HTMLTextAreaElement`.\n */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n/**\n * The HTML attributes interfaces that `useTextField` supports based on what\n * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\nexport interface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps<TextFieldHTMLElementType[T]> {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T,\n  /**\n   * Controls whether inputted text is automatically capitalized and, if so, in what manner.\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).\n   */\n  autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T] | null>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> extends ValidationResult {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    type = 'text',\n    validationBehavior = 'aria'\n  } = props;\n  let [value, setValue] = useControlledState<string>(props.value, props.defaultValue || '', props.onChange);\n  let {focusableProps} = useFocusable<TextFieldHTMLElementType[T]>(props, ref);\n  let validationState = useFormValidationState({\n    ...props,\n    value\n  });\n  let {isInvalid, validationErrors, validationDetails} = validationState.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  useFormReset(ref, value, setValue);\n  useFormValidation(props, validationState, ref);\n\n  useEffect(() => {\n    // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.\n    // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,\n    // which causes Chrome to skip validation. Only updating `value` is ok in our case since our\n    // textareas are always controlled. React is planning on removing this synchronization in a\n    // future major version.\n    // https://github.com/facebook/react/issues/19474\n    // https://github.com/facebook/react/issues/11896\n    if (ref.current instanceof getOwnerWindow(ref.current).HTMLTextAreaElement) {\n      let input = ref.current;\n      Object.defineProperty(input, 'defaultValue', {\n        get: () => input.value,\n        set: () => {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' ? inputOnlyProps : undefined,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        required: isRequired && validationBehavior === 'native',\n        'aria-required': (isRequired && validationBehavior === 'aria') || undefined,\n        'aria-invalid': isInvalid || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        'aria-controls': props['aria-controls'],\n        value,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value),\n        autoComplete: props.autoComplete,\n        autoCapitalize: props.autoCapitalize,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n        autoCorrect: props.autoCorrect,\n        spellCheck: props.spellCheck,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}