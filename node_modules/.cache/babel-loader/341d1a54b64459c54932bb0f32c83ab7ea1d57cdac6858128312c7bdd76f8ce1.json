{"ast":null,"code":"import { mergeProps as $3Hzop$mergeProps } from \"@react-aria/utils\";\nimport { useComboBox as $3Hzop$useComboBox } from \"@react-aria/combobox\";\nimport { useSearchField as $3Hzop$useSearchField } from \"@react-aria/searchfield\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c04f11f368135585$export$da7ade746446be1f(props, state) {\n  let {\n    popoverRef: popoverRef,\n    inputRef: inputRef,\n    listBoxRef: listBoxRef,\n    keyboardDelegate: keyboardDelegate,\n    layoutDelegate: layoutDelegate,\n    onSubmit = () => {},\n    onClear: onClear,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    isInvalid: isInvalid,\n    validationState: validationState,\n    validationBehavior: validationBehavior,\n    isRequired: isRequired,\n    ...otherProps\n  } = props;\n  let {\n    inputProps: inputProps,\n    clearButtonProps: clearButtonProps\n  } = (0, $3Hzop$useSearchField)({\n    ...otherProps,\n    value: state.inputValue,\n    onChange: state.setInputValue,\n    autoComplete: 'off',\n    onClear: () => {\n      state.setInputValue('');\n      if (onClear) onClear();\n    },\n    onSubmit: value => {\n      // Prevent submission from search field if menu item was selected\n      if (state.selectionManager.focusedKey === null) onSubmit(value, null);\n    },\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp\n  }, {\n    value: state.inputValue,\n    setValue: state.setInputValue\n  }, inputRef);\n  let {\n    listBoxProps: listBoxProps,\n    labelProps: labelProps,\n    inputProps: comboBoxInputProps,\n    ...validation\n  } = (0, $3Hzop$useComboBox)({\n    ...otherProps,\n    keyboardDelegate: keyboardDelegate,\n    layoutDelegate: layoutDelegate,\n    popoverRef: popoverRef,\n    listBoxRef: listBoxRef,\n    inputRef: inputRef,\n    onFocus: undefined,\n    onFocusChange: undefined,\n    onBlur: undefined,\n    onKeyDown: undefined,\n    onKeyUp: undefined,\n    isInvalid: isInvalid,\n    validationState: validationState,\n    validationBehavior: validationBehavior,\n    isRequired: isRequired,\n    validate: undefined\n  }, state);\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $3Hzop$mergeProps)(inputProps, comboBoxInputProps),\n    listBoxProps: listBoxProps,\n    clearButtonProps: clearButtonProps,\n    ...validation\n  };\n}\nexport { $c04f11f368135585$export$da7ade746446be1f as useSearchAutocomplete };","map":{"version":3,"names":["$c04f11f368135585$export$da7ade746446be1f","props","state","popoverRef","inputRef","listBoxRef","keyboardDelegate","layoutDelegate","onSubmit","onClear","onKeyDown","onKeyUp","isInvalid","validationState","validationBehavior","isRequired","otherProps","inputProps","clearButtonProps","$3Hzop$useSearchField","value","inputValue","onChange","setInputValue","autoComplete","selectionManager","focusedKey","setValue","listBoxProps","labelProps","comboBoxInputProps","validation","$3Hzop$useComboBox","onFocus","undefined","onFocusChange","onBlur","validate","$3Hzop$mergeProps"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\autocomplete\\dist\\packages\\@react-aria\\autocomplete\\src\\useSearchAutocomplete.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaListBoxOptions} from '@react-aria/listbox';\nimport {AriaSearchAutocompleteProps} from '@react-types/autocomplete';\nimport {ComboBoxState} from '@react-stately/combobox';\nimport {DOMAttributes, KeyboardDelegate, LayoutDelegate, RefObject, ValidationResult} from '@react-types/shared';\nimport {InputHTMLAttributes} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {useComboBox} from '@react-aria/combobox';\nimport {useSearchField} from '@react-aria/searchfield';\n\nexport interface SearchAutocompleteAria<T> extends ValidationResult {\n  /** Props for the label element. */\n  labelProps: DOMAttributes,\n  /** Props for the search input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the list box, to be passed to [useListBox](useListBox.html). */\n  listBoxProps: AriaListBoxOptions<T>,\n  /** Props for the search input's clear button. */\n  clearButtonProps: AriaButtonProps,\n  /** Props for the search autocomplete description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the search autocomplete error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\nexport interface AriaSearchAutocompleteOptions<T> extends AriaSearchAutocompleteProps<T> {\n  /** The ref for the input element. */\n  inputRef: RefObject<HTMLInputElement | null>,\n  /** The ref for the list box popover. */\n  popoverRef: RefObject<HTMLDivElement | null>,\n  /** The ref for the list box. */\n  listBoxRef: RefObject<HTMLElement | null>,\n  /** An optional keyboard delegate implementation, to override the default. */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate\n}\n\n/**\n * Provides the behavior and accessibility implementation for a search autocomplete component.\n * A search autocomplete combines a combobox with a searchfield, allowing users to filter a list of options to items matching a query.\n * @param props - Props for the search autocomplete.\n * @param state - State for the search autocomplete, as returned by `useSearchAutocomplete`.\n */\nexport function useSearchAutocomplete<T>(props: AriaSearchAutocompleteOptions<T>, state: ComboBoxState<T>): SearchAutocompleteAria<T> {\n  let {\n    popoverRef,\n    inputRef,\n    listBoxRef,\n    keyboardDelegate,\n    layoutDelegate,\n    onSubmit = () => {},\n    onClear,\n    onKeyDown,\n    onKeyUp,\n    isInvalid,\n    validationState,\n    validationBehavior,\n    isRequired,\n    ...otherProps\n  } = props;\n\n  let {inputProps, clearButtonProps} = useSearchField({\n    ...otherProps,\n    value: state.inputValue,\n    onChange: state.setInputValue,\n    autoComplete: 'off',\n    onClear: () => {\n      state.setInputValue('');\n      if (onClear) {\n        onClear();\n      }\n    },\n    onSubmit: (value) => {\n      // Prevent submission from search field if menu item was selected\n      if (state.selectionManager.focusedKey === null) {\n        onSubmit(value, null);\n      }\n    },\n    onKeyDown,\n    onKeyUp\n  }, {\n    value: state.inputValue,\n    setValue: state.setInputValue\n  }, inputRef);\n\n\n  let {listBoxProps, labelProps, inputProps: comboBoxInputProps, ...validation} = useComboBox(\n    {\n      ...otherProps,\n      keyboardDelegate,\n      layoutDelegate,\n      popoverRef,\n      listBoxRef,\n      inputRef,\n      onFocus: undefined,\n      onFocusChange: undefined,\n      onBlur: undefined,\n      onKeyDown: undefined,\n      onKeyUp: undefined,\n      isInvalid,\n      validationState,\n      validationBehavior,\n      isRequired,\n      validate: undefined\n    },\n    state\n  );\n\n  return {\n    labelProps,\n    inputProps: mergeProps(inputProps, comboBoxInputProps),\n    listBoxProps,\n    clearButtonProps,\n    ...validation\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA4DO,SAASA,0CAAyBC,KAAuC,EAAEC,KAAuB;EACvG,IAAI;IAAAC,UAAA,EACFA,UAAU;IAAAC,QAAA,EACVA,QAAQ;IAAAC,UAAA,EACRA,UAAU;IAAAC,gBAAA,EACVA,gBAAgB;IAAAC,cAAA,EAChBA,cAAc;IACdC,QAAA,GAAWA,CAAA,MAAO;IAAAC,OAAA,EAClBA,OAAO;IAAAC,SAAA,EACPA,SAAS;IAAAC,OAAA,EACTA,OAAO;IAAAC,SAAA,EACPA,SAAS;IAAAC,eAAA,EACTA,eAAe;IAAAC,kBAAA,EACfA,kBAAkB;IAAAC,UAAA,EAClBA,UAAU;IACV,GAAGC;EAAA,CACJ,GAAGf,KAAA;EAEJ,IAAI;IAAAgB,UAAA,EAACA,UAAU;IAAAC,gBAAA,EAAEA;EAAgB,CAAC,GAAG,IAAAC,qBAAa,EAAE;IAClD,GAAGH,UAAU;IACbI,KAAA,EAAOlB,KAAA,CAAMmB,UAAU;IACvBC,QAAA,EAAUpB,KAAA,CAAMqB,aAAa;IAC7BC,YAAA,EAAc;IACdf,OAAA,EAASA,CAAA;MACPP,KAAA,CAAMqB,aAAa,CAAC;MACpB,IAAId,OAAA,EACFA,OAAA;IAEJ;IACAD,QAAA,EAAWY,KAAA;MACT;MACA,IAAIlB,KAAA,CAAMuB,gBAAgB,CAACC,UAAU,KAAK,MACxClB,QAAA,CAASY,KAAA,EAAO;IAEpB;eACAV,SAAA;aACAC;EACF,GAAG;IACDS,KAAA,EAAOlB,KAAA,CAAMmB,UAAU;IACvBM,QAAA,EAAUzB,KAAA,CAAMqB;EAClB,GAAGnB,QAAA;EAGH,IAAI;IAAAwB,YAAA,EAACA,YAAY;IAAAC,UAAA,EAAEA,UAAU;IAAEZ,UAAA,EAAYa,kBAAkB;IAAE,GAAGC;EAAA,CAAW,GAAG,IAAAC,kBAAU,EACxF;IACE,GAAGhB,UAAU;sBACbV,gBAAA;oBACAC,cAAA;gBACAJ,UAAA;gBACAE,UAAA;cACAD,QAAA;IACA6B,OAAA,EAASC,SAAA;IACTC,aAAA,EAAeD,SAAA;IACfE,MAAA,EAAQF,SAAA;IACRxB,SAAA,EAAWwB,SAAA;IACXvB,OAAA,EAASuB,SAAA;eACTtB,SAAA;qBACAC,eAAA;wBACAC,kBAAA;gBACAC,UAAA;IACAsB,QAAA,EAAUH;EACZ,GACAhC,KAAA;EAGF,OAAO;gBACL2B,UAAA;IACAZ,UAAA,EAAY,IAAAqB,iBAAS,EAAErB,UAAA,EAAYa,kBAAA;kBACnCF,YAAA;sBACAV,gBAAA;IACA,GAAGa;EACL;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}