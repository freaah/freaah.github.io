{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"channel\", \"colorSpace\", \"value\", \"defaultValue\", \"onChange\", \"locale\"];\nimport { normalizeColor as $799cddbef784668f$export$4cde5df63f53f473, parseColor as $799cddbef784668f$export$6e865ea70d7724f } from \"./Color.mjs\";\nimport { useSliderState as $1Eavr$useSliderState } from \"@react-stately/slider\";\nimport { useControlledState as $1Eavr$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $1Eavr$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {\n  let {\n      channel: channel,\n      colorSpace: colorSpace,\n      value: value,\n      defaultValue: defaultValue,\n      onChange: onChange,\n      locale: locale\n    } = props,\n    otherProps = _objectWithoutProperties(props, _excluded);\n  if (value == null && defaultValue == null) throw new Error('useColorSliderState requires a value or defaultValue');\n  if (value) value = (0, $799cddbef784668f$export$4cde5df63f53f473)(value);\n  if (defaultValue) defaultValue = (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue);\n  // safe to cast value and defaultValue to Color, one of them will always be defined because if neither are, we throw an error\n  let [colorValue, setColor] = (0, $1Eavr$useControlledState)(value, defaultValue, onChange);\n  let color = (0, $1Eavr$useMemo)(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [colorValue, colorSpace]);\n  let sliderState = (0, $1Eavr$useSliderState)(_objectSpread(_objectSpread(_objectSpread({}, color.getChannelRange(channel)), otherProps), {}, {\n    // Unused except in getThumbValueLabel, which is overridden below. null to localize the TypeScript error for ignoring.\n    // @ts-ignore\n    numberFormatter: null,\n    value: color.getChannelValue(channel),\n    onChange(v) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd(v) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) props.onChangeEnd(color.withChannelValue(channel, v));\n    }\n  }));\n  let {\n    step: step,\n    pageSize: pageSize\n  } = color.getChannelRange(channel);\n  return _objectSpread(_objectSpread({}, sliderState), {}, {\n    value: color,\n    setValue(value) {\n      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return (0, $799cddbef784668f$export$6e865ea70d7724f)(\"hsl(\".concat(color.getChannelValue('hue'), \", 100%, 50%)\"));\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha':\n          return color;\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step: step,\n    pageSize: pageSize,\n    isDragging: sliderState.isThumbDragging(0)\n  });\n}\nexport { $25a25ac0d1624665$export$57bc203e1c9c6d44 as useColorSliderState };","map":{"version":3,"names":["$25a25ac0d1624665$export$57bc203e1c9c6d44","props","channel","colorSpace","value","defaultValue","onChange","locale","otherProps","_objectWithoutProperties","_excluded","Error","$799cddbef784668f$export$4cde5df63f53f473","colorValue","setColor","$1Eavr$useControlledState","color","$1Eavr$useMemo","toFormat","sliderState","$1Eavr$useSliderState","_objectSpread","getChannelRange","numberFormatter","getChannelValue","v","withChannelValue","onChangeEnd","step","pageSize","setValue","getDisplayColor","$799cddbef784668f$export$6e865ea70d7724f","concat","getThumbValueLabel","formatChannelValue","isDragging","isThumbDragging"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-stately\\color\\dist\\packages\\@react-stately\\color\\src\\useColorSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorSliderProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {SliderState, useSliderState} from '@react-stately/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface ColorSliderState extends SliderState {\n  /** The current color value represented by the color slider. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n  /** Returns the color that should be displayed in the slider instead of `value` or the optional parameter. */\n  getDisplayColor(): Color,\n  /** Whether the color slider is currently being dragged. */\n  readonly isDragging: boolean\n}\n\n\nexport interface ColorSliderStateOptions extends ColorSliderProps {\n  /** The locale to use for formatting the color channel value. */\n  locale: string\n}\n\n/**\n * Provides state management for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSliderState(props: ColorSliderStateOptions): ColorSliderState {\n  let {channel, colorSpace, value, defaultValue, onChange, locale, ...otherProps} = props;\n  if (value == null && defaultValue == null) {\n    throw new Error('useColorSliderState requires a value or defaultValue');\n  }\n\n  if (value) {\n    value = normalizeColor(value);\n  }\n  if (defaultValue) {\n    defaultValue = normalizeColor(defaultValue);\n  }\n  // safe to cast value and defaultValue to Color, one of them will always be defined because if neither are, we throw an error\n  let [colorValue, setColor] = useControlledState<Color>(value as Color, defaultValue as Color, onChange);\n  let color = useMemo(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [colorValue, colorSpace]);\n  let sliderState = useSliderState({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to localize the TypeScript error for ignoring.\n    // @ts-ignore\n    numberFormatter: null,\n    value: color.getChannelValue(channel),\n    onChange(v) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd(v) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) {\n        props.onChangeEnd(color.withChannelValue(channel, v));\n      }\n    }\n  });\n\n  let {step, pageSize} = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return parseColor(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha': {\n          return color;\n        }\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step,\n    pageSize,\n    isDragging: sliderState.isThumbDragging(0)\n  };\n}\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAuCO,SAASA,0CAAoBC,KAA8B;EAChE,IAAI;MAAAC,OAAA,EAACA,OAAO;MAAAC,UAAA,EAAEA,UAAU;MAAAC,KAAA,EAAEA,KAAK;MAAAC,YAAA,EAAEA,YAAY;MAAAC,QAAA,EAAEA,QAAQ;MAAAC,MAAA,EAAEA;IAAW,CAAW,GAAGN,KAAA;IAAdO,UAAA,GAAAC,wBAAA,CAAcR,KAAA,EAAAS,SAAA;EAClF,IAAIN,KAAA,IAAS,QAAQC,YAAA,IAAgB,MACnC,MAAM,IAAIM,KAAA,CAAM;EAGlB,IAAIP,KAAA,EACFA,KAAA,GAAQ,IAAAQ,yCAAa,EAAER,KAAA;EAEzB,IAAIC,YAAA,EACFA,YAAA,GAAe,IAAAO,yCAAa,EAAEP,YAAA;EAEhC;EACA,IAAI,CAACQ,UAAA,EAAYC,QAAA,CAAS,GAAG,IAAAC,yBAAiB,EAASX,KAAA,EAAgBC,YAAA,EAAuBC,QAAA;EAC9F,IAAIU,KAAA,GAAQ,IAAAC,cAAM,EAAE,MAAMd,UAAA,IAAcU,UAAA,GAAaA,UAAA,CAAWK,QAAQ,CAACf,UAAA,IAAcU,UAAA,EAAY,CAACA,UAAA,EAAYV,UAAA,CAAW;EAC3H,IAAIgB,WAAA,GAAc,IAAAC,qBAAa,EAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAC1BL,KAAA,CAAMM,eAAe,CAACpB,OAAA,CAAQ,GAC9BM,UAAU;IACb;IACA;IACAe,eAAA,EAAiB;IACjBnB,KAAA,EAAOY,KAAA,CAAMQ,eAAe,CAACtB,OAAA;IAC7BI,SAASmB,CAAC;MACRX,QAAA,CAASE,KAAA,CAAMU,gBAAgB,CAACxB,OAAA,EAASuB,CAAA;IAC3C;IACAE,YAAYF,CAAC;MACX;MACA,IAAIxB,KAAA,CAAM0B,WAAW,EACnB1B,KAAA,CAAM0B,WAAW,CAACX,KAAA,CAAMU,gBAAgB,CAACxB,OAAA,EAASuB,CAAA;IAEtD;EAAA,EACF;EAEA,IAAI;IAAAG,IAAA,EAACA,IAAI;IAAAC,QAAA,EAAEA;EAAQ,CAAC,GAAGb,KAAA,CAAMM,eAAe,CAACpB,OAAA;EAC7C,OAAAmB,aAAA,CAAAA,aAAA,KACKF,WAAW;IACdf,KAAA,EAAOY,KAAA;IACPc,SAAS1B,KAAK;MACZU,QAAA,CAAS,IAAAF,yCAAa,EAAER,KAAA;IAC1B;IACA2B,gBAAA;MACE,QAAQ7B,OAAA;QACN,KAAK;UACH,OAAO,IAAA8B,wCAAS,SAAAC,MAAA,CAASjB,KAAA,CAAMQ,eAAe,CAAC,uBAAoB;QACrE,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;UACH,OAAOR,KAAA,CAAMU,gBAAgB,CAAC,SAAS;QACzC,KAAK;UACH,OAAOV,KAAA;QAET;UACE,MAAM,IAAIL,KAAA,CAAM,4BAA4BT,OAAA;MAChD;IACF;IACAgC,mBAAA;MACE,OAAOlB,KAAA,CAAMmB,kBAAkB,CAACjC,OAAA,EAASK,MAAA;IAC3C;UACAqB,IAAA;cACAC,QAAA;IACAO,UAAA,EAAYjB,WAAA,CAAYkB,eAAe,CAAC;EAAA;AAE5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}