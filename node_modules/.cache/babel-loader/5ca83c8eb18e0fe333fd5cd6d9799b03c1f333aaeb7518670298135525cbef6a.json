{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"register\"],\n  _excluded2 = [\"onPress\", \"onPressChange\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"isDisabled\", \"isPressed\", \"preventFocusOnPress\", \"shouldCancelOnPointerExit\", \"allowTextSelectionOnPress\", \"ref\"];\nimport { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5 } from \"./context.mjs\";\nimport { _ as $7mdmh$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $7mdmh$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $7mdmh$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, getOwnerWindow as $7mdmh$getOwnerWindow } from \"@react-aria/utils\";\nimport { useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n        register: register\n      } = context,\n      contextProps = _objectWithoutProperties(context, _excluded);\n    props = (0, $7mdmh$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $7mdmh$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n  continuePropagation() {\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n  }\n  get shouldStopPropagation() {\n    return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n  }\n  constructor(type, pointerType, originalEvent, state) {\n    (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    var _state_target;\n    let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;\n    const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();\n    let x,\n      y = 0;\n    let clientX,\n      clientY = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let _$f6c31cce2adf654f$va = $f6c31cce2adf654f$var$usePressResponderContext(props),\n    {\n      onPress: onPress,\n      onPressChange: onPressChange,\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressUp: onPressUp,\n      isDisabled: isDisabled,\n      isPressed: isPressedProp,\n      preventFocusOnPress: preventFocusOnPress,\n      shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n      allowTextSelectionOnPress: allowTextSelectionOnPress,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ref: _\n    } = _$f6c31cce2adf654f$va,\n    domProps = _objectWithoutProperties(_$f6c31cce2adf654f$va, _excluded2);\n  let [isPressed, setPressed] = (0, $7mdmh$useState)(false);\n  let ref = (0, $7mdmh$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $7mdmh$useGlobalListeners)();\n  let triggerPressStart = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) return false;\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  let triggerPressEnd = (0, $7mdmh$useEffectEvent)(function (originalEvent, pointerType) {\n    let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let state = ref.current;\n    if (!state.didFirePressStart) return false;\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  let triggerPressUp = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled) return false;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  let cancel = (0, $7mdmh$useEffectEvent)(e => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n    }\n  });\n  let cancelOnPointerExit = (0, $7mdmh$useEffectEvent)(e => {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  let pressProps = (0, $7mdmh$useMemo)(() => {\n    let state = ref.current;\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          var _state_metaKeyEvents;\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = e => {\n              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n            };\n            addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'keyup', (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === 'Meta') state.metaKeyEvents = new Map();\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    let onKeyUp = e => {\n      var _state_metaKeyEvents;\n      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $7mdmh$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        var _state_target;\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));\n      }\n    };\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          // Release pointer capture so that touch interactions can leave the original target.\n          // This enables onPointerLeave and onPointerEnter to fire.\n          let target = e.target;\n          if ('releasePointerCapture' in target) target.releasePointerCapture(e.pointerId);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;\n        // Only handle left clicks\n        if (e.button === 0) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      pressProps.onPointerEnter = e => {\n        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = true;\n          triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n        }\n      };\n      pressProps.onPointerLeave = e => {\n        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if (state.target.contains(e.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n          // Prevent subsequent touchend event from triggering onClick on unrelated elements on Android. See below.\n          // Both 'touch' and 'pen' pointerTypes trigger onTouchEnd, but 'mouse' does not.\n          if ('ontouchend' in state.target && e.pointerType !== 'mouse') addGlobalListener(state.target, 'touchend', onTouchEnd, {\n            once: true\n          });\n        }\n      };\n      // This is a workaround for an Android Chrome/Firefox issue where click events are fired on an incorrect element\n      // if the original target is removed during onPointerUp (before onClick).\n      // https://github.com/adobe/react-spectrum/issues/1513\n      // https://issues.chromium.org/issues/40732224\n      // Note: this event must be registered directly on the element, not via React props in order to work.\n      // https://github.com/facebook/react/issues/9809\n      let onTouchEnd = e => {\n        // Don't preventDefault if we actually want the default (e.g. submit/link click).\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultUp(e.currentTarget)) e.preventDefault();\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultDown(e.currentTarget)) e.preventDefault();\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), 'scroll', onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  (0, $7mdmh$useEffect)(() => {\n    return () => {\n      var _ref_current_target;\n      if (!allowTextSelectionOnPress)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) &&\n  // Links should only trigger with Enter key\n  !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createTouchEvent(target, e) {\n  let clientX = 0;\n  let clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  let clientX = e.clientX;\n  let clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) offsetX = point.width / 2;else if (point.radiusX !== undefined) offsetX = point.radiusX;\n  if (point.height !== undefined) offsetY = point.height / 2;else if (point.radiusY !== undefined) offsetY = point.radiusY;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultDown(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultUp(target) {\n  if (target instanceof HTMLInputElement) return false;\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  return $f6c31cce2adf654f$var$shouldPreventDefaultUp(target);\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nexport { $f6c31cce2adf654f$export$45712eceda6fad21 as usePress };","map":{"version":3,"names":["$f6c31cce2adf654f$var$usePressResponderContext","props","context","$7mdmh$useContext","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","register","contextProps","_objectWithoutProperties","_excluded","$7mdmh$mergeProps","$7mdmh$useSyncRef","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","WeakMap","$f6c31cce2adf654f$var$PressEvent","continuePropagation","shouldStopPropagation","$7mdmh$_","constructor","type","pointerType","originalEvent","state","$7mdmh$_1","_state_target","currentTarget","target","rect","getBoundingClientRect","x","y","clientX","clientY","left","top","width","height","shiftKey","metaKey","ctrlKey","altKey","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","_$f6c31cce2adf654f$va","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","_excluded2","setPressed","$7mdmh$useState","$7mdmh$useRef","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$7mdmh$useGlobalListeners","triggerPressStart","$7mdmh$useEffectEvent","current","event","triggerPressEnd","wasPressed","arguments","length","undefined","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","$14c0b72509d70225$export$b0d6fa1ab32e3295","cancelOnPointerExit","pressProps","$7mdmh$useMemo","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","_state_metaKeyEvents","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","repeat","originalTarget","pressUp","$7mdmh$getOwnerDocument","$7mdmh$chain","onKeyUp","stopPropagation","$7mdmh$isMac","metaKeyEvents","set","Map","onClick","button","$7mdmh$openLink","isOpening","$7mdmh$isVirtualClick","$7mdmh$focusWithoutScrolling","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","delete","size","events","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$7mdmh$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefaultDown","pointerId","$14c0b72509d70225$export$16a4697467175487","releasePointerCapture","onPointerUp","onPointerCancel","onMouseDown","onPointerEnter","onPointerLeave","onTouchEnd","once","$f6c31cce2adf654f$var$shouldPreventDefaultUp","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","$f6c31cce2adf654f$var$isOverTarget","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","$f6c31cce2adf654f$var$createTouchEvent","$7mdmh$getOwnerWindow","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchCancel","$7mdmh$useEffect","_ref_current_target","tagName","hasAttribute","code","element","role","getAttribute","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","radiusX","radiusY","right","bottom","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","pointRect","HTMLElement","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","has"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\usePress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {chain, focusWithoutScrolling, getOwnerDocument, getOwnerWindow, isMac, isVirtualClick, isVirtualPointerEvent, mergeProps, openLink, useEffectEvent, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PressEvent as IPressEvent, PointerType, PressEvents, RefObject} from '@react-types/shared';\nimport {PressResponderContext} from './context';\nimport {TouchEvent as RTouchEvent, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element | null>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  isTriggeringEvent: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType | null,\n  userSelect?: string,\n  metaKeyEvents?: Map<string, KeyboardEvent>\n}\n\ninterface EventBase {\n  currentTarget: EventTarget | null,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean,\n  clientX?: number,\n  clientY?: number,\n  targetTouches?: Array<{clientX?: number, clientY?: number}>\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\nclass PressEvent implements IPressEvent {\n  type: IPressEvent['type'];\n  pointerType: PointerType;\n  target: Element;\n  shiftKey: boolean;\n  ctrlKey: boolean;\n  metaKey: boolean;\n  altKey: boolean;\n  x: number;\n  y: number;\n  #shouldStopPropagation = true;\n\n  constructor(type: IPressEvent['type'], pointerType: PointerType, originalEvent: EventBase, state?: PressState) {\n    let currentTarget = state?.target ?? originalEvent.currentTarget;\n    const rect: DOMRect | undefined = (currentTarget as Element)?.getBoundingClientRect();\n    let x, y = 0;\n    let clientX, clientY: number | null = null;\n    if (originalEvent.clientX != null && originalEvent.clientY != null) {\n      clientX = originalEvent.clientX;\n      clientY = originalEvent.clientY;\n    }\n    if (rect) {\n      if (clientX != null && clientY != null) {\n        x = clientX - rect.left;\n        y = clientY - rect.top;\n      } else {\n        x = rect.width / 2;\n        y = rect.height / 2;\n      }\n    }\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget as Element;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n    this.x = x;\n    this.y = y;\n  }\n\n  continuePropagation() {\n    this.#shouldStopPropagation = false;\n  }\n\n  get shouldStopPropagation() {\n    return this.#shouldStopPropagation;\n  }\n}\n\nconst LINK_CLICKED = Symbol('linkClicked');\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let triggerPressStart = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) {\n      return false;\n    }\n\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new PressEvent('pressstart', pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(true);\n    }\n\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n\n  let triggerPressEnd = useEffectEvent((originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n    let state = ref.current;\n    if (!state.didFirePressStart) {\n      return false;\n    }\n\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new PressEvent('pressend', pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n\n    if (onPressChange) {\n      onPressChange(false);\n    }\n\n    setPressed(false);\n\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new PressEvent('press', pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation &&= event.shouldStopPropagation;\n    }\n\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n\n  let triggerPressUp = useEffectEvent((originalEvent: EventBase, pointerType: PointerType) => {\n    let state = ref.current;\n    if (isDisabled) {\n      return false;\n    }\n\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new PressEvent('pressup', pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n\n    return true;\n  });\n\n  let cancel = useEffectEvent((e: EventBase) => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) {\n        triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n      }\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(state.target);\n      }\n    }\n  });\n\n  let cancelOnPointerExit = useEffectEvent((e: EventBase) => {\n    if (shouldCancelOnPointerExit) {\n      cancel(e);\n    }\n  });\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = (e) => {\n              if (isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target as Element) && state.target) {\n                triggerPressUp(createEvent(state.target, e), 'keyboard');\n              }\n            };\n\n            addGlobalListener(getOwnerDocument(e.currentTarget), 'keyup', chain(pressUp, onKeyUp), true);\n          }\n\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && isMac()) {\n            state.metaKeyEvents?.set(e.key, e.nativeEvent);\n          }\n        } else if (e.key === 'Meta') {\n          state.metaKeyEvents = new Map();\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(openLink as any).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            let stopPressStart = triggerPressStart(e, 'virtual');\n            let stopPressUp = triggerPressUp(e, 'virtual');\n            let stopPressEnd = triggerPressEnd(e, 'virtual');\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) {\n            e.stopPropagation();\n          }\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && state.target && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== 'Enter' && isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[LINK_CLICKED] = true;\n          openLink(state.target, e, false);\n        }\n\n        state.isPressed = false;\n        state.metaKeyEvents?.delete(e.key);\n      } else if (e.key === 'Meta' && state.metaKeyEvents?.size) {\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) {\n          state.target?.dispatchEvent(new KeyboardEvent('keyup', event));\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefaultDown(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n\n          // Release pointer capture so that touch interactions can leave the original target.\n          // This enables onPointerLeave and onPointerEnter to fire.\n          let target = e.target as Element;\n          if ('releasePointerCapture' in target) {\n            target.releasePointerCapture(e.pointerId);\n          }\n\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointerup', onPointerUp, false);\n          addGlobalListener(getOwnerDocument(e.currentTarget), 'pointercancel', onPointerCancel, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefaultDown(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        if (e.button === 0) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      pressProps.onPointerEnter = (e) => {\n        if (e.pointerId === state.activePointerId && state.target && !state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = true;\n          triggerPressStart(createEvent(state.target, e), state.pointerType);\n        }\n      };\n\n      pressProps.onPointerLeave = (e) => {\n        if (e.pointerId === state.activePointerId && state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if (state.target.contains(e.target as Element) && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget && state.pointerType != null) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n\n          // Prevent subsequent touchend event from triggering onClick on unrelated elements on Android. See below.\n          // Both 'touch' and 'pen' pointerTypes trigger onTouchEnd, but 'mouse' does not.\n          if ('ontouchend' in state.target && e.pointerType !== 'mouse') {\n            addGlobalListener(state.target, 'touchend', onTouchEnd, {once: true});\n          }\n        }\n      };\n\n      // This is a workaround for an Android Chrome/Firefox issue where click events are fired on an incorrect element\n      // if the original target is removed during onPointerUp (before onClick).\n      // https://github.com/adobe/react-spectrum/issues/1513\n      // https://issues.chromium.org/issues/40732224\n      // Note: this event must be registered directly on the element, not via React props in order to work.\n      // https://github.com/facebook/react/issues/9809\n      let onTouchEnd = (e: TouchEvent) => {\n        // Don't preventDefault if we actually want the default (e.g. submit/link click).\n        if (shouldPreventDefaultUp(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefaultDown(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerDocument(e.currentTarget), 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType || 'mouse');\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (state.target && isOverTarget(e, state.target) && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        let shouldStopPropagation = triggerPressStart(createTouchEvent(state.target, e), state.pointerType);\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        addGlobalListener(getOwnerWindow(e.currentTarget), 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(createTouchEvent(state.target!, e), state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n          cancelOnPointerExit(createTouchEvent(state.target!, e));\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(createTouchEvent(state.target!, e), state.pointerType);\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) {\n          shouldStopPropagation = triggerPressEnd(createTouchEvent(state.target!, e), state.pointerType, false);\n        }\n\n        if (shouldStopPropagation) {\n          e.stopPropagation();\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(createTouchEvent(state.target!, e));\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [\n    addGlobalListener,\n    isDisabled,\n    preventFocusOnPress,\n    removeAllGlobalListeners,\n    allowTextSelectionOnPress,\n    cancel,\n    cancelOnPointerExit,\n    triggerPressEnd,\n    triggerPressStart,\n    triggerPressUp\n  ]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target ?? undefined);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): target is HTMLAnchorElement {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof getOwnerWindow(element).HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof getOwnerWindow(element).HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // Links should only trigger with Enter key\n    !((role === 'link' || (!role && isHTMLAnchorLink(element))) && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createTouchEvent(target: FocusableElement, e: RTouchEvent<FocusableElement>): EventBase {\n  let clientX = 0;\n  let clientY = 0;\n  if (e.targetTouches && e.targetTouches.length === 1) {\n    clientX = e.targetTouches[0].clientX;\n    clientY = e.targetTouches[0].clientY;\n  }\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  let clientX = e.clientX;\n  let clientY = e.clientY;\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey,\n    clientX,\n    clientY\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) {\n    offsetX = (point.width / 2);\n  } else if (point.radiusX !== undefined) {\n    offsetX = point.radiusX;\n  }\n  if (point.height !== undefined) {\n    offsetY = (point.height / 2);\n  } else if (point.radiusY !== undefined) {\n    offsetY = point.radiusY;\n  }\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefaultDown(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');\n}\n\nfunction shouldPreventDefaultUp(target: Element) {\n  if (target instanceof HTMLInputElement) {\n    return false;\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit' && target.type !== 'reset';\n  }\n\n  if (isHTMLAnchorLink(target)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  return shouldPreventDefaultUp(target);\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}