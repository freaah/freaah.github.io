{"ast":null,"code":"import { usePlasmicLink } from '@plasmicapp/host';\nimport React from 'react';\nimport { mergeProps, useLink, useHover, useFocusRing } from 'react-aria';\nimport { Button } from 'react-aria-components';\nimport { C as COMMON_STYLES, g as getCommonProps } from './common-ceebbaea.esm.js';\nimport { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';\nimport { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';\nimport '@plasmicapp/host/registerComponent';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst BUTTON_VARIANTS = [\"hovered\", \"pressed\", \"focused\", \"focusVisible\", \"disabled\"];\nconst {\n  variants,\n  withObservedValues\n} = pickAriaComponentVariants(BUTTON_VARIANTS);\nconst BaseButton = React.forwardRef(function BaseButtonInner(props, ref) {\n  const {\n    href\n  } = props;\n  if (href) {\n    return /* @__PURE__ */React.createElement(LinkButton, {\n      props,\n      ref\n    });\n  } else {\n    const _a = props,\n      {\n        submitsForm,\n        resetsForm,\n        children,\n        plasmicUpdateVariant\n      } = _a,\n      rest = __objRest(_a, [\"submitsForm\", \"resetsForm\", \"children\", \"plasmicUpdateVariant\"]);\n    const type = submitsForm ? \"submit\" : resetsForm ? \"reset\" : \"button\";\n    const buttonProps = mergeProps(rest, {\n      type,\n      style: COMMON_STYLES,\n      ref\n    });\n    return /* @__PURE__ */React.createElement(Button, __spreadValues({}, buttonProps), ({\n      isHovered,\n      isPressed,\n      isFocused,\n      isFocusVisible,\n      isDisabled\n    }) => withObservedValues(children, {\n      hovered: isHovered,\n      pressed: isPressed,\n      focused: isFocused,\n      focusVisible: isFocusVisible,\n      disabled: isDisabled\n    }, plasmicUpdateVariant));\n  }\n});\nfunction LinkButton({\n  props,\n  ref\n}) {\n  const _a = props,\n    {\n      href,\n      children,\n      plasmicUpdateVariant\n    } = _a,\n    rest = __objRest(_a, [\"href\", \"children\", \"plasmicUpdateVariant\"]);\n  const PlasmicLink = usePlasmicLink();\n  const {\n    linkProps,\n    isPressed\n  } = useLink(props, ref);\n  const {\n    hoverProps,\n    isHovered\n  } = useHover(props);\n  const {\n    focusProps,\n    isFocused,\n    isFocusVisible\n  } = useFocusRing();\n  const combinedLinkProps = mergeProps(linkProps, hoverProps, focusProps, {\n    href,\n    className: props.className,\n    style: COMMON_STYLES,\n    ref\n  });\n  return /* @__PURE__ */React.createElement(PlasmicLink, __spreadProps(__spreadValues({}, combinedLinkProps), {\n    \"data-focused\": isFocused || void 0,\n    \"data-hovered\": isHovered || void 0,\n    \"data-pressed\": isPressed || void 0,\n    \"data-focus-visible\": isFocusVisible || void 0,\n    \"data-disabled\": props.isDisabled || void 0\n  }), withObservedValues(children, {\n    hovered: isHovered,\n    pressed: isPressed,\n    focused: isFocused,\n    focusVisible: isFocusVisible,\n    disabled: !!rest.isDisabled\n  }, plasmicUpdateVariant));\n}\nconst BUTTON_COMPONENT_NAME = makeComponentName(\"button\");\nfunction registerButton(loader, overrides) {\n  registerComponentHelper(loader, BaseButton, {\n    name: BUTTON_COMPONENT_NAME,\n    displayName: \"Aria Button\",\n    importPath: \"@plasmicpkgs/react-aria/skinny/registerButton\",\n    importName: \"BaseButton\",\n    variants,\n    defaultStyles: {\n      // Ensure consistent design across rendered elements (button, anchor tag).\n      backgroundColor: \"#EFEFEF\",\n      borderColor: \"black\",\n      borderStyle: \"solid\",\n      borderWidth: \"1px\",\n      color: \"#000000\",\n      cursor: \"pointer\",\n      fontFamily: \"Arial\",\n      fontSize: \"1rem\",\n      lineHeight: \"1.2\",\n      padding: \"2px 10px\",\n      textDecorationLine: \"none\"\n    },\n    props: __spreadProps(__spreadValues({}, getCommonProps(\"button\", [\"autoFocus\", \"isDisabled\", \"aria-label\"])), {\n      children: {\n        type: \"slot\",\n        mergeWithParent: true,\n        defaultValue: {\n          type: \"text\",\n          value: \"Button\"\n        }\n      },\n      href: {\n        type: \"href\",\n        description: \"The URL this button navigates to. If present, this button is an <a> element.\"\n      },\n      target: {\n        type: \"choice\",\n        options: [\"_blank\", \"_self\", \"_parent\", \"_top\"],\n        description: \"Same as target attribute of <a> element. Only applies when the href prop is present.\",\n        hidden: props => !props.href,\n        defaultValueHint: \"_self\"\n      },\n      submitsForm: {\n        type: \"boolean\",\n        displayName: \"Submits form?\",\n        defaultValueHint: false,\n        hidden: props => Boolean(props.resetsForm) || Boolean(props.href),\n        description: \"Whether clicking this button should submit the enclosing form.\",\n        advanced: true\n      },\n      resetsForm: {\n        type: \"boolean\",\n        displayName: \"Resets form?\",\n        defaultValueHint: false,\n        hidden: props => Boolean(props.submitsForm) || Boolean(props.href),\n        description: \"Whether clicking this button should reset the enclosing form.\",\n        advanced: true\n      },\n      onPress: {\n        type: \"eventHandler\",\n        argTypes: [{\n          name: \"event\",\n          type: \"object\"\n        }]\n      },\n      onFocus: {\n        type: \"eventHandler\",\n        argTypes: [{\n          name: \"event\",\n          type: \"object\"\n        }]\n      }\n    }),\n    trapsFocus: true\n  }, overrides);\n}\nexport { BUTTON_COMPONENT_NAME, BaseButton, registerButton };","map":{"version":3,"names":["BUTTON_VARIANTS","variants","withObservedValues","pickAriaComponentVariants","BaseButton","React","forwardRef","BaseButtonInner","props","ref","href","createElement","LinkButton","_a","submitsForm","resetsForm","children","plasmicUpdateVariant","rest","__objRest","type","buttonProps","mergeProps","style","COMMON_STYLES","Button","__spreadValues","isHovered","isPressed","isFocused","isFocusVisible","isDisabled","hovered","pressed","focused","focusVisible","disabled","PlasmicLink","usePlasmicLink","linkProps","useLink","hoverProps","useHover","focusProps","useFocusRing","combinedLinkProps","className","__spreadProps","BUTTON_COMPONENT_NAME","makeComponentName","registerButton","loader","overrides","registerComponentHelper","name","displayName","importPath","importName","defaultStyles","backgroundColor","borderColor","borderStyle","borderWidth","color","cursor","fontFamily","fontSize","lineHeight","padding","textDecorationLine","getCommonProps","mergeWithParent","defaultValue","value","description","target","options","hidden","defaultValueHint","Boolean","advanced","onPress","argTypes","onFocus","trapsFocus"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@plasmicpkgs\\react-aria\\src\\registerButton.tsx"],"sourcesContent":["import { usePlasmicLink } from \"@plasmicapp/host\";\nimport React from \"react\";\nimport { mergeProps, useFocusRing, useHover, useLink } from \"react-aria\";\nimport type { ButtonProps, LinkProps } from \"react-aria-components\";\nimport { Button } from \"react-aria-components\";\nimport { COMMON_STYLES, getCommonProps } from \"./common\";\nimport {\n  CodeComponentMetaOverrides,\n  makeComponentName,\n  Registerable,\n  registerComponentHelper,\n} from \"./utils\";\nimport { pickAriaComponentVariants, WithVariants } from \"./variant-utils\";\n\nconst BUTTON_VARIANTS = [\n  \"hovered\" as const,\n  \"pressed\" as const,\n  \"focused\" as const,\n  \"focusVisible\" as const,\n  \"disabled\" as const,\n];\n\nconst { variants, withObservedValues } =\n  pickAriaComponentVariants(BUTTON_VARIANTS);\n\ntype CommonProps = { children: React.ReactNode } & Omit<\n  ButtonProps,\n  \"className\" | \"children\"\n> &\n  Omit<LinkProps, \"className\" | \"children\">;\ntype LinkSpecificProps = Pick<LinkProps, \"href\" | \"target\">;\ntype ButtonSpecificProps = {\n  resetsForm?: boolean;\n  submitsForm?: boolean;\n};\n\ninterface BaseButtonProps\n  extends CommonProps,\n    LinkSpecificProps,\n    ButtonSpecificProps,\n    WithVariants<typeof BUTTON_VARIANTS> {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const BaseButton = React.forwardRef(function BaseButtonInner(\n  props: BaseButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>\n) {\n  const { href } = props;\n\n  if (href) {\n    return (\n      <LinkButton\n        props={props}\n        ref={ref as React.RefObject<HTMLAnchorElement>}\n      />\n    );\n  } else {\n    const { submitsForm, resetsForm, children, plasmicUpdateVariant, ...rest } =\n      props;\n    const type = submitsForm ? \"submit\" : resetsForm ? \"reset\" : \"button\";\n\n    const buttonProps = mergeProps(rest, {\n      type,\n      style: COMMON_STYLES,\n      ref: ref as React.Ref<HTMLButtonElement>,\n    });\n\n    return (\n      <Button {...buttonProps}>\n        {({ isHovered, isPressed, isFocused, isFocusVisible, isDisabled }) =>\n          withObservedValues(\n            children,\n            {\n              hovered: isHovered,\n              pressed: isPressed,\n              focused: isFocused,\n              focusVisible: isFocusVisible,\n              disabled: isDisabled,\n            },\n            plasmicUpdateVariant\n          )\n        }\n      </Button>\n    );\n  }\n});\n\nfunction LinkButton({\n  props,\n  ref,\n}: {\n  props: BaseButtonProps;\n  ref: React.RefObject<HTMLAnchorElement>;\n}) {\n  const { href, children, plasmicUpdateVariant, ...rest } = props;\n  const PlasmicLink = usePlasmicLink();\n  const { linkProps, isPressed } = useLink(props, ref);\n  const { hoverProps, isHovered } = useHover(props);\n  const { focusProps, isFocused, isFocusVisible } = useFocusRing();\n\n  const combinedLinkProps = mergeProps(linkProps, hoverProps, focusProps, {\n    href,\n    className: props.className,\n    style: COMMON_STYLES,\n    ref,\n  });\n\n  return (\n    <PlasmicLink\n      {...combinedLinkProps}\n      data-focused={isFocused || undefined}\n      data-hovered={isHovered || undefined}\n      data-pressed={isPressed || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-disabled={props.isDisabled || undefined}\n    >\n      {withObservedValues(\n        children,\n        {\n          hovered: isHovered,\n          pressed: isPressed,\n          focused: isFocused,\n          focusVisible: isFocusVisible,\n          disabled: !!rest.isDisabled,\n        },\n        plasmicUpdateVariant\n      )}\n    </PlasmicLink>\n  );\n}\n\nexport const BUTTON_COMPONENT_NAME = makeComponentName(\"button\");\n\nexport function registerButton(\n  loader?: Registerable,\n  overrides?: CodeComponentMetaOverrides<typeof BaseButton>\n) {\n  registerComponentHelper(\n    loader,\n    BaseButton,\n    {\n      name: BUTTON_COMPONENT_NAME,\n      displayName: \"Aria Button\",\n      importPath: \"@plasmicpkgs/react-aria/skinny/registerButton\",\n      importName: \"BaseButton\",\n      variants,\n      defaultStyles: {\n        // Ensure consistent design across rendered elements (button, anchor tag).\n        backgroundColor: \"#EFEFEF\",\n        borderColor: \"black\",\n        borderStyle: \"solid\",\n        borderWidth: \"1px\",\n        color: \"#000000\",\n        cursor: \"pointer\",\n        fontFamily: \"Arial\",\n        fontSize: \"1rem\",\n        lineHeight: \"1.2\",\n        padding: \"2px 10px\",\n        textDecorationLine: \"none\",\n      },\n      props: {\n        ...getCommonProps<BaseButtonProps>(\"button\", [\n          \"autoFocus\",\n          \"isDisabled\",\n          \"aria-label\",\n        ]),\n        children: {\n          type: \"slot\",\n          mergeWithParent: true,\n          defaultValue: {\n            type: \"text\",\n            value: \"Button\",\n          },\n        },\n        href: {\n          type: \"href\",\n          description:\n            \"The URL this button navigates to. If present, this button is an <a> element.\",\n        },\n        target: {\n          type: \"choice\",\n          options: [\"_blank\", \"_self\", \"_parent\", \"_top\"],\n          description:\n            \"Same as target attribute of <a> element. Only applies when the href prop is present.\",\n          hidden: (props) => !props.href,\n          defaultValueHint: \"_self\",\n        },\n        submitsForm: {\n          type: \"boolean\",\n          displayName: \"Submits form?\",\n          defaultValueHint: false,\n          hidden: (props) => Boolean(props.resetsForm) || Boolean(props.href),\n          description:\n            \"Whether clicking this button should submit the enclosing form.\",\n          advanced: true,\n        },\n        resetsForm: {\n          type: \"boolean\",\n          displayName: \"Resets form?\",\n          defaultValueHint: false,\n          hidden: (props) => Boolean(props.submitsForm) || Boolean(props.href),\n          description:\n            \"Whether clicking this button should reset the enclosing form.\",\n          advanced: true,\n        },\n        onPress: {\n          type: \"eventHandler\",\n          argTypes: [{ name: \"event\", type: \"object\" }],\n        },\n        onFocus: {\n          type: \"eventHandler\",\n          argTypes: [{ name: \"event\", type: \"object\" }],\n        },\n      },\n      trapsFocus: true,\n    },\n    overrides\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}