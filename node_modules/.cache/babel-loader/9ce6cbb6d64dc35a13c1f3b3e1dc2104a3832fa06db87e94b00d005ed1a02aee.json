{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"labelProps\", \"inputProps\", \"descriptionProps\", \"errorMessageProps\"];\nimport $kTEqN$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { chain as $kTEqN$chain } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $kTEqN$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useTextField as $kTEqN$useTextField } from \"@react-aria/textfield\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4d52238874b24f86$export$9bb30bbe003b82e0(props, state, inputRef) {\n  let stringFormatter = (0, $kTEqN$useLocalizedStringFormatter)((0, $parcel$interopDefault($kTEqN$intlStringsmodulejs)), '@react-aria/searchfield');\n  let {\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    onSubmit: onSubmit,\n    onClear: onClear,\n    type = 'search'\n  } = props;\n  let onKeyDown = e => {\n    const key = e.key;\n    if (key === 'Enter' && (isDisabled || isReadOnly)) e.preventDefault();\n    if (isDisabled || isReadOnly) return;\n    // for backward compatibility;\n    // otherwise, \"Enter\" on an input would trigger a form submit, the default browser behavior\n    if (key === 'Enter' && onSubmit) {\n      e.preventDefault();\n      onSubmit(state.value);\n    }\n    if (key === 'Escape') {\n      // Also check the inputRef value for the case where the value was set directly on the input element instead of going through\n      // the hook\n      if (state.value === '' && (!inputRef.current || inputRef.current.value === '')) e.continuePropagation();else {\n        e.preventDefault();\n        state.setValue('');\n        if (onClear) onClear();\n      }\n    }\n  };\n  let onClearButtonClick = () => {\n    state.setValue('');\n    if (onClear) onClear();\n  };\n  let onPressStart = () => {\n    var\n    // this is in PressStart for mobile so that touching the clear button doesn't remove focus from\n    // the input and close the keyboard\n    _inputRef_current;\n    (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();\n  };\n  let _ref = (0, $kTEqN$useTextField)(_objectSpread(_objectSpread({}, props), {}, {\n      value: state.value,\n      onChange: state.setValue,\n      onKeyDown: !isReadOnly ? (0, $kTEqN$chain)(onKeyDown, props.onKeyDown) : props.onKeyDown,\n      type: type\n    }), inputRef),\n    {\n      labelProps: labelProps,\n      inputProps: inputProps,\n      descriptionProps: descriptionProps,\n      errorMessageProps: errorMessageProps\n    } = _ref,\n    validation = _objectWithoutProperties(_ref, _excluded);\n  return _objectSpread({\n    labelProps: labelProps,\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      // already handled by useSearchFieldState\n      defaultValue: undefined\n    }),\n    clearButtonProps: {\n      'aria-label': stringFormatter.format('Clear search'),\n      excludeFromTabOrder: true,\n      preventFocusOnPress: true,\n      isDisabled: isDisabled || isReadOnly,\n      onPress: onClearButtonClick,\n      onPressStart: onPressStart\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  }, validation);\n}\nexport { $4d52238874b24f86$export$9bb30bbe003b82e0 as useSearchField };","map":{"version":3,"names":["$4d52238874b24f86$export$9bb30bbe003b82e0","props","state","inputRef","stringFormatter","$kTEqN$useLocalizedStringFormatter","$parcel$interopDefault","$kTEqN$intlStringsmodulejs","isDisabled","isReadOnly","onSubmit","onClear","type","onKeyDown","e","key","preventDefault","value","current","continuePropagation","setValue","onClearButtonClick","onPressStart","_inputRef_current","focus","_ref","$kTEqN$useTextField","_objectSpread","onChange","$kTEqN$chain","labelProps","inputProps","descriptionProps","errorMessageProps","validation","_objectWithoutProperties","_excluded","defaultValue","undefined","clearButtonProps","format","excludeFromTabOrder","preventFocusOnPress","onPress"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\searchfield\\dist\\packages\\@react-aria\\searchfield\\src\\useSearchField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaSearchFieldProps} from '@react-types/searchfield';\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes, RefObject, ValidationResult} from '@react-types/shared';\nimport {InputHTMLAttributes, LabelHTMLAttributes} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {SearchFieldState} from '@react-stately/searchfield';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useTextField} from '@react-aria/textfield';\n\nexport interface SearchFieldAria extends ValidationResult {\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the clear button. */\n  clearButtonProps: AriaButtonProps,\n  /** Props for the searchfield's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the searchfield's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a search field.\n * @param props - Props for the search field.\n * @param state - State for the search field, as returned by `useSearchFieldState`.\n * @param inputRef - A ref to the input element.\n */\nexport function useSearchField(\n  props: AriaSearchFieldProps,\n  state: SearchFieldState,\n  inputRef: RefObject<HTMLInputElement | null>\n): SearchFieldAria {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/searchfield');\n  let {\n    isDisabled,\n    isReadOnly,\n    onSubmit,\n    onClear,\n    type = 'search'\n  } = props;\n\n  let onKeyDown = (e) => {\n    const key = e.key;\n\n    if (key === 'Enter' && (isDisabled || isReadOnly)) {\n      e.preventDefault();\n    }\n\n    if (isDisabled || isReadOnly) {\n      return;\n    }\n\n    // for backward compatibility;\n    // otherwise, \"Enter\" on an input would trigger a form submit, the default browser behavior\n    if (key === 'Enter' && onSubmit) {\n      e.preventDefault();\n      onSubmit(state.value);\n    }\n\n    if (key === 'Escape') {\n      // Also check the inputRef value for the case where the value was set directly on the input element instead of going through\n      // the hook\n      if (state.value === '' && (!inputRef.current || inputRef.current.value === '')) {\n        e.continuePropagation();\n      } else {\n        e.preventDefault();\n        state.setValue('');\n        if (onClear) {\n          onClear();\n        }\n      }\n    }\n  };\n\n  let onClearButtonClick = () => {\n    state.setValue('');\n\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  let onPressStart = () => {\n    // this is in PressStart for mobile so that touching the clear button doesn't remove focus from\n    // the input and close the keyboard\n    inputRef.current?.focus();\n  };\n\n  let {labelProps, inputProps, descriptionProps, errorMessageProps, ...validation} = useTextField({\n    ...props,\n    value: state.value,\n    onChange: state.setValue,\n    onKeyDown: !isReadOnly ? chain(onKeyDown, props.onKeyDown) : props.onKeyDown,\n    type\n  }, inputRef);\n\n  return {\n    labelProps,\n    inputProps: {\n      ...inputProps,\n      // already handled by useSearchFieldState\n      defaultValue: undefined\n    },\n    clearButtonProps: {\n      'aria-label': stringFormatter.format('Clear search'),\n      excludeFromTabOrder: true,\n      preventFocusOnPress: true,\n      isDisabled: isDisabled || isReadOnly,\n      onPress: onClearButtonClick,\n      onPressStart\n    },\n    descriptionProps,\n    errorMessageProps,\n    ...validation\n  };\n}\n"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;AA0CO,SAASA,0CACdC,KAA2B,EAC3BC,KAAuB,EACvBC,QAA4C;EAE5C,IAAIC,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAChE,IAAI;IAAAC,UAAA,EACFA,UAAU;IAAAC,UAAA,EACVA,UAAU;IAAAC,QAAA,EACVA,QAAQ;IAAAC,OAAA,EACRA,OAAO;IACPC,IAAA,GAAO;EAAA,CACR,GAAGX,KAAA;EAEJ,IAAIY,SAAA,GAAaC,CAAA;IACf,MAAMC,GAAA,GAAMD,CAAA,CAAEC,GAAG;IAEjB,IAAIA,GAAA,KAAQ,YAAYP,UAAA,IAAcC,UAAS,GAC7CK,CAAA,CAAEE,cAAc;IAGlB,IAAIR,UAAA,IAAcC,UAAA,EAChB;IAGF;IACA;IACA,IAAIM,GAAA,KAAQ,WAAWL,QAAA,EAAU;MAC/BI,CAAA,CAAEE,cAAc;MAChBN,QAAA,CAASR,KAAA,CAAMe,KAAK;IACtB;IAEA,IAAIF,GAAA,KAAQ;MACV;MACA;MACA,IAAIb,KAAA,CAAMe,KAAK,KAAK,OAAO,CAACd,QAAA,CAASe,OAAO,IAAIf,QAAA,CAASe,OAAO,CAACD,KAAK,KAAK,EAAC,GAC1EH,CAAA,CAAEK,mBAAmB,QAChB;QACLL,CAAA,CAAEE,cAAc;QAChBd,KAAA,CAAMkB,QAAQ,CAAC;QACf,IAAIT,OAAA,EACFA,OAAA;MAEJ;;EAEJ;EAEA,IAAIU,kBAAA,GAAqBA,CAAA;IACvBnB,KAAA,CAAMkB,QAAQ,CAAC;IAEf,IAAIT,OAAA,EACFA,OAAA;EAEJ;EAEA,IAAIW,YAAA,GAAeA,CAAA;;IACjB;IACA;IACAC,iBAAA;KAAAA,iBAAA,GAAApB,QAAA,CAASe,OAAO,cAAhBK,iBAAA,uBAAAA,iBAAA,CAAkBC,KAAK;EACzB;EAEA,IAAAC,IAAA,GAAmF,IAAAC,mBAAW,EAAAC,aAAA,CAAAA,aAAA,KACzF1B,KAAK;MACRgB,KAAA,EAAOf,KAAA,CAAMe,KAAK;MAClBW,QAAA,EAAU1B,KAAA,CAAMkB,QAAQ;MACxBP,SAAA,EAAW,CAACJ,UAAA,GAAa,IAAAoB,YAAI,EAAEhB,SAAA,EAAWZ,KAAA,CAAMY,SAAS,IAAIZ,KAAA,CAAMY,SAAS;YAC5ED;IAAA,IACCT,QAAA;IANC;MAAA2B,UAAA,EAACA,UAAU;MAAAC,UAAA,EAAEA,UAAU;MAAAC,gBAAA,EAAEA,gBAAgB;MAAAC,iBAAA,EAAEA;IAAsB,CAAW,GAAAR,IAAA;IAAXS,UAAA,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAQrE,OAAAT,aAAA;gBACEG,UAAA;IACAC,UAAA,EAAAJ,aAAA,CAAAA,aAAA,KACKI,UAAU;MACb;MACAM,YAAA,EAAcC;IAAA,EAChB;IACAC,gBAAA,EAAkB;MAChB,cAAcnC,eAAA,CAAgBoC,MAAM,CAAC;MACrCC,mBAAA,EAAqB;MACrBC,mBAAA,EAAqB;MACrBlC,UAAA,EAAYA,UAAA,IAAcC,UAAA;MAC1BkC,OAAA,EAAStB,kBAAA;oBACTC;IACF;sBACAU,gBAAA;uBACAC;EAAA,GACGC,UAAU;AAEjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}