{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useMemo as $hLqEt$useMemo } from \"react\";\nimport { parseColor as $hLqEt$parseColor } from \"@react-stately/color\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n*/\n\nconst $40297c24c53588e6$var$hue = color => [0, 60, 120, 180, 240, 300, 360].map(hue => color.withChannelValue('hue', hue).toString('css')).join(', ');\nconst $40297c24c53588e6$var$saturation = color => \"\".concat(color.withChannelValue('saturation', 0), \", transparent\");\nconst $40297c24c53588e6$var$hslChannels = {\n  hue: $40297c24c53588e6$var$hue,\n  saturation: $40297c24c53588e6$var$saturation,\n  lightness: () => 'black, transparent, white'\n};\nconst $40297c24c53588e6$var$hsbChannels = {\n  hue: $40297c24c53588e6$var$hue,\n  saturation: $40297c24c53588e6$var$saturation,\n  brightness: () => 'black, transparent'\n};\nfunction $40297c24c53588e6$export$dd62420467d245ca(_ref) {\n  let {\n    direction: direction,\n    state: state,\n    zChannel: zChannel,\n    xChannel: xChannel,\n    yChannel: yChannel\n  } = _ref;\n  let returnVal = (0, $hLqEt$useMemo)(() => {\n    let end = direction === 'rtl' ? 'left' : 'right';\n    let colorAreaStyles = {};\n    let zValue = state.value.getChannelValue(zChannel);\n    switch (state.value.getColorSpace()) {\n      case 'rgb':\n        {\n          let rgb = (0, $hLqEt$parseColor)('rgb(0, 0, 0)');\n          colorAreaStyles = {\n            background: [// The screen blend mode multiplies the inverse of each channel, e.g. 1 - (1 - a) * (1 - b).\n            // Create a layer for each channel, with the other channels as 0. After blending, this should\n            // result in the gradients being combined channel by channel.\n            \"linear-gradient(to \".concat(end, \", \").concat(rgb.withChannelValue(xChannel, 0), \", \").concat(rgb.withChannelValue(xChannel, 255), \")\"), \"linear-gradient(to top, \".concat(rgb.withChannelValue(yChannel, 0), \", \").concat(rgb.withChannelValue(yChannel, 255), \")\"), rgb.withChannelValue(zChannel, zValue)].join(','),\n            backgroundBlendMode: 'screen'\n          };\n          break;\n        }\n      case 'hsl':\n        {\n          let channels = state.value.getColorChannels();\n          let value = (0, $hLqEt$parseColor)('hsl(0, 100%, 50%)').withChannelValue(zChannel, zValue);\n          let bg = channels.filter(c => c !== zChannel).map(c => \"linear-gradient(to \".concat(c === xChannel ? end : 'top', \", \").concat($40297c24c53588e6$var$hslChannels[c](value), \")\")).reverse();\n          if (zChannel === 'hue') bg.push(value.toString('css'));\n          colorAreaStyles = {\n            background: bg.join(', ')\n          };\n          break;\n        }\n      case 'hsb':\n        {\n          let channels = state.value.getColorChannels();\n          let value = (0, $hLqEt$parseColor)('hsb(0, 100%, 100%)').withChannelValue(zChannel, zValue);\n          let bg = channels.filter(c => c !== zChannel).map(c => \"linear-gradient(to \".concat(c === xChannel ? end : 'top', \", \").concat($40297c24c53588e6$var$hsbChannels[c](value), \")\")).reverse();\n          if (zChannel === 'hue') bg.push(value.toString('css'));\n          colorAreaStyles = {\n            background: bg.join(', ')\n          };\n          break;\n        }\n    }\n    let {\n      x: x,\n      y: y\n    } = state.getThumbPosition();\n    if (direction === 'rtl') x = 1 - x;\n    let forcedColorAdjustNoneStyle = {\n      forcedColorAdjust: 'none'\n    };\n    return {\n      colorAreaStyleProps: {\n        style: _objectSpread(_objectSpread({\n          position: 'relative',\n          touchAction: 'none'\n        }, forcedColorAdjustNoneStyle), colorAreaStyles)\n      },\n      thumbStyleProps: {\n        style: _objectSpread({\n          position: 'absolute',\n          left: \"\".concat(x * 100, \"%\"),\n          top: \"\".concat(y * 100, \"%\"),\n          transform: 'translate(-50%, -50%)',\n          touchAction: 'none'\n        }, forcedColorAdjustNoneStyle)\n      }\n    };\n  }, [direction, state, zChannel, xChannel, yChannel]);\n  return returnVal;\n}\nexport { $40297c24c53588e6$export$dd62420467d245ca as useColorAreaGradient };","map":{"version":3,"names":["$40297c24c53588e6$var$hue","color","map","hue","withChannelValue","toString","join","$40297c24c53588e6$var$saturation","concat","$40297c24c53588e6$var$hslChannels","lightness","$40297c24c53588e6$var$hsbChannels","brightness","$40297c24c53588e6$export$dd62420467d245ca","_ref","direction","state","zChannel","xChannel","yChannel","returnVal","$hLqEt$useMemo","end","colorAreaStyles","zValue","value","getChannelValue","getColorSpace","rgb","$hLqEt$parseColor","background","backgroundBlendMode","channels","getColorChannels","bg","filter","c","reverse","push","x","y","getThumbPosition","forcedColorAdjustNoneStyle","forcedColorAdjust","colorAreaStyleProps","style","_objectSpread","position","touchAction","thumbStyleProps","left","top","transform"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\color\\dist\\packages\\@react-aria\\color\\src\\useColorAreaGradient.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n*/\n\nimport {Color} from '@react-types/color';\nimport {CSSProperties, useMemo} from 'react';\nimport {parseColor} from '@react-stately/color';\n\nconst hue = (color: Color) => [0, 60, 120, 180, 240, 300, 360].map(hue => color.withChannelValue('hue', hue).toString('css')).join(', ');\nconst saturation = (color: Color) => `${color.withChannelValue('saturation', 0)}, transparent`;\n\nconst hslChannels = {\n  hue,\n  saturation,\n  lightness: () => 'black, transparent, white'\n};\n\nconst hsbChannels = {\n  hue,\n  saturation,\n  brightness: () => 'black, transparent'\n};\n\ninterface Gradients {\n  colorAreaStyleProps: {\n    style: CSSProperties\n  },\n  thumbStyleProps: {\n    style: CSSProperties\n  }\n}\n\nexport function useColorAreaGradient({direction, state, zChannel, xChannel, yChannel}): Gradients {\n  let returnVal = useMemo<Gradients>(() => {\n    let end = direction === 'rtl' ? 'left' : 'right';\n    let colorAreaStyles = {};\n    let zValue = state.value.getChannelValue(zChannel);\n\n    switch (state.value.getColorSpace()) {\n      case 'rgb': {\n        let rgb = parseColor('rgb(0, 0, 0)');\n        colorAreaStyles = {\n          background: [\n            // The screen blend mode multiplies the inverse of each channel, e.g. 1 - (1 - a) * (1 - b).\n            // Create a layer for each channel, with the other channels as 0. After blending, this should\n            // result in the gradients being combined channel by channel.\n            `linear-gradient(to ${end}, ${rgb.withChannelValue(xChannel, 0)}, ${rgb.withChannelValue(xChannel, 255)})`,\n            `linear-gradient(to top, ${rgb.withChannelValue(yChannel, 0)}, ${rgb.withChannelValue(yChannel, 255)})`,\n            rgb.withChannelValue(zChannel, zValue)\n          ].join(','),\n          backgroundBlendMode: 'screen'\n        };\n        break;\n      }\n      case 'hsl': {\n        let channels = state.value.getColorChannels();\n        let value = parseColor('hsl(0, 100%, 50%)').withChannelValue(zChannel, zValue);\n\n        let bg = channels\n          .filter(c => c !== zChannel)\n          .map(c => `linear-gradient(to ${c === xChannel ? end : 'top'}, ${hslChannels[c](value)})`)\n          .reverse();\n        if (zChannel === 'hue') {\n          bg.push(value.toString('css'));\n        }\n    \n        colorAreaStyles = {\n          background: bg.join(', ')\n        };\n        break;\n      }\n      case 'hsb': {\n        let channels = state.value.getColorChannels();\n        let value = parseColor('hsb(0, 100%, 100%)').withChannelValue(zChannel, zValue);\n\n        let bg = channels\n          .filter(c => c !== zChannel)\n          .map(c => `linear-gradient(to ${c === xChannel ? end : 'top'}, ${hsbChannels[c](value)})`)\n          .reverse();\n        if (zChannel === 'hue') {\n          bg.push(value.toString('css'));\n        }\n    \n        colorAreaStyles = {\n          background: bg.join(', ')\n        };\n        break;\n      }\n    }\n\n    let {x, y} = state.getThumbPosition();\n\n    if (direction === 'rtl') {\n      x = 1 - x;\n    }\n\n    let forcedColorAdjustNoneStyle = {forcedColorAdjust: 'none'};\n\n    return {\n      colorAreaStyleProps: {\n        style: {\n          position: 'relative',\n          touchAction: 'none',\n          ...forcedColorAdjustNoneStyle,\n          ...colorAreaStyles\n        }\n      },\n      thumbStyleProps: {\n        style: {\n          position: 'absolute',\n          left: `${x * 100}%`,\n          top: `${y * 100}%`,\n          transform: 'translate(-50%, -50%)',\n          touchAction: 'none',\n          ...forcedColorAdjustNoneStyle\n        }\n      }\n    };\n  }, [direction, state, zChannel, xChannel, yChannel]);\n\n  return returnVal;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}