{"ast":null,"code":"import _objectSpread from \"C:/Users/rewac/OneDrive/Documents/GitHub/scatch-store.me/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { NumberFormatter as $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 } from \"./NumberFormatter.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec', 'deva', 'beng'];\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n  /**\n  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n  */\n  parse(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n  /**\n  * Returns whether the given string could potentially be a valid number. This should be used to\n  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n  * of the minus/plus sign characters can be checked.\n  */\n  isValidPartialNumber(value, minValue, maxValue) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n  /**\n  * Returns a numbering system for which the given string is valid in the current locale.\n  * If no numbering system could be detected, the default numbering system for the current\n  * locale is returned.\n  */\n  getNumberingSystem(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.locale = locale;\n    this.options = options;\n  }\n}\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {\n      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n      if (parser.isValidPartialNumber(value)) return parser;\n    }\n  }\n  return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n  return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass $6c7bd7858deea686$var$NumberParserImpl {\n  parse(value) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n    if (this.symbols.group)\n      // Remove group characters, and replace decimal points and numerals with ASCII values.\n      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '');\n    if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, '.');\n    if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, '-');\n    fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);\n    if (this.options.style === 'percent') {\n      // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing\n      let isNegative = fullySanitizedValue.indexOf('-');\n      fullySanitizedValue = fullySanitizedValue.replace('-', '');\n      let index = fullySanitizedValue.indexOf('.');\n      if (index === -1) index = fullySanitizedValue.length;\n      fullySanitizedValue = fullySanitizedValue.replace('.', '');\n      if (index - 2 === 0) fullySanitizedValue = \"0.\".concat(fullySanitizedValue);else if (index - 2 === -1) fullySanitizedValue = \"0.0\".concat(fullySanitizedValue);else if (index - 2 === -2) fullySanitizedValue = '0.00';else fullySanitizedValue = \"\".concat(fullySanitizedValue.slice(0, index - 2), \".\").concat(fullySanitizedValue.slice(index - 2));\n      if (isNegative > -1) fullySanitizedValue = \"-\".concat(fullySanitizedValue);\n    }\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) return NaN;\n    if (this.options.style === 'percent') {\n      var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;\n      // extra step for rounding percents to what our formatter would output\n      let options = _objectSpread(_objectSpread({}, this.options), {}, {\n        style: 'decimal',\n        minimumFractionDigits: Math.min(((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) + 2, 20),\n        maximumFractionDigits: Math.min(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2, 20)\n      });\n      return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options).parse(new (0, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(this.locale, options).format(newValue));\n    }\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n    return newValue;\n  }\n  sanitize(value) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    if (this.symbols.minusSign) value = value.replace('-', this.symbols.minusSign);\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      if (this.symbols.decimal) {\n        value = value.replace(',', this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      }\n      if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);\n    }\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));\n    return value;\n  }\n  isValidPartialNumber(value) {\n    let minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n    let maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n    value = this.sanitize(value);\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n    // Numbers cannot start with a group separator\n    if (this.symbols.group && value.startsWith(this.symbols.group)) return false;\n    // Numbers that can't have any decimal values fail if a decimal character is typed\n    if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;\n    // Remove numerals, groups, and decimals\n    if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '');\n    value = value.replace(this.symbols.numeral, '');\n    if (this.symbols.decimal) value = value.replace(this.symbols.decimal, '');\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.locale = locale;\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options);\n    var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;\n    if (this.options.style === 'percent' && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn('NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.');\n  }\n}\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes\n// all unique numbers which we need to check in order to determine all the plural forms for a given locale.\n// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script\nconst $6c7bd7858deea686$var$pluralNumbers = [0, 4, 2, 1, 11, 20, 3, 7, 100, 21, 0.1, 1.1];\nfunction $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;\n  // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set\n  let symbolFormatter = new Intl.NumberFormat(locale, _objectSpread(_objectSpread({}, intlOptions), {}, {\n    // Resets so we get the full range of symbols\n    minimumSignificantDigits: 1,\n    maximumSignificantDigits: 21,\n    roundingIncrement: 1,\n    roundingPriority: 'auto',\n    roundingMode: 'halfExpand'\n  }));\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = symbolFormatter.formatToParts(-10000.111);\n  let posAllParts = symbolFormatter.formatToParts(10000.111);\n  let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map(n => symbolFormatter.formatToParts(n));\n  var _allParts_find_value;\n  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find(p => p.type === 'minusSign')) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : '-';\n  let plusSign = (_posAllParts_find = posAllParts.find(p => p.type === 'plusSign')) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';\n  // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters\n  // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal\n  let decimalParts = new Intl.NumberFormat(locale, _objectSpread(_objectSpread({}, intlOptions), {}, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  })).formatToParts(0.001);\n  let decimal = (_decimalParts_find = decimalParts.find(p => p.type === 'decimal')) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;\n  let group = (_allParts_find1 = allParts.find(p => p.type === 'group')) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let allPartsLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let pluralPartsLiterals = pluralParts.flatMap(p => p.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value)));\n  let sortedLiterals = [...new Set([...allPartsLiterals, ...pluralPartsLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? new RegExp('[\\\\p{White_Space}]', 'gu') : new RegExp(\"\".concat(sortedLiterals.join('|'), \"|[\\\\p{White_Space}]\"), 'gu');\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n  let index = d => String(indexes.get(d));\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  if (str.replaceAll) return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nexport { $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"names":["$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","parse","value","$6c7bd7858deea686$var$getNumberParserImpl","locale","options","isValidPartialNumber","minValue","maxValue","getNumberingSystem","numberingSystem","constructor","arguments","length","undefined","$6c7bd7858deea686$var$numberParserCache","Map","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","parser","cacheKey","Object","entries","sort","a","b","join","get","$6c7bd7858deea686$var$NumberParserImpl","set","fullySanitizedValue","sanitize","symbols","group","$6c7bd7858deea686$var$replaceAll","decimal","replace","minusSign","numeral","index","style","isNegative","indexOf","concat","slice","newValue","NaN","isNaN","_this_options_minimumFractionDigits","_this_options_maximumFractionDigits","_objectSpread","minimumFractionDigits","Math","min","maximumFractionDigits","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","format","currencySign","test","literals","String","fromCharCode","Infinity","startsWith","plusSign","formatter","Intl","NumberFormat","resolvedOptions","$6c7bd7858deea686$var$getSymbols","console","warn","$6c7bd7858deea686$var$nonLiteralParts","Set","$6c7bd7858deea686$var$pluralNumbers","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_decimalParts_find","_allParts_find1","symbolFormatter","minimumSignificantDigits","maximumSignificantDigits","roundingIncrement","roundingPriority","roundingMode","allParts","formatToParts","posAllParts","pluralParts","map","n","_allParts_find_value","find","p","type","signDisplay","decimalParts","allPartsLiterals","filter","has","$6c7bd7858deea686$var$escapeRegex","pluralPartsLiterals","flatMap","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {NumberFormatter} from './NumberFormatter';\n\ninterface Symbols {\n  minusSign?: string,\n  plusSign?: string,\n  decimal?: string,\n  group?: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec', 'deva', 'beng'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n  locale: string;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(locale, this.formatter, this.options, options);\n    if (this.options.style === 'percent' && ((this.options.minimumFractionDigits ?? 0) > 18 || (this.options.maximumFractionDigits ?? 0) > 18)) {\n      console.warn('NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.');\n    }\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    if (this.symbols.group) {\n      // Remove group characters, and replace decimal points and numerals with ASCII values.\n      fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '');\n    }\n    if (this.symbols.decimal) {\n      fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal!, '.');\n    }\n    if (this.symbols.minusSign) {\n      fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign!, '-');\n    }\n    fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);\n\n    if (this.options.style === 'percent') {\n      // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing\n      let isNegative = fullySanitizedValue.indexOf('-');\n      fullySanitizedValue = fullySanitizedValue.replace('-', '');\n      let index = fullySanitizedValue.indexOf('.');\n      if (index === -1) {\n        index = fullySanitizedValue.length;\n      }\n      fullySanitizedValue = fullySanitizedValue.replace('.', '');\n      if (index - 2 === 0) {\n        fullySanitizedValue = `0.${fullySanitizedValue}`;\n      } else if (index - 2 === -1) {\n        fullySanitizedValue = `0.0${fullySanitizedValue}`;\n      } else if (index - 2 === -2) {\n        fullySanitizedValue = '0.00';\n      } else {\n        fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;\n      }\n      if (isNegative > -1) {\n        fullySanitizedValue = `-${fullySanitizedValue}`;\n      }\n    }\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    if (this.options.style === 'percent') {\n      // extra step for rounding percents to what our formatter would output\n      let options = {\n        ...this.options,\n        style: 'decimal' as const,\n        minimumFractionDigits: Math.min((this.options.minimumFractionDigits ?? 0) + 2, 20),\n        maximumFractionDigits: Math.min((this.options.maximumFractionDigits ?? 0) + 2, 20)\n      };\n      return (new NumberParser(this.locale, options)).parse(new NumberFormatter(this.locale, options).format(newValue));\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    if (this.symbols.minusSign) {\n      value = value.replace('-', this.symbols.minusSign);\n    }\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      if (this.symbols.decimal) {\n        value = value.replace(',', this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      }\n      if (this.symbols.group) {\n        value = replaceAll(value, '.', this.symbols.group);\n      }\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (this.symbols.group && value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Numbers that can't have any decimal values fail if a decimal character is typed\n    if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    if (this.symbols.group) {\n      value = replaceAll(value, this.symbols.group, '');\n    }\n    value = value.replace(this.symbols.numeral, '');\n    if (this.symbols.decimal) {\n      value = value.replace(this.symbols.decimal, '');\n    }\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\n// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes\n// all unique numbers which we need to check in order to determine all the plural forms for a given locale.\n// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script\nconst pluralNumbers = [\n  0, 4, 2, 1, 11, 20, 3, 7, 100, 21, 0.1, 1.1\n];\n\nfunction getSymbols(locale: string, formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set\n  let symbolFormatter = new Intl.NumberFormat(locale, {...intlOptions,\n    // Resets so we get the full range of symbols\n    minimumSignificantDigits: 1,\n    maximumSignificantDigits: 21,\n    roundingIncrement: 1,\n    roundingPriority: 'auto',\n    roundingMode: 'halfExpand'\n  });\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = symbolFormatter.formatToParts(-10000.111);\n  let posAllParts = symbolFormatter.formatToParts(10000.111);\n  let pluralParts = pluralNumbers.map(n => symbolFormatter.formatToParts(n));\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters\n  // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal\n  let decimalParts = new Intl.NumberFormat(locale, {...intlOptions, minimumFractionDigits: 2, maximumFractionDigits: 2}).formatToParts(0.001);\n\n  let decimal = decimalParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let allPartsLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let pluralPartsLiterals = pluralParts.flatMap(p => p.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value)));\n  let sortedLiterals = [...new Set([...allPartsLiterals, ...pluralPartsLiterals])].sort((a, b) => b.length - a.length);\n\n  let literals = sortedLiterals.length === 0 ?\n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  if (str.replaceAll) {\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}