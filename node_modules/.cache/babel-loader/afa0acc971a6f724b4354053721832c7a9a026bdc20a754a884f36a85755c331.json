{"ast":null,"code":"import { useState as $LM92H$useState } from \"react\";\nimport { useControlledState as $LM92H$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $94680be9a48a8f2d$export$130b939e942a109d(props) {\n  let {\n    onInputChange: propsOnInputChange,\n    inputValue: propsInputValue,\n    defaultInputValue: propsDefaultInputValue = ''\n  } = props;\n  let onInputChange = value => {\n    if (propsOnInputChange) propsOnInputChange(value);\n  };\n  let [focusedNodeId, setFocusedNodeId] = (0, $LM92H$useState)(null);\n  let [inputValue, setInputValue] = (0, $LM92H$useControlledState)(propsInputValue, propsDefaultInputValue, onInputChange);\n  return {\n    inputValue: inputValue,\n    setInputValue: setInputValue,\n    focusedNodeId: focusedNodeId,\n    setFocusedNodeId: setFocusedNodeId\n  };\n}\nexport { $94680be9a48a8f2d$export$130b939e942a109d as UNSTABLE_useAutocompleteState };","map":{"version":3,"names":["$94680be9a48a8f2d$export$130b939e942a109d","props","onInputChange","propsOnInputChange","inputValue","propsInputValue","defaultInputValue","propsDefaultInputValue","value","focusedNodeId","setFocusedNodeId","$LM92H$useState","setInputValue","$LM92H$useControlledState"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-stately\\autocomplete\\dist\\packages\\@react-stately\\autocomplete\\src\\useAutocompleteState.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ReactNode, useState} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface AutocompleteState {\n  /** The current value of the autocomplete input. */\n  inputValue: string,\n  /** Sets the value of the autocomplete input. */\n  setInputValue(value: string): void,\n  /** The id of the current aria-activedescendant of the autocomplete input. */\n  focusedNodeId: string | null,\n  /** Sets the id of the current aria-activedescendant of the autocomplete input. */\n  setFocusedNodeId(value: string | null): void\n}\n\nexport interface AutocompleteProps {\n  /** The value of the autocomplete input (controlled). */\n  inputValue?: string,\n  /** The default value of the autocomplete input (uncontrolled). */\n  defaultInputValue?: string,\n  /** Handler that is called when the autocomplete input value changes. */\n  onInputChange?: (value: string) => void,\n  /** The children wrapped by the autocomplete. Consists of at least an input element and a collection element to filter. */\n  children: ReactNode\n}\n\n// Emulate our other stately hooks which accept all \"base\" props even if not used\nexport interface AutocompleteStateOptions extends Omit<AutocompleteProps, 'children'> {}\n\n/**\n * Provides state management for a autocomplete component.\n */\nexport function UNSTABLE_useAutocompleteState(props: AutocompleteStateOptions): AutocompleteState {\n  let {\n    onInputChange: propsOnInputChange,\n    inputValue: propsInputValue,\n    defaultInputValue: propsDefaultInputValue = ''\n  } = props;\n\n  let onInputChange = (value) => {\n    if (propsOnInputChange) {\n      propsOnInputChange(value);\n    }\n  };\n\n  let [focusedNodeId, setFocusedNodeId] = useState<string | null>(null);\n  let [inputValue, setInputValue] = useControlledState(\n    propsInputValue,\n    propsDefaultInputValue!,\n    onInputChange\n  );\n\n  return {\n    inputValue,\n    setInputValue,\n    focusedNodeId,\n    setFocusedNodeId\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AA2CO,SAASA,0CAA8BC,KAA+B;EAC3E,IAAI;IACFC,aAAA,EAAeC,kBAAkB;IACjCC,UAAA,EAAYC,eAAe;IAC3BC,iBAAA,EAAmBC,sBAAA,GAAyB;EAAE,CAC/C,GAAGN,KAAA;EAEJ,IAAIC,aAAA,GAAiBM,KAAA;IACnB,IAAIL,kBAAA,EACFA,kBAAA,CAAmBK,KAAA;EAEvB;EAEA,IAAI,CAACC,aAAA,EAAeC,gBAAA,CAAiB,GAAG,IAAAC,eAAO,EAAiB;EAChE,IAAI,CAACP,UAAA,EAAYQ,aAAA,CAAc,GAAG,IAAAC,yBAAiB,EACjDR,eAAA,EACAE,sBAAA,EACAL,aAAA;EAGF,OAAO;gBACLE,UAAA;mBACAQ,aAAA;mBACAH,aAAA;sBACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}