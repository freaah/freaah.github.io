{"ast":null,"code":"import { usePlasmicCanvasContext, usePlasmicCanvasComponentInfo } from '@plasmicapp/host';\nimport registerComponent from '@plasmicapp/host/registerComponent';\nimport { useEffect } from 'react';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction useAutoOpen({\n  props,\n  open,\n  close\n}) {\n  var _a, _b, _c;\n  const inPlasmicCanvas = !!usePlasmicCanvasContext();\n  const isSelected = (_c = (_b = (_a = usePlasmicCanvasComponentInfo) == null ? void 0 : _a(props)) == null ? void 0 : _b.isSelected) != null ? _c : false;\n  useEffect(() => {\n    if (!inPlasmicCanvas) {\n      return;\n    }\n    if (isSelected) {\n      open == null ? void 0 : open();\n    } else {\n      close == null ? void 0 : close();\n    }\n  }, [isSelected, inPlasmicCanvas]);\n}\nfunction registerComponentHelper(loader, component, meta, overrides) {\n  if (overrides) {\n    meta = __spreadProps(__spreadValues(__spreadValues({}, meta), overrides), {\n      props: __spreadValues(__spreadValues({}, meta.props), overrides.props)\n    });\n    if (overrides.parentComponentName) {\n      meta.name = makeChildComponentName(overrides.parentComponentName, meta.name);\n    }\n  }\n  if (loader) {\n    loader.registerComponent(component, meta);\n  } else {\n    registerComponent(component, meta);\n  }\n  return meta;\n}\nfunction makeComponentName(name) {\n  return `plasmic-react-aria-${name}`;\n}\nfunction makeChildComponentName(fullParentName, fullChildName) {\n  if (!fullParentName) {\n    return fullChildName;\n  }\n  return `${fullParentName}-${fullChildName.replace(\"plasmic-react-aria-\", \"\")}`;\n}\nfunction extractPlasmicDataProps(props) {\n  return Object.fromEntries(Object.entries(props).filter(([key]) => key.startsWith(\"data-plasmic-\")));\n}\nfunction isDefined(thing) {\n  return thing !== void 0 && thing !== null;\n}\nexport { makeChildComponentName as a, extractPlasmicDataProps as e, isDefined as i, makeComponentName as m, registerComponentHelper as r, useAutoOpen as u };","map":{"version":3,"names":["useAutoOpen","props","open","close","_a","_b","_c","inPlasmicCanvas","usePlasmicCanvasContext","isSelected","usePlasmicCanvasComponentInfo","useEffect","registerComponentHelper","loader","component","meta","overrides","__spreadProps","__spreadValues","parentComponentName","name","makeChildComponentName","registerComponent","makeComponentName","fullParentName","fullChildName","replace","extractPlasmicDataProps","Object","fromEntries","entries","filter","key","startsWith","isDefined","thing"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@plasmicpkgs\\react-aria\\src\\utils.ts"],"sourcesContent":["import {\n  usePlasmicCanvasComponentInfo,\n  usePlasmicCanvasContext,\n  type CodeComponentMeta,\n} from \"@plasmicapp/host\";\nimport registerComponent from \"@plasmicapp/host/registerComponent\";\nimport React, { useEffect } from \"react\";\n\nexport type HasControlContextData<T = BaseControlContextData> = {\n  setControlContextData?: (ctxData: T) => void;\n};\n\nexport type BaseControlContextData = {\n  parent?: {\n    isDisabled?: boolean;\n    isReadOnly?: boolean;\n  };\n};\n\nexport type Registerable = {\n  registerComponent: typeof registerComponent;\n};\n\nexport type OtherCodeComponentsMeta = {\n  text: CodeComponentMeta<any>;\n  description: CodeComponentMeta<any>;\n};\n\nexport type CodeComponentMetaOverrides<T extends React.ComponentType<any>> =\n  Partial<\n    Pick<\n      CodeComponentMeta<React.ComponentProps<T>>,\n      \"parentComponentName\" | \"props\" | \"displayName\" | \"name\"\n    >\n  >;\n\nexport function useAutoOpen({\n  props,\n  open,\n  close,\n}: {\n  props: any;\n  open?: () => void;\n  close?: () => void;\n}) {\n  const inPlasmicCanvas = !!usePlasmicCanvasContext();\n  const isSelected =\n    usePlasmicCanvasComponentInfo?.(props)?.isSelected ?? false;\n\n  useEffect(() => {\n    // selection in outline tab only matters in canvas\n    if (!inPlasmicCanvas) {\n      return;\n    }\n    if (isSelected) {\n      open?.();\n    } else {\n      close?.();\n    }\n    // Not putting open and close in the useEffect dependencies array, because it causes a re-render loop.\n  }, [isSelected, inPlasmicCanvas]);\n}\n\nexport function registerComponentHelper<T extends React.ComponentType<any>>(\n  loader: Registerable | undefined,\n  component: T,\n  meta: CodeComponentMeta<React.ComponentProps<T>>,\n  overrides?: CodeComponentMetaOverrides<T>\n) {\n  if (overrides) {\n    meta = {\n      ...meta,\n      ...overrides,\n      props: {\n        ...meta.props,\n        ...overrides.props,\n      },\n    };\n    if (overrides.parentComponentName) {\n      meta.name = makeChildComponentName(\n        overrides.parentComponentName,\n        meta.name\n      );\n    }\n  }\n  if (loader) {\n    loader.registerComponent(component, meta);\n  } else {\n    registerComponent(component, meta);\n  }\n  return meta;\n}\n\nexport function makeComponentName(name: string) {\n  return `plasmic-react-aria-${name}`;\n}\n\nexport function makeChildComponentName(\n  fullParentName: string | undefined,\n  fullChildName: string\n) {\n  if (!fullParentName) {\n    return fullChildName;\n  }\n  return `${fullParentName}-${fullChildName.replace(\n    \"plasmic-react-aria-\",\n    \"\"\n  )}`;\n}\n\nexport interface Styleable {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport function extractPlasmicDataProps(props: Record<string, any>) {\n  return Object.fromEntries(\n    Object.entries(props).filter(([key]) => key.startsWith(\"data-plasmic-\"))\n  );\n}\n\nexport function withoutNils<T>(array: (T | undefined | null)[]) {\n  return array.filter((x): x is T => x != null);\n}\n\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return thing !== undefined && thing !== null;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoCO,SAASA,WAAYA,CAAA;EAC1BC,KAAA;EACAC,IAAA;EACAC;AACF,CAIG;EA5CH,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA;EA6CQ,MAAAC,eAAA,GAAkB,CAAC,CAACC,uBAAwB;EAClD,MAAMC,UACJ,IAAAH,EAAA,IAAAD,EAAA,IAAAD,EAAA,GAAAM,6BAAA,qBAAAN,EAAA,CAAgCH,KAAhC,sBAAAI,EAAA,CAAwCI,UAAA,KAAxC,IAAsD,GAAAH,EAAA;EAExDK,SAAA,CAAU,MAAM;IAEd,IAAI,CAACJ,eAAiB;MACpB;IAAA;IAEF,IAAIE,UAAY;MACdP,IAAA,oBAAAA,IAAA;IAAA,CACK;MACLC,KAAA,oBAAAA,KAAA;IAAA;EACF,CAEC,GAACM,UAAY,EAAAF,eAAe,CAAC;AAClC;AAEO,SAASK,uBACdA,CAAAC,MAAA,EACAC,SACA,EAAAC,IAAA,EACAC,SACA;EACA,IAAIA,SAAW;IACND,IAAA,GAAAE,aAAA,CAAAC,cAAA,CAAAA,cAAA,KACFH,IAAA,GACAC,SAFE;MAGLf,KAAO,EAAAiB,cAAA,CAAAA,cAAA,KACFH,IAAK,CAAAd,KAAA,GACLe,SAAU,CAAAf,KAAA;IAAA,CAEjB;IACA,IAAIe,SAAA,CAAUG,mBAAqB;MACjCJ,IAAA,CAAKK,IAAO,GAAAC,sBAAA,CACVL,SAAU,CAAAG,mBAAA,EACVJ,IAAK,CAAAK,IAAA,CACP;IAAA;EACF;EAEF,IAAIP,MAAQ;IACHA,MAAA,CAAAS,iBAAA,CAAkBR,SAAA,EAAWC,IAAI;EAAA,CACnC;IACLO,iBAAA,CAAkBR,SAAA,EAAWC,IAAI;EAAA;EAE5B,OAAAA,IAAA;AACT;AAEO,SAASQ,kBAAkBH,IAAc;EAC9C,OAAO,sBAAsBA,IAAA;AAC/B;AAEgB,SAAAC,uBACdG,cAAA,EACAC,aACA;EACA,IAAI,CAACD,cAAgB;IACZ,OAAAC,aAAA;EAAA;EAEF,UAAGD,cAAA,IAAkBC,aAAc,CAAAC,OAAA,CACxC,uBACA,GACF;AACF;AAOO,SAASC,wBAAwB1B,KAA4B;EAClE,OAAO2B,MAAO,CAAAC,WAAA,CACZD,MAAO,CAAAE,OAAA,CAAQ7B,KAAK,EAAE8B,MAAO,EAAC,CAACC,GAAG,CAAM,KAAAA,GAAA,CAAIC,UAAW,gBAAe,CAAC,EACzE;AACF;AAMO,SAASC,UAAaC,KAAyC;EAC7D,OAAAA,KAAA,KAAU,UAAaA,KAAU;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}