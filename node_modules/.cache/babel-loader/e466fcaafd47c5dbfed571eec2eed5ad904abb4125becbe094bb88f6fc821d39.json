{"ast":null,"code":"import { filterDOMProps as $aUnai$filterDOMProps, mergeProps as $aUnai$mergeProps, useId as $aUnai$useId, chain as $aUnai$chain } from \"@react-aria/utils\";\nimport { useMemo as $aUnai$useMemo } from \"react\";\nimport { ListKeyboardDelegate as $aUnai$ListKeyboardDelegate, useTypeSelect as $aUnai$useTypeSelect } from \"@react-aria/selection\";\nimport { setInteractionModality as $aUnai$setInteractionModality } from \"@react-aria/interactions\";\nimport { useCollator as $aUnai$useCollator } from \"@react-aria/i18n\";\nimport { useField as $aUnai$useField } from \"@react-aria/label\";\nimport { useMenuTrigger as $aUnai$useMenuTrigger } from \"@react-aria/menu\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $58aed456727eb0f3$export$703601b7e90536f8 = new WeakMap();\nfunction $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    name: name,\n    validationBehavior = 'aria'\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $aUnai$useCollator)({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let delegate = (0, $aUnai$useMemo)(() => keyboardDelegate || new (0, $aUnai$ListKeyboardDelegate)(state.collection, state.disabledKeys, ref, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n  let {\n    menuTriggerProps: menuTriggerProps,\n    menuProps: menuProps\n  } = (0, $aUnai$useMenuTrigger)({\n    isDisabled: isDisabled,\n    type: 'listbox'\n  }, state, ref);\n  let onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        {\n          var _delegate_getKeyAbove, _delegate_getFirstKey;\n          // prevent scrolling containers\n          e.preventDefault();\n          let key = state.selectedKey != null ? (_delegate_getKeyAbove = delegate.getKeyAbove) === null || _delegate_getKeyAbove === void 0 ? void 0 : _delegate_getKeyAbove.call(delegate, state.selectedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (key) state.setSelectedKey(key);\n          break;\n        }\n      case 'ArrowRight':\n        {\n          var _delegate_getKeyBelow, _delegate_getFirstKey1;\n          // prevent scrolling containers\n          e.preventDefault();\n          let key = state.selectedKey != null ? (_delegate_getKeyBelow = delegate.getKeyBelow) === null || _delegate_getKeyBelow === void 0 ? void 0 : _delegate_getKeyBelow.call(delegate, state.selectedKey) : (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate);\n          if (key) state.setSelectedKey(key);\n          break;\n        }\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = (0, $aUnai$useTypeSelect)({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n  });\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $aUnai$useField)({\n    ...props,\n    labelElementType: 'span',\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n  let domProps = (0, $aUnai$filterDOMProps)(props, {\n    labelable: true\n  });\n  let triggerProps = (0, $aUnai$mergeProps)(typeSelectProps, menuTriggerProps, fieldProps);\n  let valueId = (0, $aUnai$useId)();\n  $58aed456727eb0f3$export$703601b7e90536f8.set(state, {\n    isDisabled: isDisabled,\n    isRequired: isRequired,\n    name: name,\n    validationBehavior: validationBehavior\n  });\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        if (!props.isDisabled) {\n          var _ref_current;\n          (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();\n          // Show the focus ring so the user knows where focus went\n          (0, $aUnai$setInteractionModality)('keyboard');\n        }\n      }\n    },\n    triggerProps: (0, $aUnai$mergeProps)(domProps, {\n      ...triggerProps,\n      isDisabled: isDisabled,\n      onKeyDown: (0, $aUnai$chain)(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      'aria-labelledby': [valueId, triggerProps['aria-labelledby'], triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null].filter(Boolean).join(' '),\n      onFocus(e) {\n        if (state.isFocused) return;\n        if (props.onFocus) props.onFocus(e);\n        if (props.onFocusChange) props.onFocusChange(true);\n        state.setFocused(true);\n      },\n      onBlur(e) {\n        if (state.isOpen) return;\n        if (props.onBlur) props.onBlur(e);\n        if (props.onFocusChange) props.onFocusChange(false);\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      disallowEmptySelection: true,\n      linkBehavior: 'selection',\n      onBlur: e => {\n        if (e.currentTarget.contains(e.relatedTarget)) return;\n        if (props.onBlur) props.onBlur(e);\n        if (props.onFocusChange) props.onFocusChange(false);\n        state.setFocused(false);\n      },\n      'aria-labelledby': [fieldProps['aria-labelledby'], triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null].filter(Boolean).join(' ')\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $58aed456727eb0f3$export$703601b7e90536f8 as selectData, $58aed456727eb0f3$export$e64b2f635402ca43 as useSelect };","map":{"version":3,"names":["$58aed456727eb0f3$export$703601b7e90536f8","WeakMap","$58aed456727eb0f3$export$e64b2f635402ca43","props","state","ref","keyboardDelegate","isDisabled","isRequired","name","validationBehavior","collator","$aUnai$useCollator","usage","sensitivity","delegate","$aUnai$useMemo","$aUnai$ListKeyboardDelegate","collection","disabledKeys","menuTriggerProps","menuProps","$aUnai$useMenuTrigger","type","onKeyDown","e","key","_delegate_getKeyAbove","_delegate_getFirstKey","preventDefault","selectedKey","getKeyAbove","call","getFirstKey","setSelectedKey","_delegate_getKeyBelow","_delegate_getFirstKey1","getKeyBelow","typeSelectProps","$aUnai$useTypeSelect","selectionManager","onTypeSelect","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","$aUnai$useField","labelElementType","errorMessage","onKeyDownCapture","domProps","$aUnai$filterDOMProps","labelable","triggerProps","$aUnai$mergeProps","valueId","$aUnai$useId","set","onClick","_ref_current","current","focus","$aUnai$setInteractionModality","$aUnai$chain","onKeyUp","id","filter","Boolean","join","onFocus","isFocused","onFocusChange","setFocused","onBlur","isOpen","valueProps","autoFocus","focusStrategy","shouldSelectOnPressUp","shouldFocusOnHover","disallowEmptySelection","linkBehavior","currentTarget","contains","relatedTarget"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\select\\dist\\packages\\@react-aria\\select\\src\\useSelect.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaListBoxOptions} from '@react-aria/listbox';\nimport {AriaSelectProps} from '@react-types/select';\nimport {chain, filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {DOMAttributes, KeyboardDelegate, RefObject, ValidationResult} from '@react-types/shared';\nimport {FocusEvent, useMemo} from 'react';\nimport {ListKeyboardDelegate, useTypeSelect} from '@react-aria/selection';\nimport {SelectState} from '@react-stately/select';\nimport {setInteractionModality} from '@react-aria/interactions';\nimport {useCollator} from '@react-aria/i18n';\nimport {useField} from '@react-aria/label';\nimport {useMenuTrigger} from '@react-aria/menu';\n\nexport interface AriaSelectOptions<T> extends Omit<AriaSelectProps<T>, 'children'> {\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\nexport interface SelectAria<T> extends ValidationResult {\n  /** Props for the label element. */\n  labelProps: DOMAttributes,\n\n  /** Props for the popup trigger element. */\n  triggerProps: AriaButtonProps,\n\n  /** Props for the element representing the selected value. */\n  valueProps: DOMAttributes,\n\n  /** Props for the popup. */\n  menuProps: AriaListBoxOptions<T>,\n\n  /** Props for the select's description element, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Props for the select's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\ninterface SelectData {\n  isDisabled?: boolean,\n  isRequired?: boolean,\n  name?: string,\n  validationBehavior?: 'aria' | 'native'\n}\n\nexport const selectData = new WeakMap<SelectState<any>, SelectData>();\n\n/**\n * Provides the behavior and accessibility implementation for a select component.\n * A select displays a collapsible list of options and allows a user to select one of them.\n * @param props - Props for the select.\n * @param state - State for the select, as returned by `useListState`.\n */\nexport function useSelect<T>(props: AriaSelectOptions<T>, state: SelectState<T>, ref: RefObject<HTMLElement | null>): SelectAria<T> {\n  let {\n    keyboardDelegate,\n    isDisabled,\n    isRequired,\n    name,\n    validationBehavior = 'aria'\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(state.collection, state.disabledKeys, ref, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n\n  let {menuTriggerProps, menuProps} = useMenuTrigger<T>(\n    {\n      isDisabled,\n      type: 'listbox'\n    },\n    state,\n    ref\n  );\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyAbove?.(state.selectedKey) : delegate.getFirstKey?.();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyBelow?.(state.selectedKey) : delegate.getFirstKey?.();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n  });\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n\n  let valueId = useId();\n\n  selectData.set(state, {\n    isDisabled,\n    isRequired,\n    name,\n    validationBehavior\n  });\n\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        if (!props.isDisabled) {\n          ref.current?.focus();\n\n          // Show the focus ring so the user knows where focus went\n          setInteractionModality('keyboard');\n        }\n      }\n    },\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      isDisabled,\n      onKeyDown: chain(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      'aria-labelledby': [\n        valueId,\n        triggerProps['aria-labelledby'],\n        triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null\n      ].filter(Boolean).join(' '),\n      onFocus(e: FocusEvent) {\n        if (state.isFocused) {\n          return;\n        }\n\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(true);\n        }\n\n        state.setFocused(true);\n      },\n      onBlur(e: FocusEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(false);\n        }\n\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      disallowEmptySelection: true,\n      linkBehavior: 'selection',\n      onBlur: (e) => {\n        if (e.currentTarget.contains(e.relatedTarget as Node)) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(false);\n        }\n\n        state.setFocused(false);\n      },\n      'aria-labelledby': [\n        fieldProps['aria-labelledby'],\n        triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null\n      ].filter(Boolean).join(' ')\n    },\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}