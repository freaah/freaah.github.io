{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Keeps a ref count of all hidden elements. Added to when hiding an element, and\n// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.\nlet $5e3802645cc19319$var$refCountMap = new WeakMap();\nlet $5e3802645cc19319$var$observerStack = [];\nfunction $5e3802645cc19319$export$1c3ebcada18427bf(targets) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;\n  let visibleNodes = new Set(targets);\n  let hiddenNodes = new Set();\n  let walk = root => {\n    // Keep live announcer and top layer elements (e.g. toasts) visible.\n    for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]')) visibleNodes.add(element);\n    let acceptNode = node => {\n      // Skip this node and its children if it is one of the target nodes, or a live announcer.\n      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is\n      // made for elements with role=\"row\" since VoiceOver on iOS has issues hiding elements with role=\"row\".\n      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).\n      if (visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row') return NodeFilter.FILTER_REJECT;\n      // Skip this node but continue to children if one of the targets is inside the node.\n      for (let target of visibleNodes) {\n        if (node.contains(target)) return NodeFilter.FILTER_SKIP;\n      }\n      return NodeFilter.FILTER_ACCEPT;\n    };\n    let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: acceptNode\n    });\n    // TreeWalker does not include the root.\n    let acceptRoot = acceptNode(root);\n    if (acceptRoot === NodeFilter.FILTER_ACCEPT) hide(root);\n    if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n      let node = walker.nextNode();\n      while (node != null) {\n        hide(node);\n        node = walker.nextNode();\n      }\n    }\n  };\n  let hide = node => {\n    var _refCountMap_get;\n    let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;\n    // If already aria-hidden, and the ref count is zero, then this element\n    // was already hidden and there's nothing for us to do.\n    if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) return;\n    if (refCount === 0) node.setAttribute('aria-hidden', 'true');\n    hiddenNodes.add(node);\n    $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);\n  };\n  // If there is already a MutationObserver listening from a previous call,\n  // disconnect it so the new on takes over.\n  if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();\n  walk(root);\n  let observer = new MutationObserver(changes => {\n    for (let change of changes) {\n      if (change.type !== 'childList' || change.addedNodes.length === 0) continue;\n      // If the parent element of the added nodes is not within one of the targets,\n      // and not already inside a hidden node, hide all of the new children.\n      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) {\n        for (let node of change.removedNodes) if (node instanceof Element) {\n          visibleNodes.delete(node);\n          hiddenNodes.delete(node);\n        }\n        for (let node of change.addedNodes) {\n          if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')) visibleNodes.add(node);else if (node instanceof Element) walk(node);\n        }\n      }\n    }\n  });\n  observer.observe(root, {\n    childList: true,\n    subtree: true\n  });\n  let observerWrapper = {\n    observe() {\n      observer.observe(root, {\n        childList: true,\n        subtree: true\n      });\n    },\n    disconnect() {\n      observer.disconnect();\n    }\n  };\n  $5e3802645cc19319$var$observerStack.push(observerWrapper);\n  return () => {\n    observer.disconnect();\n    for (let node of hiddenNodes) {\n      let count = $5e3802645cc19319$var$refCountMap.get(node);\n      if (count == null) continue;\n      if (count === 1) {\n        node.removeAttribute('aria-hidden');\n        $5e3802645cc19319$var$refCountMap.delete(node);\n      } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);\n    }\n    // Remove this observer from the stack, and start the previous one.\n    if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {\n      $5e3802645cc19319$var$observerStack.pop();\n      if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();\n    } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);\n  };\n}\nexport { $5e3802645cc19319$export$1c3ebcada18427bf as ariaHideOutside };","map":{"version":3,"names":["$5e3802645cc19319$var$refCountMap","WeakMap","$5e3802645cc19319$var$observerStack","$5e3802645cc19319$export$1c3ebcada18427bf","targets","root","arguments","length","undefined","document","body","visibleNodes","Set","hiddenNodes","walk","element","querySelectorAll","add","acceptNode","node","has","parentElement","getAttribute","NodeFilter","FILTER_REJECT","target","contains","FILTER_SKIP","FILTER_ACCEPT","walker","createTreeWalker","SHOW_ELEMENT","acceptRoot","hide","nextNode","_refCountMap_get","refCount","get","setAttribute","set","disconnect","observer","MutationObserver","changes","change","type","addedNodes","some","removedNodes","Element","delete","HTMLElement","SVGElement","dataset","liveAnnouncer","reactAriaTopLayer","observe","childList","subtree","observerWrapper","push","count","removeAttribute","pop","splice","indexOf"],"sources":["C:\\Users\\rewac\\OneDrive\\Documents\\GitHub\\scatch-store.me\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\ariaHideOutside.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Keeps a ref count of all hidden elements. Added to when hiding an element, and\n// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.\nlet refCountMap = new WeakMap<Element, number>();\ninterface ObserverWrapper {\n  observe: () => void,\n  disconnect: () => void\n}\nlet observerStack: Array<ObserverWrapper> = [];\n\n/**\n * Hides all elements in the DOM outside the given targets from screen readers using aria-hidden,\n * and returns a function to revert these changes. In addition, changes to the DOM are watched\n * and new elements outside the targets are automatically hidden.\n * @param targets - The elements that should remain visible.\n * @param root - Nothing will be hidden above this element.\n * @returns - A function to restore all hidden elements.\n */\nexport function ariaHideOutside(targets: Element[], root = document.body) {\n  let visibleNodes = new Set<Element>(targets);\n  let hiddenNodes = new Set<Element>();\n\n  let walk = (root: Element) => {\n    // Keep live announcer and top layer elements (e.g. toasts) visible.\n    for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]')) {\n      visibleNodes.add(element);\n    }\n\n    let acceptNode = (node: Element) => {\n      // Skip this node and its children if it is one of the target nodes, or a live announcer.\n      // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is\n      // made for elements with role=\"row\" since VoiceOver on iOS has issues hiding elements with role=\"row\".\n      // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).\n      if (\n        visibleNodes.has(node) ||\n        (node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row')\n      ) {\n        return NodeFilter.FILTER_REJECT;\n      }\n\n      // Skip this node but continue to children if one of the targets is inside the node.\n      for (let target of visibleNodes) {\n        if (node.contains(target)) {\n          return NodeFilter.FILTER_SKIP;\n        }\n      }\n\n      return NodeFilter.FILTER_ACCEPT;\n    };\n\n    let walker = document.createTreeWalker(\n      root,\n      NodeFilter.SHOW_ELEMENT,\n      {acceptNode}\n    );\n\n    // TreeWalker does not include the root.\n    let acceptRoot = acceptNode(root);\n    if (acceptRoot === NodeFilter.FILTER_ACCEPT) {\n      hide(root);\n    }\n\n    if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n      let node = walker.nextNode() as Element;\n      while (node != null) {\n        hide(node);\n        node = walker.nextNode() as Element;\n      }\n    }\n  };\n\n  let hide = (node: Element) => {\n    let refCount = refCountMap.get(node) ?? 0;\n\n    // If already aria-hidden, and the ref count is zero, then this element\n    // was already hidden and there's nothing for us to do.\n    if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) {\n      return;\n    }\n\n    if (refCount === 0) {\n      node.setAttribute('aria-hidden', 'true');\n    }\n\n    hiddenNodes.add(node);\n    refCountMap.set(node, refCount + 1);\n  };\n\n  // If there is already a MutationObserver listening from a previous call,\n  // disconnect it so the new on takes over.\n  if (observerStack.length) {\n    observerStack[observerStack.length - 1].disconnect();\n  }\n\n  walk(root);\n\n  let observer = new MutationObserver(changes => {\n    for (let change of changes) {\n      if (change.type !== 'childList' || change.addedNodes.length === 0) {\n        continue;\n      }\n\n      // If the parent element of the added nodes is not within one of the targets,\n      // and not already inside a hidden node, hide all of the new children.\n      if (![...visibleNodes, ...hiddenNodes].some(node => node.contains(change.target))) {\n        for (let node of change.removedNodes) {\n          if (node instanceof Element) {\n            visibleNodes.delete(node);\n            hiddenNodes.delete(node);\n          }\n        }\n\n        for (let node of change.addedNodes) {\n          if (\n            (node instanceof HTMLElement || node instanceof SVGElement) &&\n            (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')\n          ) {\n            visibleNodes.add(node);\n          } else if (node instanceof Element) {\n            walk(node);\n          }\n        }\n      }\n    }\n  });\n\n  observer.observe(root, {childList: true, subtree: true});\n\n  let observerWrapper: ObserverWrapper = {\n    observe() {\n      observer.observe(root, {childList: true, subtree: true});\n    },\n    disconnect() {\n      observer.disconnect();\n    }\n  };\n\n  observerStack.push(observerWrapper);\n\n  return () => {\n    observer.disconnect();\n\n    for (let node of hiddenNodes) {\n      let count = refCountMap.get(node);\n      if (count == null) {\n        continue;\n      }\n      if (count === 1) {\n        node.removeAttribute('aria-hidden');\n        refCountMap.delete(node);\n      } else {\n        refCountMap.set(node, count - 1);\n      }\n    }\n\n    // Remove this observer from the stack, and start the previous one.\n    if (observerWrapper === observerStack[observerStack.length - 1]) {\n      observerStack.pop();\n      if (observerStack.length) {\n        observerStack[observerStack.length - 1].observe();\n      }\n    } else {\n      observerStack.splice(observerStack.indexOf(observerWrapper), 1);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}