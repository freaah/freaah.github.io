import React from "react";
import { SelectProps, SelectValue } from "react-aria-components";
import { HasControlContextData, Registerable } from "./utils";
import { WithVariants } from "./variant-utils";
export interface BaseSelectValueProps extends React.ComponentProps<typeof SelectValue> {
    customize?: boolean;
}
export declare const BaseSelectValue: (props: BaseSelectValueProps) => React.JSX.Element;
export interface BaseSelectControlContextData {
    itemIds: string[];
}
declare const SELECT_VARIANTS: ("disabled" | "focused" | "focusVisible")[];
export interface BaseSelectProps extends SelectProps<{}>, // NOTE: We don't need generic type here since we don't use items prop (that needs it). We just need to make the type checker happy
WithVariants<typeof SELECT_VARIANTS>, HasControlContextData<BaseSelectControlContextData> {
    children?: React.ReactNode;
    className?: string;
}
export declare function BaseSelect(props: BaseSelectProps): React.JSX.Element;
export declare function registerSelect(loader?: Registerable): void;
export {};
