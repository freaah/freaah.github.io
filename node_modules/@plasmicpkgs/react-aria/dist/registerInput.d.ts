import React, { ChangeEvent } from "react";
import type { InputProps } from "react-aria-components";
import { CodeComponentMetaOverrides, HasControlContextData, Registerable } from "./utils";
import { WithVariants } from "./variant-utils";
declare const INPUT_VARIANTS: ("disabled" | "hovered" | "focused" | "focusVisible")[];
export interface BaseInputProps extends Omit<InputProps, "autoComplete" | "className">, HasControlContextData, WithVariants<typeof INPUT_VARIANTS> {
    autoComplete?: string[];
    isUncontrolled?: boolean;
    className?: string;
}
export declare const inputHelpers: {
    states: {
        value: {
            onChangeArgsToValue: (e: ChangeEvent<HTMLInputElement>) => string;
        };
    };
};
export declare function BaseInput(props: BaseInputProps): React.JSX.Element;
export declare const INPUT_COMPONENT_NAME: string;
export declare function registerInput(loader?: Registerable, overrides?: CodeComponentMetaOverrides<typeof BaseInput>): void;
export {};
