{"version":3,"file":"registerListBoxItem.cjs.js","sources":["../src/registerListBoxItem.tsx"],"sourcesContent":["import { PlasmicElement } from \"@plasmicapp/host\";\nimport React, { useEffect, useState } from \"react\";\nimport { ListBox, ListBoxItem } from \"react-aria-components\";\nimport { COMMON_STYLES } from \"./common\";\nimport { PlasmicListBoxContext } from \"./contexts\";\nimport { DESCRIPTION_COMPONENT_NAME } from \"./registerDescription\";\nimport { TEXT_COMPONENT_NAME } from \"./registerText\";\nimport {\n  CodeComponentMetaOverrides,\n  HasControlContextData,\n  makeComponentName,\n  Registerable,\n  registerComponentHelper,\n} from \"./utils\";\nimport { pickAriaComponentVariants, WithVariants } from \"./variant-utils\";\n\nconst LIST_BOX_ITEM_VARIANTS = [\n  \"hovered\" as const,\n  \"pressed\" as const,\n  \"focused\" as const,\n  \"focusVisible\" as const,\n  \"selected\" as const,\n  \"disabled\" as const,\n];\n\nconst { variants, withObservedValues } = pickAriaComponentVariants(\n  LIST_BOX_ITEM_VARIANTS\n);\n\nexport interface BaseListBoxControlContextData {\n  idError?: string;\n}\n\nexport interface BaseListBoxItemProps\n  extends React.ComponentProps<typeof ListBoxItem>,\n    HasControlContextData<BaseListBoxControlContextData>,\n    WithVariants<typeof LIST_BOX_ITEM_VARIANTS> {\n  id?: string;\n  children?: React.ReactNode;\n}\n\nexport function BaseListBoxItem(props: BaseListBoxItemProps) {\n  const { children, setControlContextData, plasmicUpdateVariant, id, ...rest } =\n    props;\n  const listboxContext = React.useContext(PlasmicListBoxContext);\n  const isStandalone = !listboxContext;\n  /**\n   * Ids of each listboxitem inside a listbox have to be unique. Otherwise, the items won't show up in the listbox.\n   * This is particularly important to ensure, because the most common use case would be to apply Repeat Element to the listbox item.\n   * The ids of each repeated item will initially be the same (until the user changes the id prop of the listboxitem).\n   *\n   * The registerId, therefore, is the unique id of the listboxitem.\n   * It is the id registered with the listbox context, so that it can auto-generate a unique id if it identifies a duplicate.\n   */\n  const [registeredId, setRegisteredId] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (!listboxContext) {\n      return;\n    }\n\n    const localId = listboxContext.idManager.register(id);\n    setRegisteredId(localId);\n\n    return () => {\n      listboxContext.idManager.unregister(localId);\n      setRegisteredId(undefined);\n    };\n  }, [id]);\n\n  setControlContextData?.({\n    idError: (() => {\n      if (id === undefined) {\n        return \"ID must be defined\";\n      }\n      if (typeof id !== \"string\") {\n        return \"ID must be a string\";\n      }\n      if (!id.trim()) {\n        return \"ID must be defined\";\n      }\n      if (!isStandalone && id != registeredId) {\n        return \"ID must be unique\";\n      }\n      return undefined;\n    })(),\n  });\n\n  const listboxItem = (\n    <ListBoxItem\n      key={registeredId}\n      id={registeredId}\n      {...rest}\n      style={COMMON_STYLES}\n    >\n      {({\n        isHovered,\n        isPressed,\n        isFocused,\n        isFocusVisible,\n        isSelected,\n        isDisabled,\n      }) =>\n        withObservedValues(\n          children,\n          {\n            hovered: isHovered,\n            pressed: isPressed,\n            focused: isFocused,\n            focusVisible: isFocusVisible,\n            selected: isSelected,\n            disabled: isDisabled,\n          },\n          plasmicUpdateVariant\n        )\n      }\n    </ListBoxItem>\n  );\n\n  if (isStandalone) {\n    // selection mode needs to be single/multiple to be able to trigger hover state on it.\n    return <ListBox selectionMode=\"single\">{listboxItem}</ListBox>;\n  }\n\n  return listboxItem;\n}\n\nexport const makeDefaultListBoxItemChildren = (\n  label: string,\n  description?: string\n): PlasmicElement => ({\n  type: \"vbox\",\n  styles: {\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    gap: \"2px\",\n  },\n  children: [\n    {\n      type: \"component\",\n      name: TEXT_COMPONENT_NAME,\n      props: {\n        slot: \"label\",\n        children: {\n          type: \"text\",\n          styles: {\n            fontWeight: 500,\n          },\n          value: label,\n        },\n      },\n    },\n    {\n      type: \"component\",\n      name: DESCRIPTION_COMPONENT_NAME,\n      props: {\n        children: {\n          type: \"text\",\n          styles: {\n            color: \"#838383\",\n          },\n          value: description ?? `Some description for ${label}...`,\n        },\n      },\n    },\n  ],\n});\n\nexport function registerListBoxItem(\n  loader?: Registerable,\n  overrides?: CodeComponentMetaOverrides<typeof BaseListBoxItem>\n) {\n  return registerComponentHelper(\n    loader,\n    BaseListBoxItem,\n    {\n      name: makeComponentName(\"item\"),\n      displayName: \"Aria ListBoxItem\",\n      importPath: \"@plasmicpkgs/react-aria/skinny/registerListBoxItem\",\n      importName: \"BaseListBoxItem\",\n      variants,\n      props: {\n        id: {\n          type: \"string\",\n          description: \"A unique value for tracking the selected item in state\",\n          required: true,\n          displayName: \"Value\",\n          validator: (_value, _props, ctx) => {\n            if (ctx?.idError) {\n              return ctx.idError;\n            }\n            return true;\n          },\n        },\n        textValue: {\n          type: \"string\",\n          displayName: \"Label\",\n          description:\n            \"A user-friendly text representation of the item's contents, used for features like typeahead.\",\n        },\n        children: {\n          type: \"slot\",\n          mergeWithParent: true,\n          defaultValue: makeDefaultListBoxItemChildren(\"Item\"),\n        },\n      },\n      trapsFocus: true,\n    },\n    overrides\n  );\n}\n"],"names":["pickAriaComponentVariants","React","PlasmicListBoxContext","useState","useEffect","ListBoxItem","COMMON_STYLES","ListBox","TEXT_COMPONENT_NAME","DESCRIPTION_COMPONENT_NAME","registerComponentHelper","makeComponentName"],"mappings":"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"}