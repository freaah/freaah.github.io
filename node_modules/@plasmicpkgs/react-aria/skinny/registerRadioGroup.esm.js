import React, { useState, useMemo, useEffect } from 'react';
import { RadioGroup } from 'react-aria-components';
import { g as getCommonProps, C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { e as PlasmicRadioGroupContext } from './contexts-5cb81c2f.esm.js';
import { O as OptionsItemIdManager } from './OptionsItemIdManager-832b8cfe.esm.js';
import { DESCRIPTION_COMPONENT_NAME } from './registerDescription.esm.js';
import { LABEL_COMPONENT_NAME } from './registerLabel.esm.js';
import { registerRadio, makeDefaultRadioChildren } from './registerRadio.esm.js';
import { a as makeChildComponentName, r as registerComponentHelper, m as makeComponentName } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import './registerText.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const RADIO_GROUP_VARIANTS = ["disabled", "readonly"];
const { variants, withObservedValues } = pickAriaComponentVariants(RADIO_GROUP_VARIANTS);
function BaseRadioGroup(props) {
  const _a = props, { children, plasmicUpdateVariant, setControlContextData } = _a, rest = __objRest(_a, ["children", "plasmicUpdateVariant", "setControlContextData"]);
  const [ids, setIds] = useState([]);
  const idManager = useMemo(() => new OptionsItemIdManager(), []);
  useEffect(() => {
    setControlContextData == null ? void 0 : setControlContextData({
      values: ids
    });
  }, [ids, setControlContextData]);
  useEffect(() => {
    idManager.subscribe((_ids) => {
      setIds(_ids);
    });
  }, [idManager]);
  return /* @__PURE__ */ React.createElement(PlasmicRadioGroupContext.Provider, { value: __spreadProps(__spreadValues({}, props), { idManager }) }, /* @__PURE__ */ React.createElement(RadioGroup, __spreadProps(__spreadValues({}, rest), { style: COMMON_STYLES }), ({ isDisabled, isReadOnly }) => withObservedValues(
    children,
    {
      disabled: isDisabled,
      readonly: isReadOnly
    },
    plasmicUpdateVariant
  )));
}
const RADIO_GROUP_COMPONENT_NAME = makeComponentName("radioGroup");
function registerRadioGroup(loader, overrides) {
  const thisName = makeChildComponentName(
    overrides == null ? void 0 : overrides.parentComponentName,
    RADIO_GROUP_COMPONENT_NAME
  );
  const radioMeta = registerRadio(loader, { parentComponentName: thisName });
  registerComponentHelper(
    loader,
    BaseRadioGroup,
    {
      name: RADIO_GROUP_COMPONENT_NAME,
      displayName: "Aria RadioGroup",
      importPath: "@plasmicpkgs/react-aria/skinny/registerRadioGroup",
      importName: "BaseRadioGroup",
      variants,
      props: __spreadProps(__spreadValues({}, getCommonProps("radio group", [
        "name",
        "isDisabled",
        "isReadOnly",
        "aria-label",
        "isRequired"
      ])), {
        children: {
          type: "slot",
          defaultValue: [
            {
              type: "vbox",
              styles: {
                display: "flex",
                gap: "5px",
                padding: 0,
                alignItems: "flex-start"
              },
              children: [
                {
                  type: "component",
                  name: LABEL_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Radio Group"
                    }
                  }
                },
                {
                  type: "component",
                  name: radioMeta.name,
                  props: {
                    children: makeDefaultRadioChildren("Radio 1"),
                    value: "radio1"
                  }
                },
                {
                  type: "component",
                  name: radioMeta.name,
                  props: {
                    children: makeDefaultRadioChildren("Radio 2"),
                    value: "radio2"
                  }
                },
                {
                  type: "component",
                  name: radioMeta.name,
                  props: {
                    children: makeDefaultRadioChildren("Radio 3"),
                    value: "radio3"
                  }
                },
                {
                  type: "component",
                  name: DESCRIPTION_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Use the registered variants to see it in action..."
                    }
                  }
                }
              ]
            }
          ]
        },
        value: {
          type: "choice",
          editOnly: true,
          displayName: "Initial value",
          uncontrolledProp: "defaultValue",
          description: "The current value",
          options: (_props, ctx) => (ctx == null ? void 0 : ctx.values) ? Array.from(ctx.values) : [],
          multiSelect: false
        },
        isInvalid: {
          displayName: "Invalid",
          type: "boolean",
          description: "Whether the input value is invalid",
          defaultValueHint: false
        },
        validationBehavior: {
          type: "choice",
          options: ["native", "aria"],
          description: "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
          defaultValueHint: "native"
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "string" }]
        }
      }),
      states: {
        value: {
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "array"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseRadioGroup, registerRadioGroup };
//# sourceMappingURL=registerRadioGroup.esm.js.map
