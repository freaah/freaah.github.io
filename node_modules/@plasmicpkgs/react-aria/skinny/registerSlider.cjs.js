'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var contexts = require('./contexts-6d0cb2b1.cjs.js');
var registerLabel = require('./registerLabel.cjs.js');
var registerSliderOutput = require('./registerSliderOutput.cjs.js');
var registerSliderThumb = require('./registerSliderThumb.cjs.js');
var registerSliderTrack = require('./registerSliderTrack.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('react-keyed-flatten-children');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const SLIDER_COMPONENT_NAME = utils.makeComponentName("slider");
const RANGE_SLIDER_COMPONENT_NAME = utils.makeComponentName("range-slider");
const SLIDER_VARIANTS = ["disabled"];
const { variants, withObservedValues } = variantUtils.pickAriaComponentVariants(SLIDER_VARIANTS);
function BaseSlider(props) {
  const _a = props, { children, plasmicUpdateVariant } = _a, rest = __objRest(_a, ["children", "plasmicUpdateVariant"]);
  return /* @__PURE__ */ React__default.default.createElement(
    contexts.PlasmicSliderContext.Provider,
    {
      value: __spreadProps(__spreadValues({}, rest), {
        // Here's why the type casting is needed here: https://github.com/Microsoft/TypeScript/issues/3410
        onChange: rest.onChange,
        onChangeEnd: rest.onChangeEnd
      })
    },
    /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.Slider, __spreadProps(__spreadValues({}, rest), { style: common.COMMON_STYLES }), ({ isDisabled }) => withObservedValues(
      children,
      {
        disabled: isDisabled
      },
      plasmicUpdateVariant
    ))
  );
}
function getCommonSliderProps() {
  return {
    orientation: {
      type: "choice",
      options: ["horizontal", "vertical"],
      defaultValueHint: "horizontal",
      defaultValue: "horizontal"
    },
    minValue: {
      type: "number",
      description: "The minimum value of the slider",
      defaultValueHint: 0
    },
    maxValue: {
      type: "number",
      description: "The maximum value of the slider",
      defaultValueHint: 100
    },
    step: {
      type: "number",
      description: "The step value of the slider",
      defaultValueHint: 1
    }
  };
}
function registerSlider(loader, overrides) {
  const sliderOutputMeta = registerSliderOutput.registerSliderOutput(loader, {
    parentComponentName: SLIDER_COMPONENT_NAME
  });
  const sliderThumbMeta = registerSliderThumb.registerSliderThumb(loader, {
    parentComponentName: SLIDER_COMPONENT_NAME
  });
  const sliderTrackMeta = registerSliderTrack.registerSliderTrack(sliderThumbMeta, loader, {
    parentComponentName: SLIDER_COMPONENT_NAME
  });
  utils.registerComponentHelper(
    loader,
    BaseSlider,
    {
      name: RANGE_SLIDER_COMPONENT_NAME,
      displayName: "Aria Range Slider",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSlider",
      importName: "BaseSlider",
      variants,
      defaultStyles: {
        width: "300px"
      },
      props: __spreadProps(__spreadValues(__spreadValues({}, common.getCommonProps("slider", [
        "isDisabled",
        "aria-label"
      ])), getCommonSliderProps()), {
        value: {
          type: "array",
          editOnly: true,
          displayName: "Initial value",
          uncontrolledProp: "defaultValue",
          description: "The intial value of the slider",
          defaultValue: [20, 50],
          validator: (value) => {
            if (!Array.isArray(value)) {
              return "Input must be an array.";
            }
            for (let i = 1; i < value.length; i++) {
              if (value[i] < value[i - 1]) {
                return "Array elements are not in ascending order.";
              }
            }
            return true;
          }
        },
        children: {
          type: "slot",
          defaultValue: [
            {
              type: "hbox",
              styles: {
                width: "stretch",
                justifyContent: "space-between",
                padding: "8px 0px"
              },
              children: [
                {
                  type: "component",
                  name: registerLabel.LABEL_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Label"
                    }
                  }
                },
                {
                  type: "component",
                  name: sliderOutputMeta.name,
                  props: {
                    children: {
                      type: "text",
                      value: "Output"
                    }
                  }
                }
              ]
            },
            {
              type: "component",
              name: sliderTrackMeta.name,
              props: {
                children: [
                  {
                    type: "component",
                    name: sliderThumbMeta.name
                  },
                  {
                    type: "component",
                    name: sliderThumbMeta.name,
                    styles: {
                      backgroundColor: "blue"
                    }
                  }
                ]
              }
            }
          ]
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "object" }]
        },
        onChangeEnd: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "object" }]
        }
      }),
      states: {
        value: {
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "array"
        }
      },
      trapsFocus: true
    },
    {
      parentComponentName: SLIDER_COMPONENT_NAME
    }
  );
  utils.registerComponentHelper(
    loader,
    BaseSlider,
    {
      name: SLIDER_COMPONENT_NAME,
      displayName: "Aria Slider",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSlider",
      importName: "BaseSlider",
      variants,
      defaultStyles: {
        width: "300px"
      },
      props: __spreadProps(__spreadValues(__spreadValues({}, common.getCommonProps("slider", [
        "isDisabled",
        "aria-label"
      ])), getCommonSliderProps()), {
        children: {
          type: "slot",
          defaultValue: [
            {
              type: "hbox",
              styles: {
                width: "stretch",
                justifyContent: "space-between",
                padding: "8px 0px"
              },
              children: [
                {
                  type: "component",
                  name: registerLabel.LABEL_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Label"
                    }
                  }
                },
                {
                  type: "component",
                  name: sliderOutputMeta.name,
                  props: {
                    children: {
                      type: "text",
                      value: "Output"
                    }
                  }
                }
              ]
            },
            {
              type: "component",
              name: sliderTrackMeta.name
            }
          ]
        },
        value: {
          type: "number",
          editOnly: true,
          displayName: "Initial value",
          uncontrolledProp: "defaultValue",
          description: "The initial value of the slider",
          defaultValueHint: 0,
          defaultValue: 0
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "number" }]
        },
        onChangeEnd: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "number" }]
        }
      }),
      states: {
        value: {
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "number"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseSlider = BaseSlider;
exports.registerSlider = registerSlider;
//# sourceMappingURL=registerSlider.cjs.js.map
