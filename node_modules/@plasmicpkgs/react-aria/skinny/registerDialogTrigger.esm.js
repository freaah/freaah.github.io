import { usePlasmicCanvasComponentInfo } from '@plasmicapp/host';
import React from 'react';
import { DialogTrigger } from 'react-aria-components';
import { d as PlasmicDialogTriggerContext } from './contexts-5cb81c2f.esm.js';
import { BUTTON_COMPONENT_NAME } from './registerButton.esm.js';
import { DIALOG_COMPONENT_NAME } from './registerDialog.esm.js';
import { MODAL_COMPONENT_NAME, MODAL_DEFAULT_SLOT_CONTENT } from './registerModal.esm.js';
import { r as registerComponentHelper, m as makeComponentName } from './utils-5d1b4c6b.esm.js';
import 'react-aria';
import './common-ceebbaea.esm.js';
import './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function BaseDialogTrigger(props) {
  var _b, _c, _d;
  const _a = props, { trigger, dialog, isOpen } = _a, rest = __objRest(_a, ["trigger", "dialog", "isOpen"]);
  const { isSelected, selectedSlotName } = (_c = (_b = usePlasmicCanvasComponentInfo) == null ? void 0 : _b(props)) != null ? _c : {};
  const isAutoOpen = selectedSlotName !== "trigger" && isSelected;
  const mergedProps = __spreadProps(__spreadValues({}, rest), {
    isOpen: (_d = isAutoOpen || isOpen) != null ? _d : false
  });
  return /* @__PURE__ */ React.createElement(PlasmicDialogTriggerContext.Provider, { value: mergedProps }, /* @__PURE__ */ React.createElement(DialogTrigger, __spreadValues({}, mergedProps), trigger, dialog));
}
function registerDialogTrigger(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseDialogTrigger,
    {
      name: makeComponentName("dialogTrigger"),
      displayName: "Aria Dialog Trigger",
      importPath: "@plasmicpkgs/react-aria/skinny/registerDialogTrigger",
      importName: "BaseDialogTrigger",
      styleSections: false,
      props: {
        trigger: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: {
            type: "component",
            name: BUTTON_COMPONENT_NAME,
            props: {
              children: {
                type: "text",
                value: "Open Dialog"
              }
            }
          }
        },
        dialog: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: [
            {
              type: "component",
              name: MODAL_COMPONENT_NAME,
              props: {
                children: {
                  type: "component",
                  name: DIALOG_COMPONENT_NAME,
                  props: {
                    children: MODAL_DEFAULT_SLOT_CONTENT
                  }
                }
              }
            }
          ]
        },
        isOpen: {
          type: "boolean",
          defaultValueHint: false,
          editOnly: true,
          uncontrolledProp: "defaultOpen"
        },
        onOpenChange: {
          type: "eventHandler",
          argTypes: [{ name: "isOpen", type: "boolean" }]
        }
      },
      states: {
        isOpen: {
          type: "writable",
          valueProp: "isOpen",
          onChangeProp: "onOpenChange",
          variableType: "boolean"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseDialogTrigger, registerDialogTrigger };
//# sourceMappingURL=registerDialogTrigger.esm.js.map
