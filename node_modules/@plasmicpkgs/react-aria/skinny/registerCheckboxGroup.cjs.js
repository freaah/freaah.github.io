'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var contexts = require('./contexts-6d0cb2b1.cjs.js');
var OptionsItemIdManager = require('./OptionsItemIdManager-a89a28b9.cjs.js');
var registerCheckbox = require('./registerCheckbox.cjs.js');
var registerDescription = require('./registerDescription.cjs.js');
var registerLabel = require('./registerLabel.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('./registerText.cjs.js');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const CHECKBOX_GROUP_VARIANTS = ["disabled", "readonly"];
const { variants, withObservedValues } = variantUtils.pickAriaComponentVariants(
  CHECKBOX_GROUP_VARIANTS
);
function BaseCheckboxGroup(props) {
  const _a = props, { children, plasmicUpdateVariant, setControlContextData } = _a, rest = __objRest(_a, ["children", "plasmicUpdateVariant", "setControlContextData"]);
  const [ids, setIds] = React.useState([]);
  const idManager = React.useMemo(() => new OptionsItemIdManager.OptionsItemIdManager(), []);
  React.useEffect(() => {
    setControlContextData == null ? void 0 : setControlContextData({
      values: ids
    });
  }, [ids, setControlContextData]);
  React.useEffect(() => {
    idManager.subscribe((_ids) => {
      setIds(_ids);
    });
  }, [idManager]);
  return /* @__PURE__ */ React__default.default.createElement(contexts.PlasmicCheckboxGroupContext.Provider, { value: __spreadProps(__spreadValues({}, rest), { idManager }) }, /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.CheckboxGroup, __spreadProps(__spreadValues({}, rest), { style: common.COMMON_STYLES }), ({ isDisabled, isReadOnly }) => withObservedValues(
    children,
    {
      disabled: isDisabled,
      readonly: isReadOnly
    },
    plasmicUpdateVariant
  )));
}
const componentName = utils.makeComponentName("checkboxGroup");
function registerCheckboxGroup(loader, overrides) {
  utils.registerComponentHelper(
    loader,
    BaseCheckboxGroup,
    {
      name: componentName,
      displayName: "Aria Checkbox Group",
      importPath: "@plasmicpkgs/react-aria/skinny/registerCheckboxGroup",
      importName: "BaseCheckboxGroup",
      variants,
      props: __spreadProps(__spreadValues({}, common.getCommonProps("checkbox group", [
        "name",
        "isDisabled",
        "isReadOnly",
        "aria-label",
        "isRequired"
      ])), {
        children: {
          type: "slot",
          defaultValue: [
            {
              type: "vbox",
              styles: {
                display: "flex",
                gap: "5px",
                padding: 0,
                alignItems: "flex-start"
              },
              children: [
                {
                  type: "component",
                  name: registerLabel.LABEL_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Checkbox Group"
                    }
                  }
                },
                {
                  type: "component",
                  name: registerCheckbox.CHECKBOX_COMPONENT_NAME,
                  props: {
                    children: registerCheckbox.makeDefaultCheckboxChildren({
                      label: "Checkbox 1",
                      showDocs: false
                    }),
                    value: "checkbox1"
                  }
                },
                {
                  type: "component",
                  name: registerCheckbox.CHECKBOX_COMPONENT_NAME,
                  props: {
                    children: registerCheckbox.makeDefaultCheckboxChildren({
                      label: "Checkbox 2",
                      showDocs: false
                    }),
                    value: "checkbox2"
                  }
                },
                {
                  type: "component",
                  name: registerCheckbox.CHECKBOX_COMPONENT_NAME,
                  props: {
                    children: registerCheckbox.makeDefaultCheckboxChildren({
                      label: "Checkbox 3",
                      showDocs: false
                    }),
                    value: "checkbox3"
                  }
                },
                {
                  type: "component",
                  name: registerDescription.DESCRIPTION_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Use the registered variants to see it in action..."
                    }
                  }
                }
              ]
            }
          ]
        },
        value: {
          type: "choice",
          editOnly: true,
          uncontrolledProp: "defaultValue",
          description: "The current value",
          options: (_props, ctx) => (ctx == null ? void 0 : ctx.values) ? Array.from(ctx.values) : [],
          multiSelect: true
        },
        isInvalid: {
          displayName: "Invalid",
          type: "boolean",
          description: "Whether the input value is invalid",
          defaultValueHint: false
        },
        validationBehavior: {
          type: "choice",
          options: ["native", "aria"],
          description: "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
          defaultValueHint: "native"
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "value", type: "object" }]
        }
      }),
      states: {
        value: {
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "array"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseCheckboxGroup = BaseCheckboxGroup;
exports.registerCheckboxGroup = registerCheckboxGroup;
//# sourceMappingURL=registerCheckboxGroup.cjs.js.map
