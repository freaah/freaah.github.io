import { CodeComponentMeta } from "@plasmicapp/host";
import React from "react";
declare const ARIA_COMPONENTS_VARIANTS: {
    hovered: {
        cssSelector: string;
        displayName: string;
    };
    pressed: {
        cssSelector: string;
        displayName: string;
    };
    focused: {
        cssSelector: string;
        displayName: string;
    };
    focusVisible: {
        cssSelector: string;
        displayName: string;
    };
    dragging: {
        cssSelector: string;
        displayName: string;
    };
    selected: {
        cssSelector: string;
        displayName: string;
    };
    readonly: {
        cssSelector: string;
        displayName: string;
    };
    disabled: {
        cssSelector: string;
        displayName: string;
    };
    indeterminate: {
        cssSelector: string;
        displayName: string;
    };
    placementLeft: {
        cssSelector: string;
        displayName: string;
    };
    placementRight: {
        cssSelector: string;
        displayName: string;
    };
    placementTop: {
        cssSelector: string;
        displayName: string;
    };
    placementBottom: {
        cssSelector: string;
        displayName: string;
    };
};
type AriaVariant = keyof typeof ARIA_COMPONENTS_VARIANTS;
type CodeComponentVariantsMeta = NonNullable<CodeComponentMeta<unknown>["variants"]>;
type VariantMeta = CodeComponentVariantsMeta[string];
type ArrayElement<T> = T extends (infer U)[] ? U : never;
export type UpdateVariant<T extends AriaVariant[]> = ((changes: Partial<Record<ArrayElement<T>, boolean>>) => void) | undefined;
export interface WithVariants<T extends AriaVariant[]> {
    plasmicUpdateVariant?: UpdateVariant<T>;
}
type WithObservedValues<T extends AriaVariant[]> = (children: React.ReactNode, state: Record<ArrayElement<T>, boolean>, updateVariant: UpdateVariant<T>) => React.ReactNode;
export declare function pickAriaComponentVariants<T extends AriaVariant[]>(keys: T): {
    variants: Record<ArrayElement<T>, VariantMeta>;
    withObservedValues: WithObservedValues<T>;
};
export {};
