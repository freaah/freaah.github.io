'use strict';

var host = require('@plasmicapp/host');
var React = require('react');
var reactAria = require('react-aria');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var contexts = require('./contexts-6d0cb2b1.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const BaseModal = React.forwardRef(
  function BaseModalInner(props, ref) {
    var _b, _c, _d;
    const _a = props, {
      children,
      modalOverlayClass,
      className,
      isOpen,
      resetClassName,
      setControlContextData,
      isDismissable
    } = _a, rest = __objRest(_a, [
      "children",
      "modalOverlayClass",
      "className",
      "isOpen",
      "resetClassName",
      "setControlContextData",
      "isDismissable"
    ]);
    const canvasCtx = host.usePlasmicCanvasContext();
    const isEditMode = canvasCtx && canvasCtx.interactive === false;
    const isSelected = (_d = (_c = (_b = host.usePlasmicCanvasComponentInfo) == null ? void 0 : _b(props)) == null ? void 0 : _c.isSelected) != null ? _d : false;
    const contextProps = React__default.default.useContext(contexts.PlasmicDialogTriggerContext);
    const isStandalone = !contextProps;
    const mergedProps = reactAria.mergeProps(contextProps, rest, {
      isOpen: isStandalone ? isSelected || isOpen : contextProps.isOpen,
      /*
              isDismissable on canvas (non-interactive mode) causes the following two issues:
              1. Clicking anywhere inside the modal dismisses it
              2. If the modal is auto-opened due to selection in outline tab, the modal stays open despite issue #1, but the text elements inside the modal are no longer selectable, and therefore the text or headings inside the modal are not editable.
      
              To fix the above issue, we set an interim isDismissable state to false in edit mode, because it only matters in interactive mode.
            */
      isDismissable: isEditMode ? false : isDismissable
    });
    setControlContextData == null ? void 0 : setControlContextData({
      parent: isStandalone ? void 0 : {}
    });
    React.useImperativeHandle(ref, () => ({
      close: () => {
        var _a2;
        (_a2 = mergedProps.onOpenChange) == null ? void 0 : _a2.call(mergedProps, false);
      },
      open: () => {
        var _a2;
        (_a2 = mergedProps.onOpenChange) == null ? void 0 : _a2.call(mergedProps, true);
      }
    }));
    return /* @__PURE__ */ React__default.default.createElement(
      reactAriaComponents.ModalOverlay,
      __spreadProps(__spreadValues({}, mergedProps), {
        className: `${resetClassName} ${modalOverlayClass}`
      }),
      /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.Modal, { className }, children)
    );
  }
);
const MODAL_COMPONENT_NAME = utils.makeComponentName("modal");
const MODAL_DEFAULT_SLOT_CONTENT = {
  type: "vbox",
  styles: {
    width: "stretch",
    padding: 0,
    gap: "10px",
    justifyContent: "flex-start",
    alignItems: "flex-start"
  },
  children: [
    {
      type: "text",
      value: "Heading",
      tag: "h2"
    },
    {
      type: "text",
      value: "This is a Modal!"
    },
    {
      type: "text",
      value: "You can put anything you can imagine here!",
      styles: {
        fontWeight: 500
      }
    },
    {
      type: "text",
      value: "Use it in a `Aria Dialog Trigger` component to trigger it on a button click!"
    }
  ]
};
function registerModal(loader, overrides) {
  utils.registerComponentHelper(
    loader,
    BaseModal,
    {
      name: MODAL_COMPONENT_NAME,
      displayName: "Aria Modal",
      importPath: "@plasmicpkgs/react-aria/skinny/registerModal",
      importName: "BaseModal",
      styleSections: true,
      defaultStyles: {
        // centering the modal on the page by default
        position: "fixed",
        top: "10%",
        left: "50%",
        width: "50%",
        transform: "translateX(-50%)",
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "black",
        padding: "20px",
        maxWidth: "300px",
        backgroundColor: "#FDE3C3"
      },
      refActions: {
        open: {
          description: "Open the modal",
          argTypes: []
        },
        close: {
          description: "Close the modal",
          argTypes: []
        }
      },
      props: {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: MODAL_DEFAULT_SLOT_CONTENT
        },
        modalOverlayClass: {
          type: "class",
          displayName: "Modal Overlay"
        },
        isOpen: {
          type: "boolean",
          editOnly: true,
          uncontrolledProp: "defaultOpen",
          defaultValueHint: true,
          defaultValue: true,
          hidden: common.hasParent
        },
        isDismissable: {
          type: "boolean",
          description: "Whether to close the modal when the user interacts outside it."
        },
        isKeyboardDismissDisabled: {
          type: "boolean",
          description: "Whether pressing the escape key to close the modal should be disabled."
        },
        onOpenChange: {
          type: "eventHandler",
          argTypes: [{ name: "isOpen", type: "boolean" }]
        },
        resetClassName: {
          type: "themeResetClass"
        }
      },
      states: {
        isOpen: {
          type: "writable",
          valueProp: "isOpen",
          onChangeProp: "onOpenChange",
          variableType: "boolean",
          hidden: common.hasParent
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseModal = BaseModal;
exports.MODAL_COMPONENT_NAME = MODAL_COMPONENT_NAME;
exports.MODAL_DEFAULT_SLOT_CONTENT = MODAL_DEFAULT_SLOT_CONTENT;
exports.registerModal = registerModal;
//# sourceMappingURL=registerModal.cjs.js.map
