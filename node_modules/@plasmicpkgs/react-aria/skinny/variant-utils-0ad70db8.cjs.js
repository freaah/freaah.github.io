'use strict';

var React = require('react');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const ARIA_COMPONENTS_VARIANTS = {
  hovered: {
    cssSelector: "[data-hovered]",
    displayName: "Hovered"
  },
  pressed: {
    cssSelector: "[data-pressed]",
    displayName: "Pressed"
  },
  focused: {
    cssSelector: "[data-focused]",
    displayName: "Focused"
  },
  focusVisible: {
    cssSelector: "[data-focus-visible]",
    displayName: "Focus Visible"
  },
  dragging: {
    cssSelector: "[data-dragging]",
    displayName: "Dragging"
  },
  selected: {
    cssSelector: "[data-selected]",
    displayName: "Selected"
  },
  readonly: {
    cssSelector: "[data-readonly]",
    displayName: "Read Only"
  },
  disabled: {
    cssSelector: "[data-disabled]",
    displayName: "Disabled"
  },
  indeterminate: {
    cssSelector: "[data-indeterminate]",
    displayName: "Indeterminate"
  },
  /*
    NOTE: Placement should be managed as variants, not just props.
    When `shouldFlip` is true, the placement prop may not represent the final position
    (e.g., if placement is set to "bottom" but lacks space, the popover/tooltip may flip to "top").
    However, data-selectors will consistently indicate the actual placement of the popover/tooltip.
  */
  placementLeft: {
    cssSelector: "[data-placement=left]",
    displayName: "Placement (Left)"
  },
  placementRight: {
    cssSelector: "[data-placement=right]",
    displayName: "Placement (Right)"
  },
  placementTop: {
    cssSelector: "[data-placement=top]",
    displayName: "Placement (Top)"
  },
  placementBottom: {
    cssSelector: "[data-placement=bottom]",
    displayName: "Placement (Bottom)"
  }
};
function ChangesObserver({
  children,
  changes,
  updateVariant
}) {
  React__default.default.useEffect(() => {
    if (updateVariant) {
      updateVariant(changes);
    }
  }, [changes, updateVariant]);
  return children;
}
function realWithObservedValues(children, changes, updateVariant) {
  return /* @__PURE__ */ React__default.default.createElement(ChangesObserver, { changes, updateVariant }, children);
}
function pickAriaComponentVariants(keys) {
  return {
    variants: Object.fromEntries(
      keys.map((key) => [key, ARIA_COMPONENTS_VARIANTS[key]])
    ),
    withObservedValues: realWithObservedValues
  };
}

exports.pickAriaComponentVariants = pickAriaComponentVariants;
//# sourceMappingURL=variant-utils-0ad70db8.cjs.js.map
