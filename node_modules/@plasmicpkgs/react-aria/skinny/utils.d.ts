import { type CodeComponentMeta } from "@plasmicapp/host";
import registerComponent from "@plasmicapp/host/registerComponent";
import React from "react";
export type HasControlContextData<T = BaseControlContextData> = {
    setControlContextData?: (ctxData: T) => void;
};
export type BaseControlContextData = {
    parent?: {
        isDisabled?: boolean;
        isReadOnly?: boolean;
    };
};
export type Registerable = {
    registerComponent: typeof registerComponent;
};
export type OtherCodeComponentsMeta = {
    text: CodeComponentMeta<any>;
    description: CodeComponentMeta<any>;
};
export type CodeComponentMetaOverrides<T extends React.ComponentType<any>> = Partial<Pick<CodeComponentMeta<React.ComponentProps<T>>, "parentComponentName" | "props" | "displayName" | "name">>;
export declare function useAutoOpen({ props, open, close, }: {
    props: any;
    open?: () => void;
    close?: () => void;
}): void;
export declare function registerComponentHelper<T extends React.ComponentType<any>>(loader: Registerable | undefined, component: T, meta: CodeComponentMeta<React.ComponentProps<T>>, overrides?: CodeComponentMetaOverrides<T>): CodeComponentMeta<React.ComponentProps<T>>;
export declare function makeComponentName(name: string): string;
export declare function makeChildComponentName(fullParentName: string | undefined, fullChildName: string): string;
export interface Styleable {
    className?: string;
    style?: React.CSSProperties;
}
export declare function extractPlasmicDataProps(props: Record<string, any>): {
    [k: string]: any;
};
export declare function withoutNils<T>(array: (T | undefined | null)[]): T[];
export declare function isDefined<T>(thing: T | undefined | null): thing is T;
