import React, { useMemo } from 'react';
import { SliderTrack, Slider } from 'react-aria-components';
import flattenChildren from 'react-keyed-flatten-children';
import { C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { f as PlasmicSliderContext } from './contexts-5cb81c2f.esm.js';
import { i as isDefined, m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const SLIDER_TRACK_VARIANTS = ["hovered"];
const { variants, withObservedValues } = pickAriaComponentVariants(
  SLIDER_TRACK_VARIANTS
);
function isMultiValueGuard(value) {
  return Array.isArray(value) && value.length > 1;
}
function BaseSliderTrack(props) {
  const context = React.useContext(PlasmicSliderContext);
  const isStandalone = !context;
  const _a = props, { children, progressBar, plasmicUpdateVariant } = _a, rest = __objRest(_a, ["children", "progressBar", "plasmicUpdateVariant"]);
  const thumbsLength = context && isMultiValueGuard(context.value) ? context.value.length : 1;
  const isMultiValue = thumbsLength > 1;
  const { minIndex, maxIndex } = useMemo(() => {
    if (thumbsLength <= 1) {
      return { minIndex: 0, maxIndex: 0 };
    }
    return { minIndex: 0, maxIndex: thumbsLength - 1 };
  }, [thumbsLength]);
  const thumbs = useMemo(() => {
    const thumbNodes = flattenChildren(children);
    if (!thumbNodes || thumbNodes.length === 0 || !isDefined(context == null ? void 0 : context.value)) {
      return [];
    }
    const values = isDefined(context) ? Array.isArray(context.value) ? context.value : [context.value] : [];
    const lastThumb = thumbNodes[thumbNodes.length - 1];
    return values.map((v, i) => {
      const currentThumb = thumbNodes[i];
      if (i >= thumbNodes.length) {
        if (React.isValidElement(lastThumb)) {
          return React.cloneElement(lastThumb, {
            index: i
          });
        }
      }
      if (!React.isValidElement(currentThumb)) {
        return null;
      }
      return React.cloneElement(currentThumb, {
        index: i
      });
    });
  }, [children, context == null ? void 0 : context.value]);
  const track = /* @__PURE__ */ React.createElement(SliderTrack, __spreadValues({ style: { position: "relative" } }, rest), ({ state, isHovered }) => /* @__PURE__ */ React.createElement(React.Fragment, null, withObservedValues(
    /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      "div",
      {
        style: {
          width: `${(!isMultiValue ? state.getThumbPercent(minIndex) : state.getThumbPercent(maxIndex) - state.getThumbPercent(minIndex)) * 100}%`,
          height: "100%",
          position: "absolute",
          top: 0,
          left: !isMultiValue ? 0 : state.getThumbPercent(minIndex) * 100 + "%"
        }
      },
      progressBar
    ), thumbs),
    {
      hovered: isHovered
    },
    plasmicUpdateVariant
  )));
  if (isStandalone) {
    return /* @__PURE__ */ React.createElement(Slider, { style: __spreadValues({ height: "100%", width: "100%" }, COMMON_STYLES) }, track);
  }
  return track;
}
const SLIDER_TRACK_COMPONENT_NAME = makeComponentName("sliderTrack");
function registerSliderTrack(sliderThumbMeta, loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseSliderTrack,
    {
      name: SLIDER_TRACK_COMPONENT_NAME,
      displayName: "Aria Slider Track",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSliderTrack",
      importName: "BaseSliderTrack",
      variants,
      defaultStyles: {
        width: "stretch",
        backgroundColor: "#aaa",
        position: "relative",
        height: "10px",
        padding: 0
      },
      props: {
        children: {
          type: "slot",
          /**
           * NOTE: We don't merge with parent here, because we want to allow the user to select the thumbs without having to first select the slider track.
           * Also, there can be more than one thumbs (e.g. in a range slider), but `mergeWithParent` only shows prop controls of the slot content if there is only one direct descendant of the slot.
           * */
          // mergeWithParent: true,
          displayName: "Thumbs",
          description: "The thumbs of the slider. For range slider, you can add more than one thumb.",
          allowedComponents: [sliderThumbMeta.name],
          allowRootWrapper: true,
          defaultValue: [
            {
              type: "component",
              name: sliderThumbMeta.name
            }
          ]
        },
        progressBar: {
          type: "slot",
          mergeWithParent: true,
          displayName: "Progress Bar",
          defaultValue: [
            {
              type: "box",
              styles: {
                height: "100%",
                width: "100%",
                backgroundColor: "#ffa6a6",
                padding: 0
              }
            }
          ]
        },
        onHoverStart: {
          type: "eventHandler",
          argTypes: [{ name: "event", type: "object" }]
        },
        onHoverEnd: {
          type: "eventHandler",
          argTypes: [{ name: "event", type: "object" }]
        },
        onHoverChange: {
          type: "eventHandler",
          argTypes: [{ name: "isHovering", type: "boolean" }]
        }
      }
    },
    overrides
  );
}

export { BaseSliderTrack, SLIDER_TRACK_COMPONENT_NAME, registerSliderTrack };
//# sourceMappingURL=registerSliderTrack.esm.js.map
