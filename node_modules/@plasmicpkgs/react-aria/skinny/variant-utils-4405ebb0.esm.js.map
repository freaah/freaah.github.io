{"version":3,"file":"variant-utils-4405ebb0.esm.js","sources":["../src/variant-utils.tsx"],"sourcesContent":["import { CodeComponentMeta } from \"@plasmicapp/host\";\nimport React from \"react\";\n\nconst ARIA_COMPONENTS_VARIANTS = {\n  hovered: {\n    cssSelector: \"[data-hovered]\",\n    displayName: \"Hovered\",\n  },\n  pressed: {\n    cssSelector: \"[data-pressed]\",\n    displayName: \"Pressed\",\n  },\n  focused: {\n    cssSelector: \"[data-focused]\",\n    displayName: \"Focused\",\n  },\n  focusVisible: {\n    cssSelector: \"[data-focus-visible]\",\n    displayName: \"Focus Visible\",\n  },\n  dragging: {\n    cssSelector: \"[data-dragging]\",\n    displayName: \"Dragging\",\n  },\n  selected: {\n    cssSelector: \"[data-selected]\",\n    displayName: \"Selected\",\n  },\n  readonly: {\n    cssSelector: \"[data-readonly]\",\n    displayName: \"Read Only\",\n  },\n  disabled: {\n    cssSelector: \"[data-disabled]\",\n    displayName: \"Disabled\",\n  },\n  indeterminate: {\n    cssSelector: \"[data-indeterminate]\",\n    displayName: \"Indeterminate\",\n  },\n  /*\n    NOTE: Placement should be managed as variants, not just props.\n    When `shouldFlip` is true, the placement prop may not represent the final position\n    (e.g., if placement is set to \"bottom\" but lacks space, the popover/tooltip may flip to \"top\").\n    However, data-selectors will consistently indicate the actual placement of the popover/tooltip.\n  */\n  placementLeft: {\n    cssSelector: \"[data-placement=left]\",\n    displayName: \"Placement (Left)\",\n  },\n  placementRight: {\n    cssSelector: \"[data-placement=right]\",\n    displayName: \"Placement (Right)\",\n  },\n  placementTop: {\n    cssSelector: \"[data-placement=top]\",\n    displayName: \"Placement (Top)\",\n  },\n  placementBottom: {\n    cssSelector: \"[data-placement=bottom]\",\n    displayName: \"Placement (Bottom)\",\n  },\n};\n\ntype AriaVariant = keyof typeof ARIA_COMPONENTS_VARIANTS;\n\ntype CodeComponentVariantsMeta = NonNullable<\n  CodeComponentMeta<unknown>[\"variants\"]\n>;\n\ntype VariantMeta = CodeComponentVariantsMeta[string];\n\ntype ArrayElement<T> = T extends (infer U)[] ? U : never;\n\nexport type UpdateVariant<T extends AriaVariant[]> =\n  | ((changes: Partial<Record<ArrayElement<T>, boolean>>) => void)\n  | undefined;\n\nexport interface WithVariants<T extends AriaVariant[]> {\n  // Optional callback to update the CC variant state\n  // as it's only provided if the component is the root of a Studio component\n  plasmicUpdateVariant?: UpdateVariant<T>;\n}\n\ntype WithObservedValues<T extends AriaVariant[]> = (\n  children: React.ReactNode,\n  state: Record<ArrayElement<T>, boolean>,\n  updateVariant: UpdateVariant<T>\n) => React.ReactNode;\n\nfunction ChangesObserver<T extends AriaVariant[]>({\n  children,\n  changes,\n  updateVariant,\n}: {\n  children: React.ReactNode;\n  changes: Partial<Record<ArrayElement<T>, boolean>>;\n  updateVariant?: UpdateVariant<T>;\n}) {\n  React.useEffect(() => {\n    if (updateVariant) {\n      updateVariant(changes);\n    }\n  }, [changes, updateVariant]);\n  return children;\n}\n\nfunction realWithObservedValues<T extends AriaVariant[]>(\n  children: React.ReactNode,\n  changes: Partial<Record<ArrayElement<T>, boolean>>,\n  updateVariant?: UpdateVariant<T>\n) {\n  return (\n    <ChangesObserver changes={changes} updateVariant={updateVariant}>\n      {children}\n    </ChangesObserver>\n  );\n}\n\nexport function pickAriaComponentVariants<T extends AriaVariant[]>(\n  keys: T\n): {\n  variants: Record<ArrayElement<T>, VariantMeta>;\n  withObservedValues: WithObservedValues<T>;\n} {\n  return {\n    variants: Object.fromEntries(\n      keys.map((key) => [key, ARIA_COMPONENTS_VARIANTS[key]])\n    ) as Record<ArrayElement<T>, VariantMeta>,\n    withObservedValues: realWithObservedValues<T>,\n  };\n}\n"],"names":[],"mappings":";;AAGA,MAAM,wBAA2B,GAAA;AAAA,EAC/B,OAAS,EAAA;AAAA,IACP,WAAa,EAAA,gBAAA;AAAA,IACb,WAAa,EAAA,SAAA;AAAA,GACf;AAAA,EACA,OAAS,EAAA;AAAA,IACP,WAAa,EAAA,gBAAA;AAAA,IACb,WAAa,EAAA,SAAA;AAAA,GACf;AAAA,EACA,OAAS,EAAA;AAAA,IACP,WAAa,EAAA,gBAAA;AAAA,IACb,WAAa,EAAA,SAAA;AAAA,GACf;AAAA,EACA,YAAc,EAAA;AAAA,IACZ,WAAa,EAAA,sBAAA;AAAA,IACb,WAAa,EAAA,eAAA;AAAA,GACf;AAAA,EACA,QAAU,EAAA;AAAA,IACR,WAAa,EAAA,iBAAA;AAAA,IACb,WAAa,EAAA,UAAA;AAAA,GACf;AAAA,EACA,QAAU,EAAA;AAAA,IACR,WAAa,EAAA,iBAAA;AAAA,IACb,WAAa,EAAA,UAAA;AAAA,GACf;AAAA,EACA,QAAU,EAAA;AAAA,IACR,WAAa,EAAA,iBAAA;AAAA,IACb,WAAa,EAAA,WAAA;AAAA,GACf;AAAA,EACA,QAAU,EAAA;AAAA,IACR,WAAa,EAAA,iBAAA;AAAA,IACb,WAAa,EAAA,UAAA;AAAA,GACf;AAAA,EACA,aAAe,EAAA;AAAA,IACb,WAAa,EAAA,sBAAA;AAAA,IACb,WAAa,EAAA,eAAA;AAAA,GACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAe,EAAA;AAAA,IACb,WAAa,EAAA,uBAAA;AAAA,IACb,WAAa,EAAA,kBAAA;AAAA,GACf;AAAA,EACA,cAAgB,EAAA;AAAA,IACd,WAAa,EAAA,wBAAA;AAAA,IACb,WAAa,EAAA,mBAAA;AAAA,GACf;AAAA,EACA,YAAc,EAAA;AAAA,IACZ,WAAa,EAAA,sBAAA;AAAA,IACb,WAAa,EAAA,iBAAA;AAAA,GACf;AAAA,EACA,eAAiB,EAAA;AAAA,IACf,WAAa,EAAA,yBAAA;AAAA,IACb,WAAa,EAAA,oBAAA;AAAA,GACf;AACF,CAAA,CAAA;AA4BA,SAAS,eAAyC,CAAA;AAAA,EAChD,QAAA;AAAA,EACA,OAAA;AAAA,EACA,aAAA;AACF,CAIG,EAAA;AACD,EAAA,KAAA,CAAM,UAAU,MAAM;AACpB,IAAA,IAAI,aAAe,EAAA;AACjB,MAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,KACvB;AAAA,GACC,EAAA,CAAC,OAAS,EAAA,aAAa,CAAC,CAAA,CAAA;AAC3B,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAEA,SAAS,sBAAA,CACP,QACA,EAAA,OAAA,EACA,aACA,EAAA;AACA,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,EAAgB,OAAkB,EAAA,aAAA,EAAA,EAChC,QACH,CAAA,CAAA;AAEJ,CAAA;AAEO,SAAS,0BACd,IAIA,EAAA;AACA,EAAO,OAAA;AAAA,IACL,UAAU,MAAO,CAAA,WAAA;AAAA,MACf,IAAA,CAAK,IAAI,CAAC,GAAA,KAAQ,CAAC,GAAK,EAAA,wBAAA,CAAyB,GAAG,CAAC,CAAC,CAAA;AAAA,KACxD;AAAA,IACA,kBAAoB,EAAA,sBAAA;AAAA,GACtB,CAAA;AACF;;;;"}