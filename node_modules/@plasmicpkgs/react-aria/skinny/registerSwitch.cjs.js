'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var registerDescription = require('./registerDescription.cjs.js');
var registerLabel = require('./registerLabel.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('./registerText.cjs.js');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const SWITCH_VARIANTS = [
  "hovered",
  "pressed",
  "focused",
  "focusVisible",
  "selected",
  "disabled",
  "readonly"
];
const { variants, withObservedValues } = variantUtils.pickAriaComponentVariants(SWITCH_VARIANTS);
function BaseSwitch(props) {
  const _a = props, { children, plasmicUpdateVariant } = _a, rest = __objRest(_a, ["children", "plasmicUpdateVariant"]);
  return /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.Switch, __spreadProps(__spreadValues({}, rest), { style: common.COMMON_STYLES }), ({
    isHovered,
    isPressed,
    isFocused,
    isFocusVisible,
    isSelected,
    isDisabled,
    isReadOnly
  }) => withObservedValues(
    children,
    {
      hovered: isHovered,
      pressed: isPressed,
      focused: isFocused,
      focusVisible: isFocusVisible,
      selected: isSelected,
      disabled: isDisabled,
      readonly: isReadOnly
    },
    plasmicUpdateVariant
  ));
}
function registerSwitch(loader, overrides) {
  utils.registerComponentHelper(
    loader,
    BaseSwitch,
    {
      name: utils.makeComponentName("switch"),
      displayName: "Aria Switch",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSwitch",
      importName: "BaseSwitch",
      variants,
      defaultStyles: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "flex-start",
        padding: 0
      },
      props: __spreadProps(__spreadValues({}, common.getCommonProps("switch", [
        "name",
        "isDisabled",
        "isReadOnly",
        "autoFocus",
        "aria-label"
      ])), {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: [
            {
              type: "hbox",
              styles: {
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: "10px",
                padding: 0
              },
              children: [
                {
                  // the track
                  type: "hbox",
                  styles: {
                    width: "30px",
                    height: "16px",
                    padding: 0,
                    backgroundColor: "#D5D5D5",
                    cursor: "pointer",
                    borderRadius: "999px"
                  },
                  children: {
                    // the thumb
                    type: "hbox",
                    styles: {
                      width: "12px",
                      height: "12px",
                      position: "absolute",
                      top: "2px",
                      left: "2px",
                      borderRadius: "100%",
                      backgroundColor: "#fff",
                      padding: 0,
                      transitionProperty: "all",
                      transitionDuration: "0.5s",
                      transitionTimingFunction: "ease-in-out"
                    }
                  }
                },
                {
                  // the label
                  type: "component",
                  name: registerLabel.LABEL_COMPONENT_NAME,
                  props: {
                    children: {
                      type: "text",
                      value: "Label"
                    }
                  }
                }
              ]
            },
            {
              type: "component",
              name: registerDescription.DESCRIPTION_COMPONENT_NAME,
              styles: {
                fontSize: "12px"
              },
              props: {
                children: {
                  type: "text",
                  value: "Use the registered variants to see it in action..."
                }
              }
            }
          ]
        },
        value: {
          type: "string",
          description: 'The value of the switch in "selected" state, used when submitting an HTML form.',
          defaultValueHint: "on"
        },
        isSelected: {
          type: "boolean",
          editOnly: true,
          displayName: "Default Selected",
          uncontrolledProp: "defaultSelected",
          description: "Whether the switch should be selected by default",
          defaultValueHint: false
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "isSelected", type: "boolean" }]
        }
      }),
      states: {
        isSelected: {
          type: "writable",
          valueProp: "isSelected",
          onChangeProp: "onChange",
          variableType: "boolean"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseSwitch = BaseSwitch;
exports.registerSwitch = registerSwitch;
//# sourceMappingURL=registerSwitch.cjs.js.map
