'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var utils = require('./utils-7d000fa4.cjs.js');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function BaseForm(props) {
  const _a = props, { onSubmit, children } = _a, rest = __objRest(_a, ["onSubmit", "children"]);
  return /* @__PURE__ */ React__default.default.createElement(
    reactAriaComponents.Form,
    __spreadValues({
      onSubmit: (e) => {
        e.preventDefault();
        const formData = new FormData(e.currentTarget);
        const formValues = {};
        formData.forEach((value, key) => {
          const field = e.currentTarget.elements.namedItem(key);
          if (field instanceof RadioNodeList && Array.from(field.values()).every(
            (f) => f.type === "checkbox"
          )) {
            formValues[key] = formData.getAll(key);
          } else {
            field.type;
            formValues[key] = formData.get(key);
          }
        });
        onSubmit == null ? void 0 : onSubmit(formValues);
      }
    }, rest),
    children
  );
}
function registerForm(loader, overrides) {
  utils.registerComponentHelper(
    loader,
    BaseForm,
    {
      name: utils.makeComponentName("form"),
      displayName: "Aria Form",
      importPath: "@plasmicpkgs/react-aria/skinny/registerForm",
      importName: "BaseForm",
      props: {
        children: {
          type: "slot",
          mergeWithParent: true
        },
        onSubmit: {
          type: "eventHandler",
          argTypes: [{ name: "data", type: "object" }]
        },
        onReset: {
          type: "eventHandler",
          argTypes: []
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseForm = BaseForm;
exports.registerForm = registerForm;
//# sourceMappingURL=registerForm.cjs.js.map
