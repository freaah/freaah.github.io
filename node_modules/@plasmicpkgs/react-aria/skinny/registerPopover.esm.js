import { usePlasmicCanvasContext } from '@plasmicapp/host';
import { mergeProps } from '@react-aria/utils';
import React, { useEffect } from 'react';
import { PopoverContext, Popover } from 'react-aria-components';
import { C as COMMON_STYLES, b as getCommonOverlayProps } from './common-ceebbaea.esm.js';
import { a as PlasmicPopoverTriggerContext } from './contexts-5cb81c2f.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const POPOVER_VARIANTS = [
  "placementTop",
  "placementBottom",
  "placementLeft",
  "placementRight"
];
const { variants, withObservedValues } = pickAriaComponentVariants(POPOVER_VARIANTS);
function BasePopover(props) {
  const _a = props, {
    resetClassName,
    plasmicUpdateVariant,
    setControlContextData,
    matchTriggerWidth
  } = _a, restProps = __objRest(_a, [
    "resetClassName",
    "plasmicUpdateVariant",
    "setControlContextData",
    "matchTriggerWidth"
  ]);
  const isStandalone = !React.useContext(PopoverContext);
  const hasTrigger = !!React.useContext(PlasmicPopoverTriggerContext);
  const triggerRef = React.useRef(null);
  const canvasContext = usePlasmicCanvasContext();
  const matchTriggerWidthProp = hasTrigger && matchTriggerWidth;
  const _b = mergeProps(
    {
      // isNonModal: Whether the popover is non-modal, i.e. elements outside the popover may be interacted with by assistive technologies.
      // Setting isNonModal to true in edit mode (canvas) means that the popover will not prevent the user from interacting with the canvas while the popover is open.
      isNonModal: canvasContext && !canvasContext.interactive
    },
    restProps,
    { className: `${resetClassName}` },
    // Override some props if the popover is standalone
    isStandalone ? {
      triggerRef,
      isNonModal: true,
      // Always true, because we assume that popover is always going to be controlled by a parent like Select, Combobox, DialogTrigger, etc, and its only really standalone in component view
      // In component view, we never want to start with an empty artboard, so isOpen has to be true
      isOpen: true
    } : null
  ), { children } = _b, mergedProps = __objRest(_b, ["children"]);
  useEffect(() => {
    setControlContextData == null ? void 0 : setControlContextData({
      canMatchTriggerWidth: hasTrigger
    });
  }, [hasTrigger, setControlContextData]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, isStandalone && /* @__PURE__ */ React.createElement("div", { ref: triggerRef }), /* @__PURE__ */ React.createElement(
    Popover,
    __spreadValues({
      style: __spreadValues(__spreadValues({}, matchTriggerWidthProp ? { width: `var(--trigger-width)` } : {}), COMMON_STYLES)
    }, mergedProps),
    ({ placement }) => withObservedValues(
      children,
      {
        placementTop: placement === "top",
        placementBottom: placement === "bottom",
        placementLeft: placement === "left",
        placementRight: placement === "right"
      },
      plasmicUpdateVariant
    )
  ));
}
const POPOVER_COMPONENT_NAME = makeComponentName("popover");
function registerPopover(loader, overrides) {
  registerComponentHelper(
    loader,
    BasePopover,
    {
      name: POPOVER_COMPONENT_NAME,
      displayName: "Aria Popover",
      importPath: "@plasmicpkgs/react-aria/skinny/registerPopover",
      importName: "BasePopover",
      variants,
      defaultStyles: {
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "black",
        width: "300px",
        backgroundColor: "#FDE3C3"
      },
      props: __spreadValues({
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: [
            {
              type: "vbox",
              styles: {
                width: "stretch",
                padding: "20px",
                rowGap: "10px"
              },
              children: [
                {
                  type: "text",
                  value: "This is a Popover!"
                },
                {
                  type: "text",
                  value: "You can put anything you can imagine here!",
                  styles: {
                    fontWeight: 500
                  }
                },
                {
                  type: "text",
                  value: "Use it in a `Aria Dialog Trigger` component to trigger it on a button click!"
                }
              ]
            }
          ]
        },
        shouldFlip: {
          type: "boolean",
          description: "Whether the element should flip its orientation (e.g. top to bottom or left to right) when there is insufficient room for it to render completely.",
          defaultValueHint: true
        },
        resetClassName: {
          type: "themeResetClass"
        },
        matchTriggerWidth: {
          type: "boolean",
          defaultValue: true,
          hidden: (_props, ctx) => !(ctx == null ? void 0 : ctx.canMatchTriggerWidth)
        }
      }, getCommonOverlayProps("popover", {
        placement: { defaultValueHint: "bottom" },
        offset: { defaultValueHint: 8 },
        containerPadding: { defaultValueHint: 12 },
        crossOffset: { defaultValueHint: 0 }
      })),
      // No isOpen state for popover, because we assume that its open state is always going to be controlled by a parent like Select, Combobox, DialogTrigger, etc.
      styleSections: true,
      trapsFocus: true
    },
    overrides
  );
}

export { BasePopover, POPOVER_COMPONENT_NAME, registerPopover };
//# sourceMappingURL=registerPopover.esm.js.map
