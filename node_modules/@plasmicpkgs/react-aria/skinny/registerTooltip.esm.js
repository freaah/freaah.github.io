import { usePlasmicCanvasComponentInfo } from '@plasmicapp/host';
import React from 'react';
import { useFocusable } from 'react-aria';
import { TooltipTrigger, Tooltip } from 'react-aria-components';
import { b as getCommonOverlayProps, C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const TOOLTIP_VARIANTS = [
  "placementTop",
  "placementBottom",
  "placementLeft",
  "placementRight"
];
const { variants, withObservedValues } = pickAriaComponentVariants(TOOLTIP_VARIANTS);
function TriggerWrapper({ children, className }) {
  const ref = React.useRef(null);
  const { focusableProps } = useFocusable({}, ref);
  return /* @__PURE__ */ React.createElement(
    "div",
    __spreadProps(__spreadValues({
      ref,
      className
    }, focusableProps), {
      style: COMMON_STYLES
    }),
    children
  );
}
function BaseTooltip(props) {
  var _a, _b, _c;
  const {
    children,
    isDisabled,
    delay,
    closeDelay,
    trigger,
    isOpen,
    defaultOpen,
    tooltipContent,
    resetClassName,
    placement,
    offset,
    crossOffset,
    shouldFlip,
    onOpenChange,
    plasmicUpdateVariant
  } = props;
  const { isSelected, selectedSlotName } = (_b = (_a = usePlasmicCanvasComponentInfo) == null ? void 0 : _a(props)) != null ? _b : {};
  const isAutoOpen = selectedSlotName !== "children" && isSelected;
  const _isOpen = (_c = isAutoOpen || isOpen) != null ? _c : false;
  return /* @__PURE__ */ React.createElement(
    TooltipTrigger,
    {
      isDisabled,
      delay,
      closeDelay,
      trigger,
      isOpen: _isOpen,
      defaultOpen,
      onOpenChange
    },
    /* @__PURE__ */ React.createElement(TriggerWrapper, { className: resetClassName }, children),
    /* @__PURE__ */ React.createElement(
      Tooltip,
      {
        isOpen: _isOpen,
        offset,
        crossOffset,
        shouldFlip,
        defaultOpen,
        className: resetClassName,
        onOpenChange,
        placement
      },
      ({ placement: _placement }) => withObservedValues(
        /* @__PURE__ */ React.createElement(React.Fragment, null, tooltipContent),
        {
          placementTop: _placement === "top",
          placementBottom: _placement === "bottom",
          placementLeft: _placement === "left",
          placementRight: _placement === "right"
        },
        plasmicUpdateVariant
      )
    )
  );
}
function registerTooltip(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseTooltip,
    {
      name: "plasmic-react-aria-tooltip",
      displayName: "Aria Tooltip",
      importPath: "@plasmicpkgs/react-aria/skinny/registerTooltip",
      importName: "BaseTooltip",
      isAttachment: true,
      styleSections: false,
      variants,
      props: __spreadProps(__spreadValues({
        children: {
          type: "slot",
          mergeWithParent: true,
          displayName: "Trigger",
          defaultValue: {
            type: "text",
            value: "Hover me!",
            styles: {
              width: "hug"
            }
          }
        },
        tooltipContent: {
          type: "slot",
          mergeWithParent: true,
          displayName: "Tooltip Content",
          // NOTE: This is not applied in attachment
          defaultValue: {
            type: "text",
            value: "Hello from Tooltip!",
            styles: {
              background: "black",
              color: "white",
              padding: "7px",
              borderRadius: "7px"
            }
          }
        },
        resetClassName: {
          type: "themeResetClass"
        },
        isDisabled: {
          type: "boolean"
        },
        delay: {
          type: "number",
          // Default value is explicitly set to 0 to prevent users from mistakenly thinking the tooltip isn’t opening due to a delay.
          defaultValue: 0,
          defaultValueHint: 0,
          description: "The delay (in milliseconds) for the tooltip to show up."
        },
        closeDelay: {
          type: "number",
          // Default value is explicitly set to 0 to prevent users from mistakenly thinking the tooltip isn’t closing due to a delay.
          defaultValue: 0,
          defaultValueHint: 0,
          description: "The delay (in milliseconds) for the tooltip to close."
        },
        trigger: {
          type: "choice",
          options: ["focus", "focus and hover"],
          defaultValueHint: "focus and hover"
        }
      }, getCommonOverlayProps("popover", {
        placement: { defaultValueHint: "top" },
        offset: { defaultValueHint: 0 },
        containerPadding: { defaultValueHint: 12 },
        crossOffset: { defaultValueHint: 0 }
      })), {
        isOpen: {
          type: "boolean",
          editOnly: true,
          uncontrolledProp: "defaultOpen",
          description: "Whether the overlay is open by default",
          defaultValueHint: false,
          hidden: () => true
        },
        onOpenChange: {
          type: "eventHandler",
          argTypes: [{ name: "isOpen", type: "boolean" }]
        }
      }),
      states: {
        isOpen: {
          type: "writable",
          valueProp: "isOpen",
          onChangeProp: "onOpenChange",
          variableType: "boolean"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseTooltip, registerTooltip };
//# sourceMappingURL=registerTooltip.esm.js.map
