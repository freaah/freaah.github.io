import React, { Component } from 'react';
import { SliderThumb, Slider, SliderTrack } from 'react-aria-components';
import { g as getCommonProps, C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(_) {
    return { hasError: true };
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
}

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const SLIDER_THUMB_VARIANTS = [
  "dragging",
  "hovered",
  "focused",
  "focusVisible",
  "disabled"
];
const { variants, withObservedValues } = pickAriaComponentVariants(
  SLIDER_THUMB_VARIANTS
);
function BaseSliderThumb(_a) {
  var _b = _a, {
    children,
    advanced,
    plasmicUpdateVariant
  } = _b, rest = __objRest(_b, [
    "children",
    "advanced",
    "plasmicUpdateVariant"
  ]);
  const thumb = /* @__PURE__ */ React.createElement(SliderThumb, __spreadProps(__spreadValues({}, rest), { style: COMMON_STYLES }), ({ isDragging, isHovered, isFocused, isFocusVisible, isDisabled }) => withObservedValues(
    /* @__PURE__ */ React.createElement(React.Fragment, null, advanced ? children : void 0),
    {
      dragging: isDragging,
      hovered: isHovered,
      focused: isFocused,
      focusVisible: isFocusVisible,
      disabled: isDisabled
    },
    plasmicUpdateVariant
  ));
  return /* @__PURE__ */ React.createElement(
    ErrorBoundary,
    {
      fallback: /* @__PURE__ */ React.createElement(Slider, { style: { height: "100%", width: "100%" } }, /* @__PURE__ */ React.createElement(SliderTrack, null, thumb))
    },
    thumb
  );
}
const SLIDER_THUMB_COMPONENT_NAME = makeComponentName("sliderThumb");
function registerSliderThumb(loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseSliderThumb,
    {
      name: SLIDER_THUMB_COMPONENT_NAME,
      displayName: "Aria Slider Thumb",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSliderThumb",
      importName: "BaseSliderThumb",
      defaultStyles: {
        position: "absolute",
        top: "5px",
        width: "20px",
        height: "20px",
        backgroundColor: "#C80101",
        borderRadius: "100%",
        cursor: "pointer"
      },
      variants,
      props: __spreadProps(__spreadValues({}, getCommonProps("slider thumb", [
        "name",
        "isDisabled",
        "autoFocus"
      ])), {
        advanced: {
          type: "boolean",
          displayName: "Advanced",
          description: "Enables the children slot for creating a more customized thumb"
        },
        children: {
          type: "slot",
          mergeWithParent: true,
          hidden: (props) => !props.advanced
        }
      }),
      trapsFocus: true
    },
    overrides
  );
}

export { BaseSliderThumb, SLIDER_THUMB_COMPONENT_NAME, registerSliderThumb };
//# sourceMappingURL=registerSliderThumb.esm.js.map
