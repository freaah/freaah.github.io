import React from 'react';
import { FieldError } from 'react-aria-components';
import { r as registerComponentHelper, m as makeComponentName } from './utils-5d1b4c6b.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function BaseFieldError(_a) {
  var _b = _a, {
    badInput,
    customError,
    patternMismatch,
    rangeOverflow,
    rangeUnderflow,
    stepMismatch,
    tooLong,
    tooShort,
    typeMismatch,
    valueMissing
  } = _b, rest = __objRest(_b, [
    "badInput",
    "customError",
    "patternMismatch",
    "rangeOverflow",
    "rangeUnderflow",
    "stepMismatch",
    "tooLong",
    "tooShort",
    "typeMismatch",
    "valueMissing"
  ]);
  return /* @__PURE__ */ React.createElement(FieldError, __spreadValues({}, rest), ({ validationDetails, validationErrors }) => {
    if (validationDetails.badInput && badInput) {
      return badInput;
    }
    if (validationDetails.customError && customError) {
      return customError;
    }
    if (validationDetails.patternMismatch && patternMismatch) {
      return patternMismatch;
    }
    if (validationDetails.rangeOverflow && rangeOverflow) {
      return rangeOverflow;
    }
    if (validationDetails.rangeUnderflow && rangeUnderflow) {
      return rangeUnderflow;
    }
    if (validationDetails.stepMismatch && stepMismatch) {
      return stepMismatch;
    }
    if (validationDetails.tooLong && tooLong) {
      return tooLong;
    }
    if (validationDetails.tooShort && tooShort) {
      return tooShort;
    }
    if (validationDetails.typeMismatch && typeMismatch) {
      return typeMismatch;
    }
    if (validationDetails.valueMissing && valueMissing) {
      return valueMissing;
    }
    return validationErrors;
  });
}
function PropsDescription() {
  return /* @__PURE__ */ React.createElement("div", { style: { marginBottom: 20 } }, /* @__PURE__ */ React.createElement("p", null, "You can customize the error messages for built-in validations by utilizing the props below."), /* @__PURE__ */ React.createElement("p", null, "For further information on the specific conditions triggering each error, please refer to the", " ", /* @__PURE__ */ React.createElement(
    "a",
    {
      target: "_blank",
      href: "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState#instance_properties"
    },
    "MDN Docs"
  ), "."));
}
function registerFieldError(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseFieldError,
    {
      name: makeComponentName("fielderror"),
      displayName: "Aria Field Error",
      importPath: "@plasmicpkgs/react-aria/skinny/registerFieldError",
      importName: "BaseFieldError",
      actions: [
        {
          type: "custom-action",
          control: PropsDescription
        }
      ],
      props: {
        badInput: {
          type: "string",
          description: "Error message if the user has provided input that the browser is unable to convert"
        },
        customError: {
          type: "string",
          description: "Error message for custom validations"
        },
        patternMismatch: {
          type: "string",
          description: "Error message if the value does not match the specified pattern"
        },
        rangeOverflow: {
          type: "string",
          description: "Error message if the value is greater than the maximum specified"
        },
        rangeUnderflow: {
          type: "string",
          description: "Error message if the value is less than the minimum specified"
        },
        stepMismatch: {
          type: "string",
          description: "Error message if the value is not evenly divisible by the step value"
        },
        tooLong: {
          type: "string",
          description: "Error message if the value exceeds the specified maximum number of characters"
        },
        tooShort: {
          type: "string",
          description: "Error message  if the value fails to meet the specified minimum number of characters"
        },
        typeMismatch: {
          type: "string",
          description: "Error message if the value is not in the required syntax (when type is email or url)"
        },
        valueMissing: {
          type: "string",
          description: "Error message if a required field has no value"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseFieldError, registerFieldError };
//# sourceMappingURL=registerFieldError.esm.js.map
