import React, { useMemo, useEffect, useCallback } from 'react';
import { SelectValue, Select, SelectStateContext } from 'react-aria-components';
import { C as COMMON_STYLES, a as arrowDown, g as getCommonProps } from './common-ceebbaea.esm.js';
import { O as OptionsItemIdManager } from './OptionsItemIdManager-832b8cfe.esm.js';
import { a as PlasmicPopoverTriggerContext, b as PlasmicListBoxContext } from './contexts-5cb81c2f.esm.js';
import { BUTTON_COMPONENT_NAME } from './registerButton.esm.js';
import { LABEL_COMPONENT_NAME } from './registerLabel.esm.js';
import { L as LIST_BOX_COMPONENT_NAME } from './registerListBox-40846430.esm.js';
import { POPOVER_COMPONENT_NAME } from './registerPopover.esm.js';
import { e as extractPlasmicDataProps, r as registerComponentHelper, u as useAutoOpen, m as makeComponentName } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import 'react-aria';
import './registerListBoxItem.esm.js';
import './registerDescription.esm.js';
import './registerText.esm.js';
import '@react-aria/utils';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function SelectAutoOpen(props) {
  var _a;
  const { open, close } = (_a = React.useContext(SelectStateContext)) != null ? _a : {};
  useAutoOpen({
    props,
    open: () => {
      open == null ? void 0 : open();
      setTimeout(() => {
        var _a2, _b;
        (_b = (_a2 = window.parent.document.activeElement) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
      }, 1);
    },
    close
  });
  return null;
}
const BaseSelectValue = (props) => {
  const { children, customize, className } = props;
  const placeholder = customize ? children : "Select an item";
  return /* @__PURE__ */ React.createElement(SelectValue, { className, style: COMMON_STYLES }, ({ isPlaceholder, selectedText }) => /* @__PURE__ */ React.createElement(React.Fragment, null, isPlaceholder ? placeholder : selectedText));
};
const SELECT_NAME = makeComponentName("select");
const SELECT_VARIANTS = [
  "focused",
  "focusVisible",
  "disabled"
];
const { variants: SELECT_VARIANTS_DATA } = pickAriaComponentVariants(SELECT_VARIANTS);
function BaseSelect(props) {
  const {
    selectedKey,
    onSelectionChange,
    onOpenChange,
    isDisabled,
    className,
    children,
    disabledKeys,
    name,
    setControlContextData,
    plasmicUpdateVariant,
    "aria-label": ariaLabel
  } = props;
  const idManager = useMemo(() => new OptionsItemIdManager(), []);
  useEffect(() => {
    idManager.subscribe((ids) => {
      setControlContextData == null ? void 0 : setControlContextData({
        itemIds: ids
      });
    });
  }, []);
  const classNameProp = useCallback(
    ({
      isDisabled: isDisabled2,
      isFocusVisible,
      isFocused
    }) => {
      plasmicUpdateVariant == null ? void 0 : plasmicUpdateVariant({
        disabled: isDisabled2,
        focused: isFocused,
        focusVisible: isFocusVisible
      });
      return className != null ? className : "";
    },
    [className, plasmicUpdateVariant]
  );
  return /* @__PURE__ */ React.createElement(
    Select,
    __spreadValues({
      selectedKey,
      onSelectionChange,
      onOpenChange,
      isDisabled,
      className: classNameProp,
      style: COMMON_STYLES,
      name,
      disabledKeys,
      "aria-label": ariaLabel
    }, extractPlasmicDataProps(props)),
    /* @__PURE__ */ React.createElement(SelectAutoOpen, __spreadValues({}, props)),
    /* @__PURE__ */ React.createElement(PlasmicPopoverTriggerContext.Provider, { value: true }, /* @__PURE__ */ React.createElement(
      PlasmicListBoxContext.Provider,
      {
        value: {
          idManager
        }
      },
      children
    ))
  );
}
function registerSelect(loader) {
  const selectValueMeta = registerComponentHelper(loader, BaseSelectValue, {
    name: makeComponentName("select-value"),
    displayName: "Aria Selected Value",
    importPath: "@plasmicpkgs/react-aria/skinny/registerSelect",
    importName: "BaseSelectValue",
    parentComponentName: SELECT_NAME,
    props: {
      customize: {
        type: "boolean",
        displayName: "Customize placeholder",
        defaultValue: true,
        description: "Customize the placeholder text and styles"
      },
      children: {
        type: "slot",
        displayName: "Placeholder",
        defaultValue: [
          {
            type: "text",
            value: "Select an item"
          }
        ],
        hidden: (props) => !props.customize
      }
    },
    trapsFocus: true
  });
  registerComponentHelper(loader, BaseSelect, {
    name: SELECT_NAME,
    displayName: "Aria Select",
    importPath: "@plasmicpkgs/react-aria/skinny/registerSelect",
    importName: "BaseSelect",
    variants: SELECT_VARIANTS_DATA,
    props: __spreadProps(__spreadValues({}, getCommonProps("Select", [
      "name",
      "aria-label",
      "isDisabled",
      "autoFocus"
    ])), {
      selectedKey: {
        type: "choice",
        editOnly: true,
        uncontrolledProp: "defaultSelectedKey",
        displayName: "Initial selected item",
        options: (_props, ctx) => (ctx == null ? void 0 : ctx.itemIds) ? Array.from(ctx.itemIds) : [],
        // React Aria Select do not support multiple selections yet
        multiSelect: false
      },
      onSelectionChange: {
        type: "eventHandler",
        argTypes: [{ name: "selectedValue", type: "string" }]
      },
      disabledKeys: {
        type: "choice",
        displayName: "Disabled values",
        description: "The items that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
        options: (_props, ctx) => (ctx == null ? void 0 : ctx.itemIds) ? Array.from(ctx.itemIds) : [],
        multiSelect: true,
        advanced: true
      },
      isOpen: {
        type: "boolean",
        defaultValue: false,
        // It doesn't make sense to make isOpen prop editable (it's controlled by user interaction and always closed by default), so we keep this prop hidden. We have listed the prop here in the meta only so we can expose a writeable state for it.
        hidden: () => true
      },
      onOpenChange: {
        type: "eventHandler",
        argTypes: [{ name: "isOpen", type: "boolean" }]
      },
      children: {
        type: "slot",
        mergeWithParent: true,
        defaultValue: [
          {
            type: "vbox",
            styles: {
              justifyContent: "flex-start",
              alignItems: "flex-start",
              width: "300px",
              padding: 0
            },
            children: [
              {
                type: "component",
                name: LABEL_COMPONENT_NAME,
                props: {
                  children: {
                    type: "text",
                    value: "Label"
                  }
                }
              },
              {
                type: "component",
                name: BUTTON_COMPONENT_NAME,
                styles: {
                  width: "100%",
                  padding: "4px 10px",
                  background: "white"
                },
                props: {
                  children: {
                    type: "hbox",
                    styles: {
                      width: "stretch",
                      justifyContent: "space-between",
                      alignItems: "center",
                      padding: 0
                    },
                    children: [
                      {
                        type: "component",
                        name: selectValueMeta.name
                      },
                      arrowDown
                    ]
                  }
                }
              },
              {
                type: "component",
                name: POPOVER_COMPONENT_NAME,
                styles: {
                  backgroundColor: "white",
                  padding: "10px",
                  overflow: "scroll",
                  width: "unset"
                },
                props: {
                  children: [
                    {
                      type: "component",
                      name: LIST_BOX_COMPONENT_NAME,
                      props: {
                        selectionMode: "single"
                      },
                      styles: {
                        borderWidth: 0,
                        width: "stretch"
                      }
                    }
                  ]
                }
              }
            ]
          }
        ]
      }
    }),
    states: {
      selectedValue: {
        type: "writable",
        valueProp: "selectedKey",
        onChangeProp: "onSelectionChange",
        variableType: "text"
      },
      isOpen: {
        type: "writable",
        valueProp: "isOpen",
        onChangeProp: "onOpenChange",
        variableType: "boolean"
      }
    },
    trapsFocus: true
  });
}

export { BaseSelect, BaseSelectValue, registerSelect };
//# sourceMappingURL=registerSelect.esm.js.map
