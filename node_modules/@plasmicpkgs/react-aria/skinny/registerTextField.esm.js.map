{"version":3,"file":"registerTextField.esm.js","sources":["../src/registerTextField.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport type { InputProps, TextFieldProps } from \"react-aria-components\";\nimport { TextField } from \"react-aria-components\";\nimport { COMMON_STYLES, getCommonProps, resolveAutoComplete } from \"./common\";\nimport { PlasmicTextFieldContext } from \"./contexts\";\nimport { DESCRIPTION_COMPONENT_NAME } from \"./registerDescription\";\nimport { INPUT_COMPONENT_NAME } from \"./registerInput\";\nimport { LABEL_COMPONENT_NAME } from \"./registerLabel\";\nimport {\n  CodeComponentMetaOverrides,\n  Registerable,\n  makeComponentName,\n  registerComponentHelper,\n} from \"./utils\";\nimport { WithVariants, pickAriaComponentVariants } from \"./variant-utils\";\n\nconst TEXT_FIELD_VARIANTS = [\"disabled\" as const, \"readonly\" as const];\n\nexport interface BaseTextFieldProps\n  extends Omit<TextFieldProps, \"autoComplete\">,\n    WithVariants<typeof TEXT_FIELD_VARIANTS> {\n  label?: ReactNode;\n  description?: ReactNode;\n  multiline?: boolean;\n  inputProps?: InputProps;\n  autoComplete?: string[];\n  children: ReactNode;\n}\n\nconst { variants, withObservedValues } =\n  pickAriaComponentVariants(TEXT_FIELD_VARIANTS);\n\nexport function BaseTextField(props: BaseTextFieldProps) {\n  const { children, plasmicUpdateVariant, autoComplete, ...rest } = props;\n\n  return (\n    <PlasmicTextFieldContext.Provider value={props}>\n      <TextField\n        autoComplete={resolveAutoComplete(autoComplete)}\n        {...rest}\n        style={COMMON_STYLES}\n      >\n        {({ isDisabled, isReadOnly }) =>\n          withObservedValues(\n            children,\n            {\n              disabled: isDisabled,\n              readonly: isReadOnly,\n            },\n            plasmicUpdateVariant\n          )\n        }\n      </TextField>\n    </PlasmicTextFieldContext.Provider>\n  );\n}\n\nexport const TEXT_FIELD_COMPONENT_NAME = makeComponentName(\"textField\");\n\nexport function registerTextField(\n  loader?: Registerable,\n  overrides?: CodeComponentMetaOverrides<typeof BaseTextField>\n) {\n  registerComponentHelper(\n    loader,\n    BaseTextField,\n    {\n      name: TEXT_FIELD_COMPONENT_NAME,\n      displayName: \"Aria TextField\",\n      importPath: \"@plasmicpkgs/react-aria/skinny/registerTextField\",\n      importName: \"BaseTextField\",\n      variants,\n      // TODO: Support for validate prop\n      props: {\n        ...getCommonProps<BaseTextFieldProps>(\"Text Field\", [\n          \"name\",\n          \"isDisabled\",\n          \"isReadOnly\",\n          \"autoFocus\",\n          \"aria-label\",\n          \"isRequired\",\n          \"value\",\n          \"maxLength\",\n          \"minLength\",\n          \"pattern\",\n          \"type\",\n          \"inputMode\",\n          \"validationBehavior\",\n          \"autoComplete\",\n          \"onChange\",\n          \"onFocus\",\n          \"onBlur\",\n          \"onFocusChange\",\n          \"onKeyDown\",\n          \"onKeyUp\",\n          \"onCopy\",\n          \"onCut\",\n          \"onPaste\",\n          \"onCompositionStart\",\n          \"onCompositionEnd\",\n          \"onCompositionUpdate\",\n          \"onSelect\",\n          \"onBeforeInput\",\n          \"onInput\",\n        ]),\n        children: {\n          type: \"slot\",\n          mergeWithParent: true,\n          defaultValue: {\n            type: \"vbox\",\n            styles: {\n              justifyContent: \"flex-start\",\n              alignItems: \"flex-start\",\n              width: \"300px\",\n              gap: \"5px\",\n              padding: 0,\n            },\n            children: [\n              {\n                type: \"component\",\n                name: LABEL_COMPONENT_NAME,\n                props: {\n                  children: {\n                    type: \"text\",\n                    value: \"Label\",\n                  },\n                },\n              },\n              {\n                type: \"component\",\n                name: INPUT_COMPONENT_NAME,\n                styles: {\n                  width: \"100%\",\n                },\n              },\n              {\n                type: \"component\",\n                name: DESCRIPTION_COMPONENT_NAME,\n                props: {\n                  children: {\n                    type: \"text\",\n                    value: \"Type something...\",\n                  },\n                },\n              },\n            ],\n          },\n        },\n\n        isInvalid: {\n          // TODO: Not sure if needed\n          displayName: \"Invalid\",\n          type: \"boolean\",\n          description: \"Whether the input value is invalid\",\n          defaultValueHint: false,\n        },\n        customValidationErrors: {\n          // TODO: Not sure if needed\n          type: \"array\",\n          description: \"Errors for custom validation\",\n        },\n      },\n      states: {\n        value: {\n          type: \"writable\",\n          valueProp: \"value\",\n          onChangeProp: \"onChange\",\n          variableType: \"text\",\n        },\n      },\n      trapsFocus: true,\n    },\n    overrides\n  );\n}\n"],"names":[],"mappings":"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"}