'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const OVERLAY_ARROW_VARIANTS = [
  // We do not offer a placementDown variant, because that's the default placement (an overlay arrow always has [data-placement=bottom] if it's not explicitly set)
  "placementTop",
  "placementLeft",
  "placementRight"
];
const { variants, withObservedValues } = variantUtils.pickAriaComponentVariants(
  OVERLAY_ARROW_VARIANTS
);
function BaseOverlayArrow({
  children,
  plasmicUpdateVariant,
  className
}) {
  const popoverContext = React__default.default.useContext(reactAriaComponents.PopoverContext);
  const tooltipContext = React__default.default.useContext(reactAriaComponents.TooltipContext);
  const isStandalone = !popoverContext && !tooltipContext;
  const overlayArrow = /* @__PURE__ */ React__default.default.createElement(
    reactAriaComponents.OverlayArrow,
    {
      style: __spreadValues({ lineHeight: "0" }, common.COMMON_STYLES),
      className
    },
    ({ placement }) => withObservedValues(
      children,
      {
        placementTop: placement === "top",
        placementLeft: placement === "left",
        placementRight: placement === "right"
      },
      plasmicUpdateVariant
    )
  );
  if (isStandalone) {
    return /* @__PURE__ */ React__default.default.createElement("div", { style: { position: "relative" } }, overlayArrow);
  }
  return overlayArrow;
}
const OVERLAY_ARROW_COMPONENT_NAME = utils.makeComponentName("overlayArrow");
function registerOverlayArrow(loader, overrides) {
  return utils.registerComponentHelper(
    loader,
    BaseOverlayArrow,
    {
      name: OVERLAY_ARROW_COMPONENT_NAME,
      displayName: "Aria Overlay Arrow",
      importPath: "@plasmicpkgs/react-aria/skinny/registerOverlayArrow",
      importName: "BaseOverlayArrow",
      styleSections: false,
      variants,
      props: {
        children: {
          type: "slot",
          defaultValue: common.arrowDown
        }
      }
    },
    overrides
  );
}

exports.BaseOverlayArrow = BaseOverlayArrow;
exports.OVERLAY_ARROW_COMPONENT_NAME = OVERLAY_ARROW_COMPONENT_NAME;
exports.registerOverlayArrow = registerOverlayArrow;
//# sourceMappingURL=registerOverlayArrow.cjs.js.map
