'use strict';

class OptionsItemIdManager {
  constructor() {
    this._ids = /* @__PURE__ */ new Set();
    this._observers = /* @__PURE__ */ new Set();
  }
  generateDuplicateId(id, count = 1) {
    const dupId = `${id} duplicate(${count})`;
    if (this._ids.has(dupId)) {
      return this.generateDuplicateId(id, count + 1);
    } else {
      return dupId;
    }
  }
  generateMissingId(count = 1) {
    const missingId = `missing(${count})`;
    if (this._ids.has(missingId)) {
      return this.generateMissingId(count + 1);
    } else {
      return missingId;
    }
  }
  register(id) {
    const idStr = id === void 0 ? void 0 : String(id).trim();
    let newId;
    if (!idStr) {
      newId = this.generateMissingId();
    } else if (this._ids.has(idStr)) {
      newId = this.generateDuplicateId(idStr);
    } else {
      newId = idStr;
    }
    this._ids.add(newId);
    this.notify();
    return newId;
  }
  unregister(id) {
    this._ids.delete(id);
    this.notify();
  }
  subscribe(observer) {
    this._observers.add(observer);
    observer(this.ids);
  }
  // Notify all observers about an event.
  notify() {
    this._observers.forEach((observer) => observer(this.ids));
  }
  get ids() {
    return Array.from(this._ids);
  }
}

exports.OptionsItemIdManager = OptionsItemIdManager;
//# sourceMappingURL=OptionsItemIdManager-a89a28b9.cjs.js.map
