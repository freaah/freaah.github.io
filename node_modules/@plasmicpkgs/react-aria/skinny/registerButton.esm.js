import { usePlasmicLink } from '@plasmicapp/host';
import React from 'react';
import { mergeProps, useLink, useHover, useFocusRing } from 'react-aria';
import { Button } from 'react-aria-components';
import { C as COMMON_STYLES, g as getCommonProps } from './common-ceebbaea.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const BUTTON_VARIANTS = [
  "hovered",
  "pressed",
  "focused",
  "focusVisible",
  "disabled"
];
const { variants, withObservedValues } = pickAriaComponentVariants(BUTTON_VARIANTS);
const BaseButton = React.forwardRef(function BaseButtonInner(props, ref) {
  const { href } = props;
  if (href) {
    return /* @__PURE__ */ React.createElement(
      LinkButton,
      {
        props,
        ref
      }
    );
  } else {
    const _a = props, { submitsForm, resetsForm, children, plasmicUpdateVariant } = _a, rest = __objRest(_a, ["submitsForm", "resetsForm", "children", "plasmicUpdateVariant"]);
    const type = submitsForm ? "submit" : resetsForm ? "reset" : "button";
    const buttonProps = mergeProps(rest, {
      type,
      style: COMMON_STYLES,
      ref
    });
    return /* @__PURE__ */ React.createElement(Button, __spreadValues({}, buttonProps), ({ isHovered, isPressed, isFocused, isFocusVisible, isDisabled }) => withObservedValues(
      children,
      {
        hovered: isHovered,
        pressed: isPressed,
        focused: isFocused,
        focusVisible: isFocusVisible,
        disabled: isDisabled
      },
      plasmicUpdateVariant
    ));
  }
});
function LinkButton({
  props,
  ref
}) {
  const _a = props, { href, children, plasmicUpdateVariant } = _a, rest = __objRest(_a, ["href", "children", "plasmicUpdateVariant"]);
  const PlasmicLink = usePlasmicLink();
  const { linkProps, isPressed } = useLink(props, ref);
  const { hoverProps, isHovered } = useHover(props);
  const { focusProps, isFocused, isFocusVisible } = useFocusRing();
  const combinedLinkProps = mergeProps(linkProps, hoverProps, focusProps, {
    href,
    className: props.className,
    style: COMMON_STYLES,
    ref
  });
  return /* @__PURE__ */ React.createElement(
    PlasmicLink,
    __spreadProps(__spreadValues({}, combinedLinkProps), {
      "data-focused": isFocused || void 0,
      "data-hovered": isHovered || void 0,
      "data-pressed": isPressed || void 0,
      "data-focus-visible": isFocusVisible || void 0,
      "data-disabled": props.isDisabled || void 0
    }),
    withObservedValues(
      children,
      {
        hovered: isHovered,
        pressed: isPressed,
        focused: isFocused,
        focusVisible: isFocusVisible,
        disabled: !!rest.isDisabled
      },
      plasmicUpdateVariant
    )
  );
}
const BUTTON_COMPONENT_NAME = makeComponentName("button");
function registerButton(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseButton,
    {
      name: BUTTON_COMPONENT_NAME,
      displayName: "Aria Button",
      importPath: "@plasmicpkgs/react-aria/skinny/registerButton",
      importName: "BaseButton",
      variants,
      defaultStyles: {
        // Ensure consistent design across rendered elements (button, anchor tag).
        backgroundColor: "#EFEFEF",
        borderColor: "black",
        borderStyle: "solid",
        borderWidth: "1px",
        color: "#000000",
        cursor: "pointer",
        fontFamily: "Arial",
        fontSize: "1rem",
        lineHeight: "1.2",
        padding: "2px 10px",
        textDecorationLine: "none"
      },
      props: __spreadProps(__spreadValues({}, getCommonProps("button", [
        "autoFocus",
        "isDisabled",
        "aria-label"
      ])), {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: {
            type: "text",
            value: "Button"
          }
        },
        href: {
          type: "href",
          description: "The URL this button navigates to. If present, this button is an <a> element."
        },
        target: {
          type: "choice",
          options: ["_blank", "_self", "_parent", "_top"],
          description: "Same as target attribute of <a> element. Only applies when the href prop is present.",
          hidden: (props) => !props.href,
          defaultValueHint: "_self"
        },
        submitsForm: {
          type: "boolean",
          displayName: "Submits form?",
          defaultValueHint: false,
          hidden: (props) => Boolean(props.resetsForm) || Boolean(props.href),
          description: "Whether clicking this button should submit the enclosing form.",
          advanced: true
        },
        resetsForm: {
          type: "boolean",
          displayName: "Resets form?",
          defaultValueHint: false,
          hidden: (props) => Boolean(props.submitsForm) || Boolean(props.href),
          description: "Whether clicking this button should reset the enclosing form.",
          advanced: true
        },
        onPress: {
          type: "eventHandler",
          argTypes: [{ name: "event", type: "object" }]
        },
        onFocus: {
          type: "eventHandler",
          argTypes: [{ name: "event", type: "object" }]
        }
      }),
      trapsFocus: true
    },
    overrides
  );
}

export { BUTTON_COMPONENT_NAME, BaseButton, registerButton };
//# sourceMappingURL=registerButton.esm.js.map
