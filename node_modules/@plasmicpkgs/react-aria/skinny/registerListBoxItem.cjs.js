'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var contexts = require('./contexts-6d0cb2b1.cjs.js');
var registerDescription = require('./registerDescription.cjs.js');
var registerText = require('./registerText.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const LIST_BOX_ITEM_VARIANTS = [
  "hovered",
  "pressed",
  "focused",
  "focusVisible",
  "selected",
  "disabled"
];
const { variants, withObservedValues } = variantUtils.pickAriaComponentVariants(
  LIST_BOX_ITEM_VARIANTS
);
function BaseListBoxItem(props) {
  const _a = props, { children, setControlContextData, plasmicUpdateVariant, id } = _a, rest = __objRest(_a, ["children", "setControlContextData", "plasmicUpdateVariant", "id"]);
  const listboxContext = React__default.default.useContext(contexts.PlasmicListBoxContext);
  const isStandalone = !listboxContext;
  const [registeredId, setRegisteredId] = React.useState();
  React.useEffect(() => {
    if (!listboxContext) {
      return;
    }
    const localId = listboxContext.idManager.register(id);
    setRegisteredId(localId);
    return () => {
      listboxContext.idManager.unregister(localId);
      setRegisteredId(void 0);
    };
  }, [id]);
  setControlContextData == null ? void 0 : setControlContextData({
    idError: (() => {
      if (id === void 0) {
        return "ID must be defined";
      }
      if (typeof id !== "string") {
        return "ID must be a string";
      }
      if (!id.trim()) {
        return "ID must be defined";
      }
      if (!isStandalone && id != registeredId) {
        return "ID must be unique";
      }
      return void 0;
    })()
  });
  const listboxItem = /* @__PURE__ */ React__default.default.createElement(
    reactAriaComponents.ListBoxItem,
    __spreadProps(__spreadValues({
      key: registeredId,
      id: registeredId
    }, rest), {
      style: common.COMMON_STYLES
    }),
    ({
      isHovered,
      isPressed,
      isFocused,
      isFocusVisible,
      isSelected,
      isDisabled
    }) => withObservedValues(
      children,
      {
        hovered: isHovered,
        pressed: isPressed,
        focused: isFocused,
        focusVisible: isFocusVisible,
        selected: isSelected,
        disabled: isDisabled
      },
      plasmicUpdateVariant
    )
  );
  if (isStandalone) {
    return /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.ListBox, { selectionMode: "single" }, listboxItem);
  }
  return listboxItem;
}
const makeDefaultListBoxItemChildren = (label, description) => ({
  type: "vbox",
  styles: {
    display: "flex",
    alignItems: "flex-start",
    gap: "2px"
  },
  children: [
    {
      type: "component",
      name: registerText.TEXT_COMPONENT_NAME,
      props: {
        slot: "label",
        children: {
          type: "text",
          styles: {
            fontWeight: 500
          },
          value: label
        }
      }
    },
    {
      type: "component",
      name: registerDescription.DESCRIPTION_COMPONENT_NAME,
      props: {
        children: {
          type: "text",
          styles: {
            color: "#838383"
          },
          value: description != null ? description : `Some description for ${label}...`
        }
      }
    }
  ]
});
function registerListBoxItem(loader, overrides) {
  return utils.registerComponentHelper(
    loader,
    BaseListBoxItem,
    {
      name: utils.makeComponentName("item"),
      displayName: "Aria ListBoxItem",
      importPath: "@plasmicpkgs/react-aria/skinny/registerListBoxItem",
      importName: "BaseListBoxItem",
      variants,
      props: {
        id: {
          type: "string",
          description: "A unique value for tracking the selected item in state",
          required: true,
          displayName: "Value",
          validator: (_value, _props, ctx) => {
            if (ctx == null ? void 0 : ctx.idError) {
              return ctx.idError;
            }
            return true;
          }
        },
        textValue: {
          type: "string",
          displayName: "Label",
          description: "A user-friendly text representation of the item's contents, used for features like typeahead."
        },
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: makeDefaultListBoxItemChildren("Item")
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

exports.BaseListBoxItem = BaseListBoxItem;
exports.makeDefaultListBoxItemChildren = makeDefaultListBoxItemChildren;
exports.registerListBoxItem = registerListBoxItem;
//# sourceMappingURL=registerListBoxItem.cjs.js.map
