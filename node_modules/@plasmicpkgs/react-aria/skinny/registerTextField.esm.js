import React from 'react';
import { TextField } from 'react-aria-components';
import { r as resolveAutoComplete, g as getCommonProps, C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { g as PlasmicTextFieldContext } from './contexts-5cb81c2f.esm.js';
import { DESCRIPTION_COMPONENT_NAME } from './registerDescription.esm.js';
import { INPUT_COMPONENT_NAME } from './registerInput.esm.js';
import { LABEL_COMPONENT_NAME } from './registerLabel.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import './registerText.esm.js';
import 'react-aria';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TEXT_FIELD_VARIANTS = ["disabled", "readonly"];
const { variants, withObservedValues } = pickAriaComponentVariants(TEXT_FIELD_VARIANTS);
function BaseTextField(props) {
  const _a = props, { children, plasmicUpdateVariant, autoComplete } = _a, rest = __objRest(_a, ["children", "plasmicUpdateVariant", "autoComplete"]);
  return /* @__PURE__ */ React.createElement(PlasmicTextFieldContext.Provider, { value: props }, /* @__PURE__ */ React.createElement(
    TextField,
    __spreadProps(__spreadValues({
      autoComplete: resolveAutoComplete(autoComplete)
    }, rest), {
      style: COMMON_STYLES
    }),
    ({ isDisabled, isReadOnly }) => withObservedValues(
      children,
      {
        disabled: isDisabled,
        readonly: isReadOnly
      },
      plasmicUpdateVariant
    )
  ));
}
const TEXT_FIELD_COMPONENT_NAME = makeComponentName("textField");
function registerTextField(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseTextField,
    {
      name: TEXT_FIELD_COMPONENT_NAME,
      displayName: "Aria TextField",
      importPath: "@plasmicpkgs/react-aria/skinny/registerTextField",
      importName: "BaseTextField",
      variants,
      // TODO: Support for validate prop
      props: __spreadProps(__spreadValues({}, getCommonProps("Text Field", [
        "name",
        "isDisabled",
        "isReadOnly",
        "autoFocus",
        "aria-label",
        "isRequired",
        "value",
        "maxLength",
        "minLength",
        "pattern",
        "type",
        "inputMode",
        "validationBehavior",
        "autoComplete",
        "onChange",
        "onFocus",
        "onBlur",
        "onFocusChange",
        "onKeyDown",
        "onKeyUp",
        "onCopy",
        "onCut",
        "onPaste",
        "onCompositionStart",
        "onCompositionEnd",
        "onCompositionUpdate",
        "onSelect",
        "onBeforeInput",
        "onInput"
      ])), {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: {
            type: "vbox",
            styles: {
              justifyContent: "flex-start",
              alignItems: "flex-start",
              width: "300px",
              gap: "5px",
              padding: 0
            },
            children: [
              {
                type: "component",
                name: LABEL_COMPONENT_NAME,
                props: {
                  children: {
                    type: "text",
                    value: "Label"
                  }
                }
              },
              {
                type: "component",
                name: INPUT_COMPONENT_NAME,
                styles: {
                  width: "100%"
                }
              },
              {
                type: "component",
                name: DESCRIPTION_COMPONENT_NAME,
                props: {
                  children: {
                    type: "text",
                    value: "Type something..."
                  }
                }
              }
            ]
          }
        },
        isInvalid: {
          // TODO: Not sure if needed
          displayName: "Invalid",
          type: "boolean",
          description: "Whether the input value is invalid",
          defaultValueHint: false
        },
        customValidationErrors: {
          // TODO: Not sure if needed
          type: "array",
          description: "Errors for custom validation"
        }
      }),
      states: {
        value: {
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "text"
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseTextField, TEXT_FIELD_COMPONENT_NAME, registerTextField };
//# sourceMappingURL=registerTextField.esm.js.map
