'use strict';

var React = require('react');
var reactAriaComponents = require('react-aria-components');
var common = require('./common-b3b54c72.cjs.js');
var contexts = require('./contexts-6d0cb2b1.cjs.js');
var OptionsItemIdManager = require('./OptionsItemIdManager-a89a28b9.cjs.js');
var registerButton = require('./registerButton.cjs.js');
var registerInput = require('./registerInput.cjs.js');
var registerLabel = require('./registerLabel.cjs.js');
var registerSection = require('./registerListBox-a99736df.cjs.js');
var registerPopover = require('./registerPopover.cjs.js');
var utils = require('./utils-7d000fa4.cjs.js');
var variantUtils = require('./variant-utils-0ad70db8.cjs.js');
require('@plasmicapp/host');
require('react-aria');
require('./registerListBoxItem.cjs.js');
require('./registerDescription.cjs.js');
require('./registerText.cjs.js');
require('@react-aria/utils');
require('@plasmicapp/host/registerComponent');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const COMBOBOX_NAME = utils.makeComponentName("combobox");
const COMBOBOX_VARIANTS = ["disabled"];
const { variants: COMBOBOX_VARIANTS_DATA } = variantUtils.pickAriaComponentVariants(COMBOBOX_VARIANTS);
function ComboboxAutoOpen(props) {
  var _a;
  const { open, close } = (_a = React__default.default.useContext(reactAriaComponents.ComboBoxStateContext)) != null ? _a : {};
  utils.useAutoOpen({ props, open, close });
  return null;
}
function BaseComboBox(props) {
  const _a = props, {
    children,
    setControlContextData,
    plasmicUpdateVariant,
    className,
    isOpen: _isOpen
  } = _a, rest = __objRest(_a, [
    "children",
    "setControlContextData",
    "plasmicUpdateVariant",
    "className",
    "isOpen"
  ]);
  const classNameProp = React.useCallback(
    ({ isDisabled }) => {
      plasmicUpdateVariant == null ? void 0 : plasmicUpdateVariant({
        disabled: isDisabled
      });
      return className != null ? className : "";
    },
    [className, plasmicUpdateVariant]
  );
  const idManager = React.useMemo(() => new OptionsItemIdManager.OptionsItemIdManager(), []);
  React.useEffect(() => {
    idManager.subscribe((ids) => {
      setControlContextData == null ? void 0 : setControlContextData({
        itemIds: ids
      });
    });
  }, []);
  return /* @__PURE__ */ React__default.default.createElement(reactAriaComponents.ComboBox, __spreadProps(__spreadValues({ className: classNameProp }, rest), { style: common.COMMON_STYLES }), /* @__PURE__ */ React__default.default.createElement(contexts.PlasmicPopoverTriggerContext.Provider, { value: true }, /* @__PURE__ */ React__default.default.createElement(
    contexts.PlasmicListBoxContext.Provider,
    {
      value: {
        idManager
      }
    },
    /* @__PURE__ */ React__default.default.createElement(contexts.PlasmicInputContext.Provider, { value: { isUncontrolled: true } }, /* @__PURE__ */ React__default.default.createElement(ComboboxAutoOpen, __spreadValues({}, props)), children)
  )));
}
function registerComboBox(loader) {
  utils.registerComponentHelper(loader, BaseComboBox, {
    name: COMBOBOX_NAME,
    displayName: "Aria ComboBox",
    importPath: "@plasmicpkgs/react-aria/skinny/registerComboBox",
    importName: "BaseComboBox",
    variants: COMBOBOX_VARIANTS_DATA,
    props: __spreadProps(__spreadValues({}, common.getCommonProps("ComboBox", [
      "name",
      "aria-label",
      "isDisabled"
    ])), {
      selectedKey: {
        type: "choice",
        editOnly: true,
        uncontrolledProp: "defaultSelectedKey",
        displayName: "Initial selected item",
        options: (_props, ctx) => (ctx == null ? void 0 : ctx.itemIds) ? Array.from(ctx.itemIds) : [],
        // React Aria ComboBox do not support multiple selections yet
        multiSelect: false
      },
      disabledKeys: {
        type: "choice",
        displayName: "Disabled values",
        description: "The items that are disabled. These items cannot be selected, focused, or otherwise interacted with.",
        options: (_props, ctx) => (ctx == null ? void 0 : ctx.itemIds) ? Array.from(ctx.itemIds) : [],
        multiSelect: true,
        advanced: true
      },
      isOpen: {
        type: "boolean",
        defaultValue: false,
        // It doesn't make sense to make isOpen prop editable (it's controlled by user interaction and always closed by default), so we keep this prop hidden. We have listed the prop here in the meta only so we can expose a writeable state for it.
        hidden: () => true
      },
      onSelectionChange: {
        type: "eventHandler",
        argTypes: [{ name: "selectedValue", type: "string" }]
      },
      onOpenChange: {
        type: "eventHandler",
        argTypes: [{ name: "isOpen", type: "boolean" }]
      },
      children: {
        type: "slot",
        defaultValue: [
          {
            type: "vbox",
            styles: {
              justifyContent: "flex-start",
              alignItems: "flex-start",
              width: "300px",
              padding: 0
            },
            children: [
              {
                type: "component",
                name: registerLabel.LABEL_COMPONENT_NAME,
                props: {
                  children: {
                    type: "text",
                    value: "Label"
                  }
                }
              },
              {
                type: "hbox",
                styles: {
                  padding: 0
                },
                children: [
                  {
                    type: "component",
                    name: registerInput.INPUT_COMPONENT_NAME,
                    styles: {
                      width: "100%",
                      borderRightWidth: 0
                    }
                  },
                  {
                    type: "component",
                    name: registerButton.BUTTON_COMPONENT_NAME,
                    props: {
                      children: common.arrowDown
                    }
                  }
                ]
              },
              {
                type: "component",
                name: registerPopover.POPOVER_COMPONENT_NAME,
                styles: {
                  backgroundColor: "white",
                  padding: "10px",
                  overflow: "scroll",
                  width: "unset"
                },
                props: {
                  offset: 0,
                  children: [
                    {
                      type: "component",
                      name: registerSection.LIST_BOX_COMPONENT_NAME,
                      props: {
                        selectionMode: "single"
                      },
                      styles: {
                        borderWidth: 0,
                        width: "stretch"
                      }
                    }
                  ]
                }
              }
            ]
          }
        ]
      }
    }),
    states: {
      selectedValue: {
        type: "writable",
        valueProp: "selectedKey",
        onChangeProp: "onSelectionChange",
        variableType: "text"
      },
      isOpen: {
        type: "writable",
        valueProp: "isOpen",
        onChangeProp: "onOpenChange",
        variableType: "boolean"
      }
    },
    trapsFocus: true
  });
}

exports.BaseComboBox = BaseComboBox;
exports.registerComboBox = registerComboBox;
//# sourceMappingURL=registerComboBox.cjs.js.map
