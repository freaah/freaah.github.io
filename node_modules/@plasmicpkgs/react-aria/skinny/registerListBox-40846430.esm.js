import React, { useState, useMemo, useEffect, useCallback } from 'react';
import { Section, Header, ListBox } from 'react-aria-components';
import { C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { b as PlasmicListBoxContext } from './contexts-5cb81c2f.esm.js';
import { O as OptionsItemIdManager } from './OptionsItemIdManager-832b8cfe.esm.js';
import { registerListBoxItem, makeDefaultListBoxItemChildren } from './registerListBoxItem.esm.js';
import { r as registerComponentHelper, m as makeComponentName } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function BaseSection(props) {
  const _a = props, { header, items } = _a, rest = __objRest$1(_a, ["header", "items"]);
  const contextProps = React.useContext(PlasmicListBoxContext);
  const isStandalone = !contextProps;
  const section = /* @__PURE__ */ React.createElement(Section, __spreadProps(__spreadValues$1({}, rest), { style: COMMON_STYLES }), /* @__PURE__ */ React.createElement(Header, null, header), items);
  if (isStandalone) {
    return (
      // BaseListbox should give section a listbox context (that it can't be used without)
      // as well as the id manager (that is needed to identify and warn about duplication of ids)
      // selection mode needs to be single/multiple to be able to trigger hover state on it.
      /* @__PURE__ */ React.createElement(BaseListBox, { selectionMode: "single" }, section)
    );
  }
  return section;
}
function registerSection(loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseSection,
    {
      name: makeComponentName("section"),
      displayName: "Aria Section",
      importPath: "@plasmicpkgs/react-aria/skinny/registerSection",
      importName: "BaseSection",
      defaultStyles: {
        width: "stretch",
        padding: "10px"
      },
      props: {
        header: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: [
            {
              type: "text",
              value: "Section Header."
            }
          ]
        },
        items: {
          type: "slot",
          mergeWithParent: true
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const LISTBOX_VARIANTS = ["focused", "focusVisible"];
const { variants } = pickAriaComponentVariants(LISTBOX_VARIANTS);
const listboxHelpers = {
  states: {
    selectedValue: {
      onChangeArgsToValue: (value) => {
        return Array.from(value)[0];
      }
    }
  }
};
function normalizeSelectedKeys(selectedKeys) {
  return typeof selectedKeys === "string" && selectedKeys !== "all" ? [selectedKeys] : selectedKeys;
}
function BaseListBox(props) {
  const _a = props, {
    setControlContextData,
    children,
    className,
    selectedKeys,
    defaultSelectedKeys,
    plasmicUpdateVariant
  } = _a, rest = __objRest(_a, [
    "setControlContextData",
    "children",
    "className",
    "selectedKeys",
    "defaultSelectedKeys",
    "plasmicUpdateVariant"
  ]);
  const context = React.useContext(PlasmicListBoxContext);
  const isStandalone = !context;
  const [ids, setIds] = useState([]);
  const idManager = useMemo(
    () => {
      var _a2;
      return (_a2 = context == null ? void 0 : context.idManager) != null ? _a2 : new OptionsItemIdManager();
    },
    []
  );
  useEffect(() => {
    setControlContextData == null ? void 0 : setControlContextData({
      itemIds: ids,
      isStandalone
    });
  }, [ids, isStandalone, setControlContextData]);
  useEffect(() => {
    idManager.subscribe((_ids) => {
      setIds(_ids);
    });
  }, []);
  const classNameProp = useCallback(
    ({ isFocusVisible, isFocused }) => {
      plasmicUpdateVariant == null ? void 0 : plasmicUpdateVariant({
        focused: isFocused,
        focusVisible: isFocusVisible
      });
      return className != null ? className : "";
    },
    [className, plasmicUpdateVariant]
  );
  const listbox = /* @__PURE__ */ React.createElement(
    ListBox,
    __spreadValues({
      selectedKeys: normalizeSelectedKeys(selectedKeys),
      defaultSelectedKeys: normalizeSelectedKeys(defaultSelectedKeys),
      className: classNameProp,
      style: COMMON_STYLES
    }, rest),
    children
  );
  if (isStandalone) {
    return /* @__PURE__ */ React.createElement(
      PlasmicListBoxContext.Provider,
      {
        value: {
          idManager
        }
      },
      listbox
    );
  }
  return listbox;
}
const LIST_BOX_COMPONENT_NAME = makeComponentName("listbox");
function registerListBox(loader, overrides) {
  const listBoxItemMeta = registerListBoxItem(loader, {
    parentComponentName: LIST_BOX_COMPONENT_NAME
  });
  const sectionMeta = registerSection(loader, {
    parentComponentName: LIST_BOX_COMPONENT_NAME,
    props: {
      items: {
        type: "slot",
        defaultValue: [
          {
            type: "component",
            name: listBoxItemMeta.name,
            props: {
              id: "section-1-1",
              textValue: "Section1-Item 1",
              children: [
                makeDefaultListBoxItemChildren(
                  "Item 1",
                  "Add dynamic values to make it more interesting"
                )
              ]
            }
          },
          {
            type: "component",
            name: listBoxItemMeta.name,
            props: {
              id: "section-1-2",
              textValue: "Section1-Item 2",
              children: [
                makeDefaultListBoxItemChildren(
                  "Item 2",
                  "Add dynamic values to make it more interesting"
                )
              ]
            }
          },
          {
            type: "component",
            name: listBoxItemMeta.name,
            props: {
              id: "section-1-3",
              textValue: "Section1-Item 3",
              children: [
                makeDefaultListBoxItemChildren(
                  "Item 3",
                  "Add dynamic values to make it more interesting"
                )
              ]
            }
          }
        ]
      }
    }
  });
  registerComponentHelper(
    loader,
    BaseListBox,
    {
      name: LIST_BOX_COMPONENT_NAME,
      displayName: "Aria ListBox",
      importPath: "@plasmicpkgs/react-aria/skinny/registerListBox",
      importName: "BaseListBox",
      variants,
      defaultStyles: {
        width: "250px",
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "black"
      },
      props: {
        children: {
          type: "slot",
          displayName: "List Items",
          allowedComponents: [listBoxItemMeta.name, sectionMeta.name],
          allowRootWrapper: true,
          defaultValue: [
            {
              type: "component",
              name: listBoxItemMeta.name,
              props: {
                id: "1",
                textValue: "Item 1",
                children: [
                  makeDefaultListBoxItemChildren(
                    "Item 1",
                    "Add dynamic values to make it more interesting"
                  )
                ]
              }
            },
            {
              type: "component",
              name: listBoxItemMeta.name,
              props: {
                id: "2",
                textValue: "Item 2",
                children: [
                  makeDefaultListBoxItemChildren(
                    "Item 2",
                    "Add dynamic values to make it more interesting"
                  )
                ]
              }
            },
            {
              type: "component",
              name: listBoxItemMeta.name,
              props: {
                id: "3",
                textValue: "Item 3",
                children: [
                  makeDefaultListBoxItemChildren(
                    "Item 3",
                    "Add dynamic values to make it more interesting"
                  )
                ]
              }
            },
            {
              type: "component",
              name: sectionMeta.name
            }
          ]
        },
        selectionMode: {
          type: "choice",
          description: "The selection mode of the listbox",
          options: ["none", "single"],
          defaultValue: "none",
          hidden: (_props, ctx) => !(ctx == null ? void 0 : ctx.isStandalone)
        },
        selectedKeys: {
          type: "choice",
          editOnly: true,
          uncontrolledProp: "defaultSelectedKeys",
          displayName: "Initial selected item",
          options: (_props, ctx) => (ctx == null ? void 0 : ctx.itemIds) ? Array.from(ctx.itemIds) : [],
          hidden: (props, ctx) => !(ctx == null ? void 0 : ctx.isStandalone) || props.selectionMode === "none",
          // We do not support multiple selections yet (Because React Aria select and combobox only support single selections).
          multiSelect: false
        },
        onSelectionChange: {
          type: "eventHandler",
          argTypes: [{ name: "selectedValues", type: "object" }]
        }
      },
      states: {
        selectedValue: __spreadValues({
          type: "writable",
          valueProp: "selectedKeys",
          hidden: (props, ctx) => !(ctx == null ? void 0 : ctx.isStandalone) || props.selectionMode === "none",
          onChangeProp: "onSelectionChange",
          variableType: "text"
        }, listboxHelpers.states.selectedValue)
      },
      componentHelpers: {
        helpers: listboxHelpers,
        importName: "listboxHelpers",
        importPath: "@plasmicpkgs/react-aria/skinny/registerListBox"
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseSection as B, LIST_BOX_COMPONENT_NAME as L, BaseListBox as a, registerListBox as b, listboxHelpers as l, registerSection as r };
//# sourceMappingURL=registerListBox-40846430.esm.js.map
