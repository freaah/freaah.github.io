import React, { useState, useEffect } from 'react';
import { Checkbox } from 'react-aria-components';
import { g as getCommonProps, h as hasParent, C as COMMON_STYLES } from './common-ceebbaea.esm.js';
import { P as PlasmicCheckboxGroupContext } from './contexts-5cb81c2f.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const CHECKBOX_VARIANTS = [
  "hovered",
  "pressed",
  "focused",
  "focusVisible",
  "indeterminate",
  "disabled",
  "selected",
  "readonly",
  "selected"
];
const { variants, withObservedValues } = pickAriaComponentVariants(CHECKBOX_VARIANTS);
function BaseCheckbox(props) {
  const _a = props, {
    children,
    plasmicUpdateVariant,
    setControlContextData,
    value
  } = _a, rest = __objRest(_a, [
    "children",
    "plasmicUpdateVariant",
    "setControlContextData",
    "value"
  ]);
  const contextProps = React.useContext(PlasmicCheckboxGroupContext);
  const isStandalone = !contextProps;
  const [registeredId, setRegisteredId] = useState();
  useEffect(() => {
    if (!(contextProps == null ? void 0 : contextProps.idManager)) {
      return;
    }
    const localId = contextProps.idManager.register(value);
    setRegisteredId(localId);
    return () => {
      contextProps.idManager.unregister(localId);
      setRegisteredId(void 0);
    };
  }, [value, contextProps == null ? void 0 : contextProps.idManager]);
  setControlContextData == null ? void 0 : setControlContextData({
    parent: contextProps,
    idError: (() => {
      if (value === void 0) {
        return "Value must be defined";
      }
      if (typeof value !== "string") {
        return "Value must be a string";
      }
      if (!value.trim()) {
        return "Value must be defined";
      }
      if (!isStandalone && value != registeredId) {
        return "Value must be unique";
      }
      return void 0;
    })()
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Checkbox,
    __spreadProps(__spreadValues({}, rest), {
      value: registeredId,
      key: registeredId,
      style: COMMON_STYLES
    }),
    ({
      isHovered,
      isPressed,
      isFocused,
      isFocusVisible,
      isDisabled,
      isIndeterminate,
      isSelected,
      isReadOnly
    }) => withObservedValues(
      children,
      {
        hovered: isHovered,
        pressed: isPressed,
        focused: isFocused,
        focusVisible: isFocusVisible,
        disabled: isDisabled,
        indeterminate: isIndeterminate,
        selected: isSelected,
        readonly: isReadOnly
      },
      plasmicUpdateVariant
    )
  ));
}
const makeDefaultCheckboxChildren = ({
  label,
  showDocs
}) => ({
  type: "vbox",
  styles: {
    display: "flex",
    alignItems: "center",
    gap: "2px",
    padding: 0
  },
  children: [
    {
      type: "hbox",
      styles: {
        display: "flex",
        alignItems: "center",
        gap: "10px",
        padding: 0
      },
      children: [
        {
          type: "box",
          styles: {
            width: "7px",
            height: "7px",
            borderRadius: "3px",
            borderWidth: "1px",
            borderStyle: "solid",
            borderColor: "black"
          }
        },
        {
          type: "text",
          value: label
        }
      ]
    },
    ...showDocs ? [
      {
        type: "text",
        value: "Use the registered variants to see it in action..."
      }
    ] : []
  ]
});
const CHECKBOX_COMPONENT_NAME = makeComponentName("checkbox");
function registerCheckbox(loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseCheckbox,
    {
      name: CHECKBOX_COMPONENT_NAME,
      displayName: "Aria Checkbox",
      importPath: "@plasmicpkgs/react-aria/skinny/registerCheckbox",
      importName: "BaseCheckbox",
      variants,
      props: __spreadProps(__spreadValues({}, getCommonProps("checkbox", [
        "name",
        "isDisabled",
        "isReadOnly",
        "aria-label",
        "isRequired",
        "autoFocus"
      ])), {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: makeDefaultCheckboxChildren({
            label: "Label",
            showDocs: true
          })
        },
        value: {
          type: "string",
          description: 'The value of the checkbox in "selected" state, used when submitting an HTML form.',
          defaultValueHint: 'Checked value (default: "on")',
          validator: (_value, _props, ctx) => {
            if (ctx == null ? void 0 : ctx.idError) {
              return ctx.idError;
            }
            return true;
          }
        },
        isSelected: {
          type: "boolean",
          displayName: "Default Selected",
          editOnly: true,
          uncontrolledProp: "defaultSelected",
          description: "Whether the checkbox should be selected by default",
          defaultValueHint: false,
          defaultValue: false,
          hidden: hasParent
        },
        isIndeterminate: {
          displayName: "Indeterminate",
          type: "boolean",
          description: "This state indicates that the checkbox is neither fully checked nor unchecked. It typically represents a partial selection when dealing with groups of options. Some but not all items in the group are selected, resulting in an indeterminate state for the checkbox.",
          defaultValueHint: false
        },
        isInvalid: {
          displayName: "Invalid",
          type: "boolean",
          description: "Whether the input value is invalid",
          defaultValueHint: false
        },
        validationBehavior: {
          type: "choice",
          options: ["native", "aria"],
          description: "Whether to use native HTML form validation to prevent form submission when the value is missing or invalid, or mark the field as required or invalid via ARIA.",
          defaultValueHint: "native"
        },
        onChange: {
          type: "eventHandler",
          argTypes: [{ name: "isSelected", type: "boolean" }]
        }
      }),
      states: {
        isSelected: {
          type: "writable",
          valueProp: "isSelected",
          onChangeProp: "onChange",
          variableType: "boolean",
          hidden: hasParent
        }
      },
      trapsFocus: true
    },
    overrides
  );
}

export { BaseCheckbox, CHECKBOX_COMPONENT_NAME, makeDefaultCheckboxChildren, registerCheckbox };
//# sourceMappingURL=registerCheckbox.esm.js.map
