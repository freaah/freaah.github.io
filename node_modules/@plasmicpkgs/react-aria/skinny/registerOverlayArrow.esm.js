import React from 'react';
import { PopoverContext, TooltipContext, OverlayArrow } from 'react-aria-components';
import { C as COMMON_STYLES, a as arrowDown } from './common-ceebbaea.esm.js';
import { m as makeComponentName, r as registerComponentHelper } from './utils-5d1b4c6b.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const OVERLAY_ARROW_VARIANTS = [
  // We do not offer a placementDown variant, because that's the default placement (an overlay arrow always has [data-placement=bottom] if it's not explicitly set)
  "placementTop",
  "placementLeft",
  "placementRight"
];
const { variants, withObservedValues } = pickAriaComponentVariants(
  OVERLAY_ARROW_VARIANTS
);
function BaseOverlayArrow({
  children,
  plasmicUpdateVariant,
  className
}) {
  const popoverContext = React.useContext(PopoverContext);
  const tooltipContext = React.useContext(TooltipContext);
  const isStandalone = !popoverContext && !tooltipContext;
  const overlayArrow = /* @__PURE__ */ React.createElement(
    OverlayArrow,
    {
      style: __spreadValues({ lineHeight: "0" }, COMMON_STYLES),
      className
    },
    ({ placement }) => withObservedValues(
      children,
      {
        placementTop: placement === "top",
        placementLeft: placement === "left",
        placementRight: placement === "right"
      },
      plasmicUpdateVariant
    )
  );
  if (isStandalone) {
    return /* @__PURE__ */ React.createElement("div", { style: { position: "relative" } }, overlayArrow);
  }
  return overlayArrow;
}
const OVERLAY_ARROW_COMPONENT_NAME = makeComponentName("overlayArrow");
function registerOverlayArrow(loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseOverlayArrow,
    {
      name: OVERLAY_ARROW_COMPONENT_NAME,
      displayName: "Aria Overlay Arrow",
      importPath: "@plasmicpkgs/react-aria/skinny/registerOverlayArrow",
      importName: "BaseOverlayArrow",
      styleSections: false,
      variants,
      props: {
        children: {
          type: "slot",
          defaultValue: arrowDown
        }
      }
    },
    overrides
  );
}

export { BaseOverlayArrow, OVERLAY_ARROW_COMPONENT_NAME, registerOverlayArrow };
//# sourceMappingURL=registerOverlayArrow.esm.js.map
