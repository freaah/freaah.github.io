// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pwPQehv5dRCmck24osLGTw
// Component: 5kBTZfShVyAc
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: pwPQehv5dRCmck24osLGTw/projectcss
import sty from "./PlasmicLineykaPlastikovayaAttacheEconomy.module.css"; // plasmic-import: 5kBTZfShVyAc/css

createPlasmicElementProxy;

export const PlasmicLineykaPlastikovayaAttacheEconomy__VariantProps =
  new Array();

export const PlasmicLineykaPlastikovayaAttacheEconomy__ArgProps = new Array();

const $$ = {};

function PlasmicLineykaPlastikovayaAttacheEconomy__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        />
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicLineykaPlastikovayaAttacheEconomy__ArgProps,
          internalVariantPropNames:
            PlasmicLineykaPlastikovayaAttacheEconomy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLineykaPlastikovayaAttacheEconomy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLineykaPlastikovayaAttacheEconomy";
  } else {
    func.displayName = `PlasmicLineykaPlastikovayaAttacheEconomy.${nodeName}`;
  }
  return func;
}

export const PlasmicLineykaPlastikovayaAttacheEconomy = Object.assign(
  // Top-level PlasmicLineykaPlastikovayaAttacheEconomy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLineykaPlastikovayaAttacheEconomy
    internalVariantProps:
      PlasmicLineykaPlastikovayaAttacheEconomy__VariantProps,
    internalArgProps: PlasmicLineykaPlastikovayaAttacheEconomy__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLineykaPlastikovayaAttacheEconomy;
/* prettier-ignore-end */
